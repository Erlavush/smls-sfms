generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Keep custom output path
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define the possible roles for users
enum Role {
  FACULTY
  ADMIN
}

// Approval Status Enum
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Specialization Model
model Specialization {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  faculty     User[]   @relation("FacultySpecializations")
}

// User model
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(FACULTY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  specializations Specialization[] @relation("FacultySpecializations")

  // Relationships to CV items
  academicQualifications   AcademicQualification[]
  professionalLicenses     ProfessionalLicense[]
  workExperiences          WorkExperience[]
  professionalAffiliations ProfessionalAffiliation[]
  awardsRecognitions       AwardRecognition[]
  professionalDevelopments ProfessionalDevelopment[]
  communityInvolvements    CommunityInvolvement[]
  publications             Publication[]
  conferencePresentations  ConferencePresentation[]

  // *** ADDED: Relation to Notifications ***
  notifications Notification[] // A user can have many notifications
}

// --- CV Related Models (Keep existing definitions) ---
model AcademicQualification {
  id              String         @id @default(cuid())
  degree          String
  institution     String
  program         String
  yearCompleted   Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  diplomaFileUrl  String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalLicense {
  id              String         @id @default(cuid())
  examination     String
  monthYear       String
  licenseNumber   String         @unique
  expiration      DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseFileUrl  String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model WorkExperience {
  id              String         @id @default(cuid())
  institution     String
  position        String
  natureOfWork    String?
  inclusiveYears  String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalAffiliation {
  id                 String         @id @default(cuid())
  organization       String
  position           String?
  inclusiveYears     String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipProofUrl String?
  status             ApprovalStatus @default(PENDING)
  rejectionReason    String?
}

model AwardRecognition {
  id              String         @id @default(cuid())
  awardName       String
  awardingBody    String
  yearReceived    Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateUrl  String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalDevelopment {
  id                 String         @id @default(cuid())
  title              String
  organizer          String
  dateLocation       String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateFileUrl String?
  status             ApprovalStatus @default(PENDING)
  rejectionReason    String?
}

model CommunityInvolvement {
  id              String         @id @default(cuid())
  engagementTitle String
  role            String
  locationDate    String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model Publication {
  id              String         @id @default(cuid())
  researchTitle   String
  journal         String
  datePublished   DateTime
  doiLink         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfUrl          String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ConferencePresentation {
  id              String         @id @default(cuid())
  paperTitle      String
  eventName       String
  dateLocation    String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

// --- *** NEW: Notification Model *** ---
model Notification {
  id        String   @id @default(cuid())
  message   String // The content of the notification
  link      String? // Optional link for navigation (e.g., to the item or page)
  isRead    Boolean  @default(false) // Tracks if the user has seen it
  createdAt DateTime @default(now()) // When the notification was created

  // Relation to the User who should receive the notification
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted

  // Optional: Add an index for faster querying of user notifications
  @@index([userId])
}

// --- *** END: Notification Model *** ---

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define the possible roles for users
enum Role {
  FACULTY
  ADMIN
}

// Define the User model
model User {
  id        String   @id @default(cuid()) // Unique ID for the user (using cuid)
  name      String?                       // User's name (optional for now)
  email     String   @unique                 // User's email, must be unique
  password  String                        // Hashed password (we will hash it before saving)
  role      Role     @default(FACULTY)     // User's role (defaults to FACULTY)
  createdAt DateTime @default(now())         // Timestamp when the user was created
  updatedAt DateTime @updatedAt            // Timestamp when the user was last updated

  // --- Relationships to CV Models (One User has Many...) ---
  academicQualifications AcademicQualification[]
  professionalLicenses   ProfessionalLicense[]
  workExperiences        WorkExperience[]
  professionalAffiliations ProfessionalAffiliation[]
  awardsRecognitions     AwardRecognition[]
  professionalDevelopments ProfessionalDevelopment[]
  communityInvolvements  CommunityInvolvement[]
  publications           Publication[]
  conferencePresentations ConferencePresentation[]
  // --- End Relationships ---
}

// --- CV Related Models ---

model AcademicQualification {
  id          String   @id @default(cuid())
  degree      String
  institution String
  program     String
  yearCompleted Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Supporting document field
  diplomaFileUrl String? // Optional field to store URL/path of uploaded diploma/transcript
}

model ProfessionalLicense {
  id          String   @id @default(cuid())
  examination String   // e.g., "Medical Technologist Licensure Examination"
  monthYear   String   // e.g., "August 2023"
  licenseNumber String @unique // License number should be unique
  expiration  DateTime // Date the license expires (REQUIRED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  licenseFileUrl String?
}

model WorkExperience {
  id         String   @id @default(cuid())
  institution String   // e.g., "San Pedro College", "Davao Doctors Hospital"
  position   String   // e.g., "Faculty", "Medical Technologist"
  natureOfWork String?  // Optional description
  inclusiveYears String // e.g., "2020-Present", "2018-2020"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  proofUrl String?
}

model ProfessionalAffiliation {
  id        String   @id @default(cuid())
  organization String // e.g., "PAMET", "PASMETH"
  position  String?  // Optional: "Member", "Officer", etc.
  inclusiveYears String // e.g., "2019-Present"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  membershipProofUrl String?
}

model AwardRecognition {
  id             String   @id @default(cuid())
  awardName      String   // Name of the award/recognition
  awardingBody   String   // Organization/Institution that gave the award
  yearReceived   Int      // Year the award was received
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

   // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  certificateUrl String?
}

model ProfessionalDevelopment {
  id          String   @id @default(cuid())
  title       String
  organizer   String
  dateLocation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Supporting document field
  certificateFileUrl String? // Optional field to store URL/path of uploaded certificate
}

model CommunityInvolvement {
  id          String   @id @default(cuid())
  engagementTitle String // e.g., "Medical Mission Barangay X", "Blood Donation Drive"
  role        String   // e.g., "Volunteer", "Organizer"
  locationDate String  // e.g., "Barangay X / May 5, 2024"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  proofUrl String?
}

// --- Research Related Models ---
model Publication {
  id            String   @id @default(cuid())
  researchTitle String
  journal       String   // Name of the journal
  datePublished DateTime // Date of publication
  doiLink       String?  // Optional: Link to DOI
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

   // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  pdfUrl String? // Optional: URL/path to uploaded PDF copy
}

model ConferencePresentation {
  id            String   @id @default(cuid())
  paperTitle    String
  eventName     String   // Name of the conference/event
  dateLocation  String   // e.g., "June 2024 / Manila"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- ADDED: Supporting document field ---
  proofUrl String? // Optional: URL/path to certificate/program page
}

// --- Add other models below as needed ---
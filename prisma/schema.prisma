// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Keep custom output path
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define the possible roles for users
enum Role {
  FACULTY
  ADMIN
}

// --- ADDED: Approval Status Enum ---
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
// --- END ADDED ---

// --- NEW: Specialization Model ---
model Specialization {
  id          String @id @default(cuid())
  name        String @unique // Name of the specialization (e.g., "Hematology")
  description String? // Optional description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Many-to-many relation with User (Faculty)
  faculty   User[]     @relation("FacultySpecializations") // Relation name
}
// --- END NEW ---

// Define the User model
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(FACULTY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- ADDED: Relation to Specialization ---
  specializations Specialization[] @relation("FacultySpecializations") // Relation name must match
  // --- END ADDED ---

  // Relationships
  academicQualifications AcademicQualification[]
  professionalLicenses   ProfessionalLicense[]
  workExperiences        WorkExperience[]
  professionalAffiliations ProfessionalAffiliation[]
  awardsRecognitions     AwardRecognition[]
  professionalDevelopments ProfessionalDevelopment[]
  communityInvolvements  CommunityInvolvement[]
  publications           Publication[]
  conferencePresentations ConferencePresentation[]
}

// --- CV Related Models (Add status and rejectionReason to ALL below) ---

model AcademicQualification {
  id            String   @id @default(cuid())
  degree        String
  institution   String
  program       String
  yearCompleted Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diplomaFileUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ProfessionalLicense {
  id            String   @id @default(cuid())
  examination   String
  monthYear     String
  licenseNumber String   @unique
  expiration    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseFileUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model WorkExperience {
  id             String   @id @default(cuid())
  institution    String
  position       String
  natureOfWork   String?
  inclusiveYears String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl       String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ProfessionalAffiliation {
  id                String   @id @default(cuid())
  organization      String
  position          String?
  inclusiveYears    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipProofUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model AwardRecognition {
  id             String   @id @default(cuid())
  awardName      String
  awardingBody   String
  yearReceived   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ProfessionalDevelopment {
  id                String   @id @default(cuid())
  title             String
  organizer         String
  dateLocation      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateFileUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model CommunityInvolvement {
  id              String   @id @default(cuid())
  engagementTitle String
  role            String
  locationDate    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model Publication {
  id            String   @id @default(cuid())
  researchTitle String
  journal       String
  datePublished DateTime
  doiLink       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfUrl        String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ConferencePresentation {
  id            String   @id @default(cuid())
  paperTitle    String
  eventName     String
  dateLocation  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl      String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}
--- Project Context for smls-sfms ---
--- Generated on: 2025-05-09T02:37:16.964Z ---
--- Root Directory: c:\Users\user\smls-sfms ---

--- START FILE: .roo\mcp.json ---
{
  "mcpServers": {}
}
--- END FILE: .roo\mcp.json ---

--- START FILE: prisma\add_faculty_hematology.cjs ---
// prisma/add_faculty_hematology.cjs
// Adds 'Dr. Heidi Hematology' with placeholder file URLs.
// IMPORTANT: Does NOT delete existing data. Files won't actually exist.

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration ---
const facultyEmail = 'faculty1@test.com';
const facultyPassword = 'password123';
const facultyName = 'Dr. Heidi Hematology';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add faculty: ${facultyEmail}`);

  const existingUser = await prisma.user.findUnique({
    where: { email: facultyEmail },
  });

  if (existingUser) {
    console.log(`Faculty user with email ${facultyEmail} already exists. Skipping creation.`);
    return;
  }

  console.log(`Creating faculty user ${facultyEmail}...`);
  const facultyUser = await createFacultyUser();
  if (!facultyUser) { return; }
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);

  // --- Add CV details (Pass userId for dummy URLs) ---
  try {
      console.log("Adding academic qualifications...");
      await addAcademicQualifications(facultyUser.id); // Pass ID
      console.log("Adding professional licenses...");
      await addProfessionalLicenses(facultyUser.id); // Pass ID
      console.log("Adding work experiences...");
      await addWorkExperiences(facultyUser.id); // Pass ID
      console.log("Adding professional affiliations...");
      await addProfessionalAffiliations(facultyUser.id); // Pass ID
      console.log("Adding awards/recognitions...");
      await addAwardsRecognitions(facultyUser.id); // Pass ID
      console.log("Adding professional developments...");
      await addProfessionalDevelopments(facultyUser.id); // Pass ID
      console.log("Skipping community involvements for this user.");
      console.log("Skipping publications for this user.");
      console.log("Adding conference presentations...");
      await addConferencePresentations(facultyUser.id); // Pass ID

      console.log(`Successfully added CV details for ${facultyEmail}.`);

  } catch(error) {
      console.error(`Error adding CV details for ${facultyEmail} (User created but CV data failed):`, error);
      process.exit(1);
  }

  console.log(`Script finished for adding ${facultyEmail}.`);
}

// --- Helper Functions ---

async function createFacultyUser() {
    // ... (createFacultyUser function remains the same) ...
    try {
        const hashedPassword = await bcrypt.hash(facultyPassword, 10);
        console.log(`Password hashed for ${facultyEmail}.`);

        return await prisma.user.create({
            data: {
            name: facultyName,
            email: facultyEmail.toLowerCase().trim(),
            password: hashedPassword,
            role: 'FACULTY',
            },
            select: { id: true, email: true }
        });
    } catch (error) {
        console.error(`Error during faculty user creation (${facultyEmail}):`, error);
        if (error.code === 'P2002') {
            console.error(`Error: Email ${facultyEmail} already exists (constraint violation).`);
        }
        return null;
    }
}

// --- Modified Helper functions to include dummy URLs ---

async function addAcademicQualifications(userId) { // Accept userId
  await prisma.academicQualification.createMany({
    data: [
      {
        userId,
        degree: 'MS Medical Technology',
        institution: 'University of Santo Tomas',
        program: 'Specialization in Hematology',
        yearCompleted: 2016,
        // Example placeholder URL
        diplomaFileUrl: `/uploads/qualifications/${userId}/dummy-ms-diploma.pdf`,
        status: 'APPROVED'
      },
      {
        userId,
        degree: 'BS Medical Technology',
        institution: 'San Pedro College',
        program: 'Medical Technology',
        yearCompleted: 2013,
        // Example placeholder URL
        diplomaFileUrl: `/uploads/qualifications/${userId}/dummy-bs-diploma.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalLicenses(userId) { // Accept userId
  await prisma.professionalLicense.createMany({
    data: [
      {
        userId,
        examination: 'Medical Technologist Licensure',
        monthYear: 'August 2013',
        licenseNumber: '0369121',
        expiration: new Date('2027-08-20'),
        // Example placeholder URL
        licenseFileUrl: `/uploads/licenses/${userId}/dummy-rmt-license.png`,
        status: 'APPROVED'
      },
      {
        userId,
        examination: 'Blood Bank Specialist (ASCP)',
        monthYear: 'November 2019',
        licenseNumber: 'SBB-HH-002',
        expiration: new Date('2026-11-30'),
        // Example placeholder URL
        licenseFileUrl: `/uploads/licenses/${userId}/dummy-sbb-cert.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addWorkExperiences(userId) { // Accept userId
   await prisma.workExperience.createMany({
    data: [
      {
        userId,
        institution: 'San Pedro College',
        position: 'Instructor',
        natureOfWork: 'Teaching Hematology, Immunohematology & Serology',
        inclusiveYears: '2017-Present',
        // Example placeholder URL
        proofUrl: `/uploads/workexp/${userId}/dummy-spc-coe.pdf`,
        status: 'APPROVED'
      },
      {
        userId,
        institution: 'Southern Philippines Medical Center - Blood Bank',
        position: 'Medical Technologist II',
        natureOfWork: 'Blood banking procedures, component preparation, compatibility testing',
        inclusiveYears: '2014-2017',
        // Example placeholder URL
        proofUrl: `/uploads/workexp/${userId}/dummy-spmc-coe.jpg`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalAffiliations(userId) { // Accept userId
  await prisma.professionalAffiliation.createMany({
    data: [
      {
        userId,
        organization: 'Philippine Association of Medical Technologists (PAMET)',
        position: 'Member, Committee on Hematology',
        inclusiveYears: '2013-Present',
        // Example placeholder URL
        membershipProofUrl: `/uploads/affiliations/${userId}/dummy-pamet-id.png`,
        status: 'APPROVED'
      },
      {
        userId,
        organization: 'Philippine Blood Coordinating Council (PBCC)',
        position: 'Affiliate Member',
        inclusiveYears: '2018-Present',
        // Example placeholder URL (optional, could be null)
        membershipProofUrl: `/uploads/affiliations/${userId}/dummy-pbcc-cert.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addAwardsRecognitions(userId) { // Accept userId
  await prisma.awardRecognition.createMany({
    data: [
      {
        userId,
        awardName: 'Excellence in Teaching - Junior Faculty',
        awardingBody: 'San Pedro College - Academic Council',
        yearReceived: 2020,
        // Example placeholder URL
        certificateUrl: `/uploads/awards/${userId}/dummy-teaching-award.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalDevelopments(userId) { // Accept userId
   await prisma.professionalDevelopment.createMany({
    data: [
      {
        userId,
        title: 'Advanced Concepts in Immunohematology',
        organizer: 'PBCC National Convention',
        dateLocation: 'May 2023, Iloilo City',
        // Example placeholder URL
        certificateFileUrl: `/uploads/profdev/${userId}/dummy-pbcc-cert.pdf`,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Flow Cytometry Principles and Applications',
        organizer: 'Hematology Experts Inc.',
        dateLocation: 'September 2022, Online',
        // Example placeholder URL
        certificateFileUrl: `/uploads/profdev/${userId}/dummy-flowcyto-cert.png`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addCommunityInvolvements(userId) { // Accept userId
  // Skipping for this user
  console.log("Skipping community involvements for this user.");
}

async function addPublications(userId) { // Accept userId
  // Skipping for this user
  console.log("Skipping publications for this user.");
}

async function addConferencePresentations(userId) { // Accept userId
  await prisma.conferencePresentation.createMany({
    data: [
      {
        userId,
        paperTitle: 'Case Study: Rare Blood Group Antigen Identification',
        eventName: 'PAMET Southern Mindanao Regional Conference',
        dateLocation: 'July 2023, General Santos City',
        // Example placeholder URL
        proofUrl: `/uploads/presentations/${userId}/dummy-pamet-poster-proof.pdf`,
        status: 'PENDING'
      }
    ]
  });
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\add_faculty_hematology.cjs ---

--- START FILE: prisma\add_faculty.cjs ---
// prisma/add_faculty.cjs
// Adds ONE faculty user ('Prof. Ken Neutron') with details.
// IMPORTANT: Does NOT delete existing data.

// Use the direct path that worked before
const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration for this specific faculty ---
const facultyEmail = 'faculty2@test.com';
const facultyPassword = 'password123'; // Choose a password
const facultyName = 'Prof. Ken Neutron';
// --- End Configuration ---


async function main() {
  console.log(`Starting script to add faculty: ${facultyEmail}`);

  // 1. Check if this specific faculty user already exists
  const existingUser = await prisma.user.findUnique({
    where: { email: facultyEmail },
  });

  if (existingUser) {
    console.log(`Faculty user with email ${facultyEmail} already exists. Skipping creation.`);
    return; // Exit if this user exists
  }

  // --- Create the Faculty User ---
  console.log(`Creating faculty user ${facultyEmail}...`);
  const facultyUser = await createFacultyUser();
  if (!facultyUser) {
      // Error handled within createFacultyUser
      return;
  }
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);


  // --- Add CV details ---
  // Wrap additions in try...catch in case user creation succeeded but CV fails
  try {
      console.log("Adding academic qualifications...");
      await addAcademicQualifications(facultyUser.id);
      console.log("Adding professional licenses...");
      await addProfessionalLicenses(facultyUser.id);
      console.log("Adding work experiences...");
      await addWorkExperiences(facultyUser.id);
      console.log("Adding professional affiliations...");
      await addProfessionalAffiliations(facultyUser.id);
      console.log("Adding awards/recognitions...");
      await addAwardsRecognitions(facultyUser.id);
      console.log("Adding professional developments...");
      await addProfessionalDevelopments(facultyUser.id);
      console.log("Adding community involvements...");
      await addCommunityInvolvements(facultyUser.id);
      console.log("Adding publications...");
      await addPublications(facultyUser.id);
      console.log("Adding conference presentations...");
      await addConferencePresentations(facultyUser.id);

      console.log(`Successfully added CV details for ${facultyEmail}.`);

  } catch(error) {
      console.error(`Error adding CV details for ${facultyEmail} (User was created but CV data failed):`, error);
      // Decide if you want to delete the user if CV fails, or leave them partially created
      // await prisma.user.delete({ where: { id: facultyUser.id }});
      // console.log(`Cleaned up partially created user ${facultyEmail}.`);
      process.exit(1);
  }

  console.log(`Script finished for adding ${facultyEmail}.`);
}


// --- Helper Functions (Copied from previous seed, NO clearExistingData) ---

async function createFacultyUser() {
  try {
      const hashedPassword = await bcrypt.hash(facultyPassword, 10);
      console.log(`Password hashed for ${facultyEmail}.`);

      return await prisma.user.create({
        data: {
          name: facultyName,
          email: facultyEmail.toLowerCase().trim(),
          password: hashedPassword,
          role: 'FACULTY', // Use string literal
        },
        select: { id: true, email: true } // Select only needed fields
      });
  } catch (error) {
      console.error(`Error during faculty user creation (${facultyEmail}):`, error);
      // Handle potential unique constraint violation gracefully if check missed somehow
      if (error.code === 'P2002') {
          console.error(`Error: Email ${facultyEmail} already exists (constraint violation).`);
      }
      return null; // Indicate failure
  }
}

async function addAcademicQualifications(userId) {
  await prisma.academicQualification.createMany({
    data: [
      {
        userId,
        degree: 'MS Physics',
        institution: 'National Institute of Physics',
        program: 'Applied Physics',
        yearCompleted: 2014,
        diplomaFileUrl: null,
        status: 'APPROVED' // Use string literal
      },
      {
        userId,
        degree: 'BS Medical Technology',
        institution: 'San Pedro College',
        program: 'Medical Technology',
        yearCompleted: 2010,
        diplomaFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalLicenses(userId) {
  await prisma.professionalLicense.createMany({
    data: [
      {
        userId,
        examination: 'Medical Technologist Licensure',
        monthYear: 'March 2011',
        licenseNumber: '0246810', // Ensure this is unique if needed
        expiration: new Date('2025-03-15'),
        licenseFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        examination: 'Radiation Safety Officer Training',
        monthYear: 'July 2018',
        licenseNumber: 'RSO-KN-001', // Ensure this is unique if needed
        expiration: new Date('2026-07-31'),
        licenseFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addWorkExperiences(userId) {
   await prisma.workExperience.createMany({
    data: [
      {
        userId,
        institution: 'San Pedro College',
        position: 'Instructor / Lab Safety Officer',
        natureOfWork: 'Teaching Physics for Health Sciences, Managing Lab Safety Protocols',
        inclusiveYears: '2015-Present',
        proofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        institution: 'BioInstrumentation Inc.',
        position: 'Field Service Engineer',
        natureOfWork: 'Calibration and Maintenance of Laboratory Equipment',
        inclusiveYears: '2011-2015',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalAffiliations(userId) {
  await prisma.professionalAffiliation.createMany({
    data: [
      {
        userId,
        organization: 'Philippine Association of Medical Technologists (PAMET)',
        position: 'Member',
        inclusiveYears: '2011-Present',
        membershipProofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        organization: 'Samahang Pisika ng Pilipinas (SPP)',
        position: 'Associate Member',
        inclusiveYears: '2016-Present',
        membershipProofUrl: null,
        status: 'PENDING'
      }
    ]
  });
}

async function addAwardsRecognitions(userId) {
  await prisma.awardRecognition.createMany({
    data: [
      {
        userId,
        awardName: 'Laboratory Safety Excellence Award',
        awardingBody: 'SPC Safety Committee',
        yearReceived: 2021,
        certificateUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalDevelopments(userId) {
   await prisma.professionalDevelopment.createMany({
    data: [
      {
        userId,
        title: 'Training on Calibration of Spectrophotometers',
        organizer: 'Precision Instruments Ltd.',
        dateLocation: 'August 2022, Online',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Seminar on Occupational Safety and Health in Laboratories',
        organizer: 'DOLE / OSHC',
        dateLocation: 'April 2023, Davao City',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Modern Physics Applications in Medicine',
        organizer: 'SPP Annual Convention',
        dateLocation: 'October 2023, Cebu City',
        certificateFileUrl: null,
        status: 'REJECTED',
        rejectionReason: 'Certificate unclear.'
      }
    ]
  });
}

async function addCommunityInvolvements(userId) {
  await prisma.communityInvolvement.createMany({
    data: [
      {
        userId,
        engagementTitle: 'Career Talk: Medical Technology',
        role: 'Speaker',
        locationDate: 'Davao City National High School, Feb 2023',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addPublications(userId) {
  // No publications for this user in this example
  console.log("Skipping publications for this user.");
}

async function addConferencePresentations(userId) {
  await prisma.conferencePresentation.createMany({
    data: [
      {
        userId,
        paperTitle: 'Implementing Enhanced Safety Protocols in a University MedTech Laboratory',
        eventName: 'PAMET Davao Chapter Annual Meeting - Poster Session',
        dateLocation: 'November 2022, Davao City',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\add_faculty.cjs ---

--- START FILE: prisma\create_admin.cjs ---
// prisma/create_admin.cjs
// Creates ONLY an admin user. Does NOT delete existing data.

// Use the direct path that worked before
const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration ---
// CHANGE THESE VALUES AS NEEDED
const adminEmail = 'admin@test.com';
const adminPassword = 'password123'; // Choose a secure password!
const adminName = 'SMLS Admin'; // Optional: Set a name
// --- End Configuration ---

async function main() {
  console.log(`Attempting to create admin user: ${adminEmail}`);

  // 1. Check if admin already exists
  const existingAdmin = await prisma.user.findUnique({
    where: { email: adminEmail },
  });

  if (existingAdmin) {
    console.log(`Admin user with email ${adminEmail} already exists. Skipping creation.`);
    return; // Exit if admin exists
  }

  // 2. Hash the password
  const saltRounds = 10;
  const hashedPassword = await bcrypt.hash(adminPassword, saltRounds);
  console.log(`Password hashed.`);

  // 3. Create the admin user
  try {
    const newAdmin = await prisma.user.create({
      data: {
        name: adminName,
        email: adminEmail.toLowerCase().trim(), // Store lowercase, trimmed email
        password: hashedPassword,
        role: 'ADMIN', // Use the string literal 'ADMIN'
        // emailVerified: new Date(), // Optional: Mark as verified immediately if desired
      },
      select: { // Only select necessary fields
        id: true,
        email: true,
        role: true,
      }
    });
    console.log(`Successfully created ADMIN user: ${newAdmin.email} (ID: ${newAdmin.id})`);

  } catch (error) {
    console.error(`Error creating admin user ${adminEmail}:`, error);
    process.exit(1); // Exit with error on failure
  }
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\create_admin.cjs ---

--- START FILE: prisma\delete_user.cjs ---
// prisma/delete_user.js
// Use the direct path that worked for seeding
const { PrismaClient } = require('../src/generated/prisma/index.js');
const prisma = new PrismaClient();

async function main() {
  // --- Get Email from Command Line Argument ---
  // process.argv contains command line arguments.
  // argv[0] is node executable path
  // argv[1] is the script path
  // argv[2] will be the first argument we pass (the email)
  const emailToDelete = process.argv[2];

  if (!emailToDelete) {
    console.error("ERROR: Please provide the email address of the user to delete as a command line argument.");
    console.log("Example: node prisma/delete_user.js user@example.com");
    process.exit(1); // Exit with an error code
  }

  console.log(`Attempting to delete user with email: ${emailToDelete}`);

  try {
    // Find the user first to confirm existence (optional but good practice)
    const user = await prisma.user.findUnique({
      where: { email: emailToDelete },
    });

    if (!user) {
      console.log(`User with email ${emailToDelete} not found.`);
      return; // Exit gracefully if user doesn't exist
    }

    console.log(`Found user ${user.name || user.email} (ID: ${user.id}). Proceeding with deletion...`);

    // --- Delete the User (Cascade will handle related data) ---
    const deleteResult = await prisma.user.delete({
      where: {
        email: emailToDelete,
      },
    });

    console.log(`Successfully deleted user with email: ${emailToDelete}`);
    console.log("Associated CV data should also be deleted due to 'onDelete: Cascade'.");

  } catch (e) {
    console.error(`Error deleting user ${emailToDelete}:`, e);
    process.exit(1); // Exit with an error code if deletion fails
  }
}

// --- Main execution ---
main()
  .catch((e) => {
    // Catch any unexpected errors during main execution
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\delete_user.cjs ---

--- START FILE: prisma\schema.prisma ---
// Action: Modify prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Keep custom output path
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define the possible roles for users
enum Role {
  FACULTY
  ADMIN
}

// Approval Status Enum
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Specialization Model
model Specialization {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  faculty   User[]     @relation("FacultySpecializations")
}

// User model
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(FACULTY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  specializations Specialization[] @relation("FacultySpecializations")

  // Relationships to CV items
  academicQualifications AcademicQualification[]
  professionalLicenses   ProfessionalLicense[]
  workExperiences        WorkExperience[]
  professionalAffiliations ProfessionalAffiliation[]
  awardsRecognitions     AwardRecognition[]
  professionalDevelopments ProfessionalDevelopment[]
  communityInvolvements  CommunityInvolvement[]
  publications           Publication[]
  conferencePresentations ConferencePresentation[]

  // Relation to Notifications
  notifications          Notification[] // A user can have many notifications

  // *** ADDED: Relation to Password Reset Tokens ***
  passwordResetTokens    PasswordResetToken[] // A user can have multiple tokens (though usually only one active)
}

// --- CV Related Models (Keep existing definitions) ---
model AcademicQualification {
  id            String   @id @default(cuid())
  degree        String
  institution   String
  program       String
  yearCompleted Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diplomaFileUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalLicense {
  id            String   @id @default(cuid())
  examination   String
  monthYear     String
  licenseNumber String   @unique
  expiration    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseFileUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model WorkExperience {
  id             String   @id @default(cuid())
  institution    String
  position       String
  natureOfWork   String?
  inclusiveYears String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl       String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalAffiliation {
  id                String   @id @default(cuid())
  organization      String
  position          String?
  inclusiveYears    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipProofUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model AwardRecognition {
  id             String   @id @default(cuid())
  awardName      String
  awardingBody   String
  yearReceived   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalDevelopment {
  id                String   @id @default(cuid())
  title             String
  organizer         String
  dateLocation      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateFileUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model CommunityInvolvement {
  id              String   @id @default(cuid())
  engagementTitle String
  role            String
  locationDate    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model Publication {
  id            String   @id @default(cuid())
  researchTitle String
  journal       String
  datePublished DateTime
  doiLink       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ConferencePresentation {
  id            String   @id @default(cuid())
  paperTitle    String
  eventName     String
  dateLocation  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl      String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

// --- *** NEW: Password Reset Token Model *** ---
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique // The hashed token value
  expires   DateTime // Expiration timestamp

  // Relation to the User
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted

  createdAt DateTime @default(now())

  // Optional: Index for faster token lookup
  @@index([token])
  // Optional: Index for finding user's tokens
  @@index([userId])
}
// --- *** END: Password Reset Token Model *** ---
--- END FILE: prisma\schema.prisma ---

--- START FILE: prisma\seed.cjs ---
// prisma/seed.js
// Creates 'Prof. Ken Neutron' - focusing on Physics, Instrumentation, Safety

// Use the direct path that worked before
const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function main() {
  console.log("Starting seed script for Prof. Ken Neutron...");

  // Clear existing data first
  console.log("Clearing existing data...");
  await clearExistingData();
  console.log("Existing data cleared.");

  // Create the new faculty user
  console.log("Creating faculty user Prof. Ken Neutron...");
  const facultyUser = await createFacultyUser();
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);

  // Add CV details
  console.log("Adding academic qualifications...");
  await addAcademicQualifications(facultyUser.id);
  console.log("Adding professional licenses...");
  await addProfessionalLicenses(facultyUser.id);
  console.log("Adding work experiences...");
  await addWorkExperiences(facultyUser.id);
  console.log("Adding professional affiliations...");
  await addProfessionalAffiliations(facultyUser.id);
  console.log("Adding awards/recognitions...");
  await addAwardsRecognitions(facultyUser.id);
  console.log("Adding professional developments...");
  await addProfessionalDevelopments(facultyUser.id);
  console.log("Adding community involvements...");
  await addCommunityInvolvements(facultyUser.id);
  console.log("Adding publications...");
  await addPublications(facultyUser.id);
  console.log("Adding conference presentations...");
  await addConferencePresentations(facultyUser.id);

  console.log(`Seeding finished for Prof. Ken Neutron.`);
}

async function clearExistingData() {
  // Delete all existing records in reverse order of dependencies
  await prisma.conferencePresentation.deleteMany({});
  await prisma.publication.deleteMany({});
  await prisma.communityInvolvement.deleteMany({});
  await prisma.professionalDevelopment.deleteMany({});
  await prisma.awardRecognition.deleteMany({});
  await prisma.professionalAffiliation.deleteMany({});
  await prisma.workExperience.deleteMany({});
  await prisma.professionalLicense.deleteMany({});
  await prisma.academicQualification.deleteMany({});
  await prisma.user.deleteMany({});
}

async function createFacultyUser() {
  const hashedPassword = await bcrypt.hash('neutronPass456', 10); // Different password

  return prisma.user.create({
    data: {
      name: 'Prof. Ken Neutron', // Different name
      email: 'ken.neutron@spcdavao.edu.ph', // Different email
      password: hashedPassword,
      role: 'FACULTY', // Use string literal
    }
  });
}

async function addAcademicQualifications(userId) {
  await prisma.academicQualification.createMany({
    data: [
      {
        userId,
        degree: 'MS Physics',
        institution: 'National Institute of Physics',
        program: 'Applied Physics',
        yearCompleted: 2014,
        diplomaFileUrl: null,
        status: 'APPROVED' // Use string literal
      },
      {
        userId,
        degree: 'BS Medical Technology',
        institution: 'San Pedro College',
        program: 'Medical Technology',
        yearCompleted: 2010,
        diplomaFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalLicenses(userId) {
  await prisma.professionalLicense.createMany({
    data: [
      {
        userId,
        examination: 'Medical Technologist Licensure',
        monthYear: 'March 2011',
        licenseNumber: '0246810',
        expiration: new Date('2025-03-15'),
        licenseFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        examination: 'Radiation Safety Officer Training', // Different type of cert/license
        monthYear: 'July 2018',
        licenseNumber: 'RSO-KN-001',
        expiration: new Date('2026-07-31'), // Example expiry
        licenseFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addWorkExperiences(userId) {
  await prisma.workExperience.createMany({
    data: [
      {
        userId,
        institution: 'San Pedro College',
        position: 'Instructor / Lab Safety Officer',
        natureOfWork: 'Teaching Physics for Health Sciences, Managing Lab Safety Protocols',
        inclusiveYears: '2015-Present',
        proofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        institution: 'BioInstrumentation Inc.',
        position: 'Field Service Engineer',
        natureOfWork: 'Calibration and Maintenance of Laboratory Equipment',
        inclusiveYears: '2011-2015',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalAffiliations(userId) {
  await prisma.professionalAffiliation.createMany({
    data: [
      {
        userId,
        organization: 'Philippine Association of Medical Technologists (PAMET)',
        position: 'Member',
        inclusiveYears: '2011-Present',
        membershipProofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        organization: 'Samahang Pisika ng Pilipinas (SPP)', // Physics Association
        position: 'Associate Member',
        inclusiveYears: '2016-Present',
        membershipProofUrl: null,
        status: 'PENDING' // Example pending
      }
    ]
  });
}

async function addAwardsRecognitions(userId) {
  // Maybe fewer awards for this profile
  await prisma.awardRecognition.createMany({
    data: [
      {
        userId,
        awardName: 'Laboratory Safety Excellence Award',
        awardingBody: 'SPC Safety Committee',
        yearReceived: 2021,
        certificateUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalDevelopments(userId) {
  await prisma.professionalDevelopment.createMany({
    data: [
      {
        userId,
        title: 'Training on Calibration of Spectrophotometers',
        organizer: 'Precision Instruments Ltd.',
        dateLocation: 'August 2022, Online',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Seminar on Occupational Safety and Health in Laboratories',
        organizer: 'DOLE / OSHC',
        dateLocation: 'April 2023, Davao City',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Modern Physics Applications in Medicine',
        organizer: 'SPP Annual Convention',
        dateLocation: 'October 2023, Cebu City',
        certificateFileUrl: null,
        status: 'REJECTED', // Example rejected
        rejectionReason: 'Certificate unclear.'
      }
    ]
  });
}

async function addCommunityInvolvements(userId) {
  // Maybe less community involvement for this profile
  await prisma.communityInvolvement.createMany({
    data: [
      {
        userId,
        engagementTitle: 'Career Talk: Medical Technology',
        role: 'Speaker',
        locationDate: 'Davao City National High School, Feb 2023',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addPublications(userId) {
  // Maybe no publications for this profile yet
  // You can leave this function call out or pass an empty array if desired
  // await prisma.publication.createMany({ data: [] });
  console.log("Skipping publications for this user.");
}

async function addConferencePresentations(userId) {
  await prisma.conferencePresentation.createMany({
    data: [
      {
        userId,
        paperTitle: 'Implementing Enhanced Safety Protocols in a University MedTech Laboratory', // Poster presentation maybe
        eventName: 'PAMET Davao Chapter Annual Meeting - Poster Session',
        dateLocation: 'November 2022, Davao City',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Seeding script failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\seed.cjs ---

--- START FILE: src\app\(auth)\forgot-password\page.tsx ---
// This is the CORRECT code for: src/app/(auth)/forgot-password/page.tsx

'use client';

import React, { useState, FormEvent, useTransition } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { EnvelopeIcon, ArrowLeftIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
// Import the server action
import { requestPasswordReset } from '@/lib/actions/authActions';

export default function ForgotPasswordPage() {
    const [email, setEmail] = useState('');
    const [isPending, startTransition] = useTransition();
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);
        setSuccessMessage(null);

        const formData = new FormData(event.currentTarget);

        startTransition(async () => {
            const response = await requestPasswordReset(formData);

            if (response.success) {
                setSuccessMessage(response.message);
                setEmail(''); // Clear email field on success
            } else {
                setError(response.message || "An unexpected error occurred.");
            }
        });
    };

    return (
        // Use a similar background and layout as the login page
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">

            <div className="w-full max-w-md">
                 {/* Gradient border effect */}
                 <div className="rounded-3xl bg-gradient-to-r from-sky-400 to-blue-500 p-1 shadow-2xl">
                     {/* Inner white card */}
                    <div className="rounded-[22px] bg-white p-8 sm:p-10">

                        {/* *** THIS IS THE CORRECT HEADING FOR FORGOT-PASSWORD *** */}
                        <h1 className="pb-2 text-center text-3xl font-bold text-gray-800">
                            Forgot Password?
                        </h1>
                        <p className="pb-6 text-center text-sm text-gray-500">
                            Enter your email to receive reset instructions.
                        </p>
                        {/* *** END CORRECT HEADING *** */}

                        <form onSubmit={handleSubmit} className="space-y-5">
                            {/* Success Message */}
                            {successMessage && (
                                <div className="rounded border border-green-300 bg-green-50 p-3 text-center text-sm font-medium text-green-700 flex items-center gap-2" role="alert">
                                    <CheckCircleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {successMessage}
                                </div>
                            )}
                            {/* Error Message */}
                            {error && (
                                <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700 flex items-center gap-2" role="alert">
                                     <ExclamationTriangleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {error}
                                </div>
                            )}

                            {/* Email Input */}
                            <div>
                                <label htmlFor="email" className="mb-1.5 block text-sm font-medium text-gray-600">Email Address</label>
                                <div className="relative">
                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                        <EnvelopeIcon className="h-5 w-5 text-gray-400" />
                                    </span>
                                    <input
                                        id="email" name="email" type="email" placeholder="you@example.com" required
                                        disabled={isPending || !!successMessage}
                                        value={email} onChange={(e) => setEmail(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 px-3 py-2.5 pl-10 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50"
                                    />
                                </div>
                            </div>

                            {/* Submit Button */}
                            <button
                                type="submit"
                                disabled={isPending || !!successMessage}
                                className="mt-6 w-full rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md transition duration-300 ease-in-out hover:from-sky-600 hover:to-blue-700 disabled:opacity-60 disabled:cursor-not-allowed">
                                {isPending ? 'SENDING...' : 'Send Reset Instructions'}
                            </button>
                        </form>

                        {/* Back to Login Link */}
                       <div className="mt-6 text-center text-sm">
                            <Link href="/login" className="inline-flex items-center gap-1 font-medium text-sky-600 hover:text-sky-700 hover:underline">
                                <ArrowLeftIcon className="h-4 w-4"/>
                                Back to Login
                            </Link>
                       </div>

                    </div> {/* End Inner Card */}
                </div> {/* End Gradient Border */}
            </div> {/* End Form Container */}

        </div> // End Main Container
    );
}
--- END FILE: src\app\(auth)\forgot-password\page.tsx ---

--- START FILE: src\app\(auth)\login\page.tsx ---
// Action: Modify src/app/(auth)/login/page.tsx

'use client';
import React, { useState, FormEvent } from 'react';
import { signIn, getSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import Link from 'next/link'; // Ensure Link is imported
import Image from 'next/image';

export default function LoginPage() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const router = useRouter();

    // Handler for credential-based form submission (remains the same)
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);
        setIsLoading(true);
        try {
            const result = await signIn('credentials', {
                redirect: false,
                email,
                password,
            });

            if (result?.error) {
                setIsLoading(false);
                setError("Invalid email or password. Please try again.");
                console.error("SignIn Error:", result.error);
            } else if (result?.ok) {
                const session = await getSession();
                const userRole = (session?.user as any)?.role;
                console.log("Login successful, Role:", userRole);
                // Redirect based on role
                router.push(userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard');
                // Use router.replace if you don't want the login page in history
                // router.replace(userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard');
            } else {
                setIsLoading(false);
                setError("Login failed due to an unknown error. Please try again.");
                console.error("SignIn Unknown State:", result);
            }
        } catch (err) {
            setIsLoading(false);
            setError("An unexpected error occurred. Please check your connection and try again.");
            console.error("Login Catch Error:", err);
        }
    };

    // Placeholder handler for Google Sign-In button (remains the same)
    const handleGoogleSignIn = () => {
       alert("Google Sign-In is not configured yet.");
    }

    return (
        // Main container: Apply gradient background
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">

            {/* Wrapper for the three-column layout on larger screens */}
            <div className="flex w-full max-w-6xl items-center justify-center lg:justify-between">

                 {/* Left Column (SPC Logo): Hidden on screens smaller than 'lg' */}
                 <div className="hidden lg:flex lg:w-1/4 items-center justify-center p-4">
                     <Image
                        src="/spc-logo.png"
                        alt="San Pedro College Logo"
                        width={250}
                        height={300}
                        className="object-contain"
                    />
                 </div>

                 {/* Center Column (Login Form Card) */}
                 <div className="w-full max-w-md lg:w-1/2 lg:max-w-md lg:px-8 flex justify-center">
                     {/* Container for the card */}
                     <div className="w-full">
                         {/* Gradient border effect - Using softer blues */}
                         <div className="rounded-3xl bg-gradient-to-r from-sky-400 to-blue-500 p-1 shadow-2xl"> {/* Changed gradient, increased shadow */}
                             {/* Inner white card - Kept white for contrast */}
                            <div className="rounded-[22px] bg-white p-8 sm:p-10">

                                <h1 className="cursor-default pb-6 text-center text-4xl font-bold text-gray-800"> {/* Slightly lighter text */}
                                    Log in
                                </h1>

                                <form onSubmit={handleSubmit} className="space-y-5">
                                    {error && (
                                        <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700" role="alert">
                                            {error}
                                        </div>
                                    )}
                                    {/* Email Input */}
                                    <div>
                                        <label htmlFor="email" className="mb-1.5 block text-sm font-medium text-gray-600">Email</label> {/* Lighter label */}
                                        <input
                                            id="email" name="email" type="email" placeholder="Email" required disabled={isLoading}
                                            value={email} onChange={(e) => setEmail(e.target.value)}
                                            className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50" // Adjusted text color
                                        />
                                    </div>
                                    {/* Password Input */}
                                    <div>
                                        <label htmlFor="password" className="mb-1.5 block text-sm font-medium text-gray-600">Password</label> {/* Lighter label */}
                                        <input
                                            id="password" name="password" type="password" placeholder="Password" required disabled={isLoading}
                                            value={password} onChange={(e) => setPassword(e.target.value)}
                                            className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50" // Adjusted text color
                                        />
                                    </div>
                                    {/* Forget Password Link - *** UPDATED href *** */}
                                    <div className="text-right">
                                        <Link href="/forgot-password" className="text-sm text-sky-600 hover:text-sky-700 hover:underline"> Forget your password? </Link>
                                    </div>
                                    {/* Submit Button - Matching softer gradient */}
                                    <button
                                        type="submit" disabled={isLoading}
                                        className="mt-6 w-full rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md transition duration-300 ease-in-out hover:from-sky-600 hover:to-blue-700 disabled:opacity-60 disabled:cursor-not-allowed"> {/* Changed gradient and hover */}
                                        {isLoading ? 'LOGGING IN...' : 'LOG IN'}
                                    </button>
                                </form>
                                {/* Sign Up - Adjusted color */}
                               <div className="mt-5 text-center text-sm">
                                    <span className="text-gray-500">Don't have an account?{' '}</span> {/* Lighter text */}
                                    <Link href="#" className="font-semibold text-sky-600 hover:text-sky-700 hover:underline"> Sign Up </Link>
                               </div>
                                {/* Separator - Adjusted color */}
                               <div className="my-6 flex items-center">
                                    <hr className="flex-grow border-t border-gray-300" /> {/* Slightly darker line */}
                                    <span className="px-2 text-xs font-medium text-gray-500 uppercase">OR CONTINUE WITH</span> {/* Darker text */}
                                    <hr className="flex-grow border-t border-gray-300" />
                               </div>
                                {/* Google Button - Kept neutral */}
                               <div className="flex justify-center">
                                    <button
                                        onClick={handleGoogleSignIn} disabled={isLoading} title="Sign in with Google"
                                        className="m-1 inline-flex items-center justify-center rounded-lg border border-gray-300 bg-white p-2 shadow-sm transition duration-300 ease-in-out hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-400 disabled:opacity-60">
                                        <Image src="https://ucarecdn.com/8f25a2ba-bdcf-4ff1-b596-088f330416ef/" alt="Google" width={22} height={22} />
                                    </button>
                               </div>
                                {/* Terms - Adjusted color and link color */}
                                <div className="mt-6 text-center text-xs text-gray-500"> {/* Lighter text */}
                                    <p> By signing in, you agree to our{' '} <Link className="font-medium text-sky-600 hover:underline" href="#">Terms</Link> {' '}and{' '} <Link className="font-medium text-sky-600 hover:underline" href="#">Privacy Policy</Link>. </p>
                                </div>
                            </div> {/* End Inner Card */}
                        </div> {/* End Gradient Border */}
                    </div> {/* End Form Container */}
                 </div> {/* End Center Column */}

                 {/* Right Column (SMLS Logo): Hidden on screens smaller than 'lg' */}
                 <div className="hidden lg:flex lg:w-1/4 items-center justify-center p-4 relative">
                     {/* ... optional background ... */}
                     <div className="relative z-10">
                        <Image
                            src="/smls-logo.png"
                            alt="School of Medical Laboratory Science Logo"
                            width={200}
                            height={200}
                            className="object-contain"
                        />
                     </div>
                 </div>

             </div> {/* End Three-column Wrapper */}

        </div> // End Main Container
    );
}
--- END FILE: src\app\(auth)\login\page.tsx ---

--- START FILE: src\app\(auth)\reset-password\page.tsx ---
// src/app/(auth)/reset-password/page.tsx

'use client';

import React, { useState, FormEvent, useEffect, Suspense, useTransition } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSearchParams, useRouter } from 'next/navigation';
// Import necessary icons
import { KeyIcon, LockClosedIcon, ArrowLeftIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
// Import the server action
import { performPasswordReset } from '@/lib/actions/authActions';

// Wrap the main component logic in a separate component to use Suspense
function ResetPasswordForm() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const token = searchParams.get('token');

    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [isPending, startTransition] = useTransition(); // Use useTransition
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    useEffect(() => {
        if (!token) {
            setError("Invalid or missing password reset token. Please request a new link.");
            // Optionally redirect after a delay if token is missing
            // setTimeout(() => router.push('/forgot-password'), 3000);
        }
    }, [token, router]);

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);
        setSuccessMessage(null);

        // Basic client-side validation
        if (!token) {
            setError("Invalid or missing password reset token.");
            return;
        }
        if (password.length < 8) {
            setError("Password must be at least 8 characters long.");
            return;
        }
        if (password !== confirmPassword) {
            setError("Passwords do not match.");
            return;
        }

        const formData = new FormData(event.currentTarget);
        // Ensure the token from URL is included if not already in a hidden field
        if (!formData.has('token') && token) {
            formData.set('token', token);
        }

        startTransition(async () => {
            const response = await performPasswordReset(formData);

            if (response.success) {
                setSuccessMessage(response.message);
                setPassword(''); // Clear fields on success
                setConfirmPassword('');
                // Redirect to login after a short delay
                setTimeout(() => router.push('/login'), 3000);
            } else {
                setError(response.message || "An unexpected error occurred.");
            }
        });
    };

    return (
        // Use a similar background and layout
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">
            <div className="w-full max-w-md">
                {/* Gradient border effect */}
                <div className="rounded-3xl bg-gradient-to-r from-sky-400 to-blue-500 p-1 shadow-2xl">
                    {/* Inner white card */}
                    <div className="rounded-[22px] bg-white p-8 sm:p-10">
                        <h1 className="pb-2 text-center text-3xl font-bold text-gray-800">
                            Reset Password
                        </h1>
                        <p className="pb-6 text-center text-sm text-gray-500">
                            Enter your new password below.
                        </p>

                        <form onSubmit={handleSubmit} className="space-y-5">
                            {/* Success Message */}
                            {successMessage && (
                                <div className="rounded border border-green-300 bg-green-50 p-3 text-center text-sm font-medium text-green-700 flex items-center gap-2" role="alert">
                                    <CheckCircleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {successMessage}
                                    <Link href="/login" className="font-bold underline ml-auto">Login Now</Link>
                                </div>
                            )}
                            {/* Error Message */}
                            {error && (
                                <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700 flex items-center gap-2" role="alert">
                                     <ExclamationTriangleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {error}
                                </div>
                            )}

                            {/* Hidden Token Field (Good practice) */}
                            <input type="hidden" name="token" value={token || ''} />

                            {/* New Password Input */}
                            <div>
                                <label htmlFor="password" className="mb-1.5 block text-sm font-medium text-gray-600">New Password</label>
                                <div className="relative">
                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                        <LockClosedIcon className="h-5 w-5 text-gray-400" />
                                    </span>
                                    <input
                                        id="password" name="password" type="password" placeholder="Enter new password (min. 8 chars)" required
                                        disabled={isPending || !!successMessage || !token} // Disable if loading, success, or no token
                                        value={password} onChange={(e) => setPassword(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 px-3 py-2.5 pl-10 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50"
                                        minLength={8}
                                    />
                                </div>
                            </div>

                            {/* Confirm Password Input */}
                            <div>
                                <label htmlFor="confirmPassword" className="mb-1.5 block text-sm font-medium text-gray-600">Confirm New Password</label>
                                <div className="relative">
                                     <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                        <LockClosedIcon className="h-5 w-5 text-gray-400" />
                                    </span>
                                    <input
                                        id="confirmPassword" name="confirmPassword" type="password" placeholder="Confirm new password" required
                                        disabled={isPending || !!successMessage || !token} // Disable if loading, success, or no token
                                        value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 px-3 py-2.5 pl-10 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50"
                                        minLength={8}
                                    />
                                </div>
                            </div>

                            {/* Submit Button */}
                            <button
                                type="submit"
                                disabled={isPending || !!successMessage || !token} // Disable if loading, success, or no token
                                className="mt-6 w-full rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md transition duration-300 ease-in-out hover:from-sky-600 hover:to-blue-700 disabled:opacity-60 disabled:cursor-not-allowed">
                                {isPending ? 'RESETTING...' : 'Reset Password'}
                            </button>
                        </form>

                        {/* Back to Login Link (Conditional) */}
                        {!successMessage && (
                            <div className="mt-6 text-center text-sm">
                                <Link href="/login" className="inline-flex items-center gap-1 font-medium text-sky-600 hover:text-sky-700 hover:underline">
                                    <ArrowLeftIcon className="h-4 w-4"/>
                                    Back to Login
                                </Link>
                            </div>
                        )}

                    </div> {/* End Inner Card */}
                </div> {/* End Gradient Border */}
            </div> {/* End Form Container */}
        </div> // End Main Container
    );
}

// Export the page component wrapped in Suspense
export default function ResetPasswordPage() {
    // You might want a more informative fallback for a better user experience
    const fallbackContent = (
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">
             <div className="text-gray-600">Loading reset page...</div>
        </div>
    );

    return (
        <Suspense fallback={fallbackContent}>
            <ResetPasswordForm />
        </Suspense>
    );
}
--- END FILE: src\app\(auth)\reset-password\page.tsx ---

--- START FILE: src\app\(auth)\layout.tsx ---
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

--- END FILE: src\app\(auth)\layout.tsx ---

--- START FILE: src\app\(protected)\(faculty)\dashboard\page.tsx ---
// src/app/(protected)/(faculty)/dashboard/page.tsx
'use client';

import Link from 'next/link';
import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { getMyProfileData } from '@/lib/userActions'; // Assuming this fetches all needed data
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, ApprovalStatus
} from '@/generated/prisma';

import {
    UserCircleIcon,
    DocumentTextIcon,
    CalendarDaysIcon, // Keep for future events
    ArrowRightIcon,
    ClockIcon, // For pending items
    ExclamationTriangleIcon, // For alerts
    BellIcon, // For announcements
    CheckCircleIcon // For approved items
} from '@heroicons/react/24/outline';
import { XCircleIcon } from '@heroicons/react/24/outline';
// Define a type for items with status
type ItemWithStatus = {
    id: string;
    status: ApprovalStatus;
    // Add fields needed for display title (adjust as needed)
    degree?: string;
    examination?: string;
    position?: string;
    awardName?: string;
    title?: string;
    engagementTitle?: string;
    researchTitle?: string;
    paperTitle?: string;
};

// Helper to get a display name for different item types
function getItemDisplayName(item: ItemWithStatus): string {
     return item.degree ?? item.examination ?? item.title ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? `Item ID: ${item.id}`;
}


export default function FacultyDashboardPage() {
    const { data: session, status } = useSession();
    // State to hold dashboard-specific data (pending items, counts)
    const [dashboardData, setDashboardData] = useState<{
        pendingItems: ItemWithStatus[];
        approvedCount: number;
        pendingCount: number;
        rejectedCount: number;
    } | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (status === 'authenticated') {
            setIsLoading(true);
            setError(null);
            getMyProfileData()
                .then(data => {
                    if (data.error || !data.user) {
                        setError(data.error || 'Failed to load profile data.');
                        setDashboardData(null);
                    } else {
                        // Process data to get counts and pending items
                        let pending: ItemWithStatus[] = [];
                        let approved = 0;
                        let rejected = 0;
                        const allItems = [
                            ...(data.academicQualifications ?? []),
                            ...(data.professionalLicenses ?? []),
                            ...(data.workExperiences ?? []),
                            ...(data.professionalAffiliations ?? []),
                            ...(data.awardsRecognitions ?? []),
                            ...(data.professionalDevelopments ?? []),
                            ...(data.communityInvolvements ?? []),
                            ...(data.publications ?? []),
                            ...(data.conferencePresentations ?? []),
                        ];

                        allItems.forEach(item => {
                            if (item.status === 'PENDING') {
                                pending.push(item as ItemWithStatus);
                            } else if (item.status === 'APPROVED') {
                                approved++;
                            } else if (item.status === 'REJECTED') {
                                rejected++;
                            }
                        });

                        setDashboardData({
                            pendingItems: pending,
                            approvedCount: approved,
                            pendingCount: pending.length,
                            rejectedCount: rejected,
                        });
                    }
                })
                .catch(err => {
                    console.error("Dashboard fetch error:", err);
                    setError("An error occurred while loading dashboard data.");
                    setDashboardData(null);
                })
                .finally(() => {
                    setIsLoading(false);
                });
        } else if (status === 'unauthenticated') {
            setIsLoading(false);
            // Middleware should handle redirect, but good to have a fallback state
             setError("Access Denied. Please log in.");
        }
    }, [status]); // Re-run effect when session status changes

    // --- Loading State ---
    if (isLoading || status === 'loading') {
        return (
            <div className="flex min-h-[calc(100vh-4rem)] items-center justify-center p-6 bg-gray-50">
                <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading dashboard...</span>
                </div>
            </div>
        );
    }

    // --- Error or Unauthenticated State ---
    if (error || status === 'unauthenticated') {
         return (
             <div className="flex min-h-[calc(100vh-4rem)] flex-col items-center justify-center p-6 text-center bg-red-50">
                <ExclamationTriangleIcon className="h-12 w-12 text-red-400 mb-4" />
                 <p className="mb-4 text-xl font-semibold text-red-700">Access Denied or Error</p>
                 <p className="mb-6 text-red-600">{error || "You must be signed in to view this page."}</p>
                 <Link href="/login">
                     <button className="inline-flex items-center gap-2 rounded-md bg-red-600 px-5 py-2.5 text-sm font-medium text-white shadow-sm transition hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                         Go to Login
                         <ArrowRightIcon className="h-4 w-4" />
                     </button>
                 </Link>
             </div>
        );
    }

    // --- Authenticated State ---
    const userRole = (session?.user as any)?.role;
    const greetingName = session?.user?.name ? session.user.name.split(' ')[0] : (session?.user?.email ?? 'Faculty Member');

    return (
        // Main container with background and padding
        <div className="min-h-[calc(100vh-4rem)] bg-gradient-to-br from-sky-50 via-white to-blue-50 p-4 sm:p-6 lg:p-8">
            <div className="mx-auto max-w-7xl">
                {/* Header Section */}
                <div className="mb-8">
                    <h1 className="text-2xl font-semibold leading-tight text-gray-800 sm:text-3xl">
                        Welcome back, {greetingName}!
                    </h1>
                    <p className="mt-1 text-sm text-gray-500">
                        Your central hub for managing skills and documents.
                    </p>
                </div>

                {/* Main Content Grid - Adjusted layout */}
                <div className="grid grid-cols-1 gap-6 lg:grid-cols-3 lg:gap-8">

                    {/* Left Column (Wider) - Pending Items & Quick Links */}
                    <div className="lg:col-span-2 space-y-6">

                        {/* Pending Approvals Card */}
                        {dashboardData && dashboardData.pendingCount > 0 && (
                            <div className="rounded-lg border border-yellow-200 bg-yellow-50 shadow-sm overflow-hidden">
                                <div className="flex items-center gap-3 border-b border-yellow-200 bg-yellow-100 px-4 py-3">
                                    <ClockIcon className="h-6 w-6 text-yellow-700" />
                                    <h2 className="text-lg font-semibold text-yellow-800">
                                        Items Pending Approval ({dashboardData.pendingCount})
                                    </h2>
                                </div>
                                <div className="p-4">
                                    {dashboardData.pendingItems.length > 0 ? (
                                        <ul className="space-y-3">
                                            {dashboardData.pendingItems.slice(0, 5).map(item => ( // Show first 5
                                                <li key={item.id} className="text-sm text-yellow-900 flex justify-between items-center">
                                                    <span>{getItemDisplayName(item)}</span>
                                                    <Link href="/profile" className="text-xs text-blue-600 hover:underline">
                                                        View in Profile
                                                    </Link>
                                                </li>
                                            ))}
                                            {dashboardData.pendingItems.length > 5 && (
                                                <li className="text-center text-xs text-gray-500 pt-2">
                                                    <Link href="/profile" className="hover:underline">
                                                        + {dashboardData.pendingItems.length - 5} more pending...
                                                    </Link>
                                                </li>
                                            )}
                                        </ul>
                                    ) : (
                                        <p className="text-sm text-yellow-700 italic">No items currently pending.</p> // Should not happen if count > 0, but safe fallback
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Quick Links Card */}
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                             {/* Profile Card */}
                             <Link href="/profile" className="group flex flex-col justify-between rounded-lg border border-gray-200 bg-white p-5 shadow-sm transition duration-300 ease-in-out hover:shadow-md hover:border-blue-300">
                                <div>
                                    <div className="mb-2 flex items-center gap-3">
                                        <UserCircleIcon className="h-7 w-7 text-blue-600" />
                                        <h2 className="text-lg font-semibold text-gray-800">
                                            My Profile
                                        </h2>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        View and manage your CV, qualifications, and details.
                                    </p>
                                </div>
                                <div className="mt-4 flex items-center justify-end text-sm font-medium text-blue-600 group-hover:underline">
                                    Go to Profile
                                    <ArrowRightIcon className="ml-1 h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
                                </div>
                            </Link>

                            {/* Documents Card */}
                            <Link href="/documents" className="group flex flex-col justify-between rounded-lg border border-gray-200 bg-white p-5 shadow-sm transition duration-300 ease-in-out hover:shadow-md hover:border-green-300">
                                <div>
                                    <div className="mb-2 flex items-center gap-3">
                                        <DocumentTextIcon className="h-7 w-7 text-green-600" />
                                        <h2 className="text-lg font-semibold text-gray-800">
                                            My Documents
                                        </h2>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        Upload and manage your supporting credentials.
                                    </p>
                                </div>
                                <div className="mt-4 flex items-center justify-end text-sm font-medium text-green-600 group-hover:underline">
                                    Manage Documents
                                    <ArrowRightIcon className="ml-1 h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
                                </div>
                            </Link>
                        </div>
                    </div>

                    {/* Right Column (Sidebar) - Stats & Announcements */}
                    <div className="space-y-6">
                        {/* Profile Summary/Stats Card */}
                         <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm">
                             <h2 className="text-base font-semibold text-gray-700 mb-3">Profile Summary</h2>
                             {dashboardData ? (
                                <div className="space-y-2 text-sm">
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-1.5"><CheckCircleIcon className="h-4 w-4 text-green-500"/> Approved Items:</span>
                                        <span className="font-medium text-gray-800">{dashboardData.approvedCount}</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-1.5"><ClockIcon className="h-4 w-4 text-yellow-500"/> Pending Items:</span>
                                        <span className="font-medium text-yellow-700">{dashboardData.pendingCount}</span>
                                    </div>
                                     <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-1.5"><XCircleIcon className="h-4 w-4 text-red-500"/> Rejected Items:</span>
                                        <span className="font-medium text-red-600">{dashboardData.rejectedCount}</span>
                                    </div>
                                    {/* Add more stats here - e.g., Last Updated */}
                                </div>
                             ) : (
                                 <p className="text-sm text-gray-500 italic">Summary unavailable.</p>
                             )}
                         </div>

                        {/* Announcements Card (Placeholder) */}
                        <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm">
                            <div className="flex items-center gap-2 mb-3">
                                <BellIcon className="h-5 w-5 text-indigo-600" />
                                <h2 className="text-base font-semibold text-gray-700">Announcements</h2>
                            </div>
                            <div className="mt-2 rounded-md border border-dashed border-gray-300 bg-gray-50 p-4 text-center text-sm italic text-gray-500">
                                No recent announcements.
                            </div>
                            {/* Later: Map over actual announcements */}
                        </div>

                         {/* Upcoming Events Card (Placeholder) */}
                        <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm">
                            <div className="flex items-center gap-2 mb-3">
                                <CalendarDaysIcon className="h-5 w-5 text-purple-600" />
                                <h2 className="text-base font-semibold text-gray-700">Upcoming Events</h2>
                            </div>
                            <div className="mt-2 rounded-md border border-dashed border-gray-300 bg-gray-50 p-4 text-center text-sm italic text-gray-500">
                                No upcoming events scheduled.
                            </div>
                        </div>
                    </div>

                </div> {/* End Main Grid */}
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\dashboard\page.tsx ---

--- START FILE: src\app\(protected)\(faculty)\documents\page.tsx ---
// src/app/(protected)/(faculty)/documents/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link'; // Keep Link if needed for other navigation
import { getMyProfileData } from '@/lib/userActions'; // Action to fetch all profile data
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation
} from '@/generated/prisma'; // Import specific types
import {
    DocumentTextIcon, PaperClipIcon, ExclamationTriangleIcon,
    AcademicCapIcon, BriefcaseIcon, IdentificationIcon, StarIcon, SparklesIcon, UsersIcon,
    PresentationChartBarIcon, BookOpenIcon // Add relevant icons
} from '@heroicons/react/24/outline';

// Define a type for the processed document list item
interface DocumentListItem {
    id: string; // ID of the parent CV item
    itemType: string; // User-friendly type name (e.g., "Academic Qualification")
    itemName: string; // Name of the parent CV item (e.g., degree, title)
    fileUrl: string; // URL of the document
    fileName: string; // Extracted file name
    icon: React.ElementType; // Icon associated with the item type
}

// Helper to get a display name for different item types (similar to dashboard)
function getItemName(item: any): string {
    return item.degree ?? item.examination ?? item.title ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? item.organization ?? `Item ID: ${item.id}`;
}

// Helper to get the file URL and type info based on the CV item type
function getFileInfo(item: any, itemTypeName: string): { url: string | null | undefined, type: string, icon: React.ElementType } {
    switch (itemTypeName) {
        case 'Academic Qualification': return { url: item.diplomaFileUrl, type: itemTypeName, icon: AcademicCapIcon };
        case 'Professional License': return { url: item.licenseFileUrl, type: itemTypeName, icon: IdentificationIcon };
        case 'Work Experience': return { url: item.proofUrl, type: itemTypeName, icon: BriefcaseIcon };
        case 'Professional Affiliation': return { url: item.membershipProofUrl, type: itemTypeName, icon: UsersIcon };
        case 'Award/Recognition': return { url: item.certificateUrl, type: itemTypeName, icon: StarIcon };
        case 'Professional Development': return { url: item.certificateFileUrl, type: itemTypeName, icon: SparklesIcon };
        case 'Community Involvement': return { url: item.proofUrl, type: itemTypeName, icon: UsersIcon }; // Reusing UsersIcon
        case 'Publication': return { url: item.pdfUrl, type: itemTypeName, icon: BookOpenIcon };
        case 'Conference Presentation': return { url: item.proofUrl, type: itemTypeName, icon: PresentationChartBarIcon };
        default: return { url: null, type: 'Unknown', icon: DocumentTextIcon };
    }
}

// Helper to extract filename from URL
function getFileNameFromUrl(url: string | null | undefined): string {
    if (!url) return 'N/A';
    try {
        // Basic split, might need refinement for complex URLs
        const parts = url.split('/');
        const encodedName = parts[parts.length - 1];
        // Decode URI component to handle spaces etc. (%20)
        return decodeURIComponent(encodedName);
    } catch (e) {
        console.error("Error extracting filename:", e);
        return 'invalid_url';
    }
}


export default function DocumentsPage() {
    const { status: sessionStatus } = useSession();
    const [documentsList, setDocumentsList] = useState<DocumentListItem[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (sessionStatus === 'authenticated') {
            setIsLoading(true);
            setError(null);
            getMyProfileData()
                .then(data => {
                    if (data.error || !data.user) {
                        setError(data.error || 'Failed to load profile data for documents.');
                        setDocumentsList([]);
                    } else {
                        // Process data to extract documents
                        const processedDocs: DocumentListItem[] = [];
                        const sections = [
                            { data: data.academicQualifications, name: 'Academic Qualification' },
                            { data: data.professionalLicenses, name: 'Professional License' },
                            { data: data.workExperiences, name: 'Work Experience' },
                            { data: data.professionalAffiliations, name: 'Professional Affiliation' },
                            { data: data.awardsRecognitions, name: 'Award/Recognition' },
                            { data: data.professionalDevelopments, name: 'Professional Development' },
                            { data: data.communityInvolvements, name: 'Community Involvement' },
                            { data: data.publications, name: 'Publication' },
                            { data: data.conferencePresentations, name: 'Conference Presentation' },
                        ];

                        sections.forEach(section => {
                            (section.data ?? []).forEach((item: any) => {
                                const fileInfo = getFileInfo(item, section.name);
                                if (fileInfo.url) {
                                    processedDocs.push({
                                        id: item.id,
                                        itemType: fileInfo.type,
                                        itemName: getItemName(item),
                                        fileUrl: fileInfo.url,
                                        fileName: getFileNameFromUrl(fileInfo.url),
                                        icon: fileInfo.icon,
                                    });
                                }
                            });
                        });

                        // Optional: Sort documents, e.g., by type then name
                        processedDocs.sort((a, b) => {
                            if (a.itemType !== b.itemType) {
                                return a.itemType.localeCompare(b.itemType);
                            }
                            return a.itemName.localeCompare(b.itemName);
                        });

                        setDocumentsList(processedDocs);
                    }
                })
                .catch(err => {
                    console.error("Documents page fetch error:", err);
                    setError("An error occurred while loading documents.");
                    setDocumentsList([]);
                })
                .finally(() => {
                    setIsLoading(false);
                });
        } else if (sessionStatus === 'unauthenticated') {
            setIsLoading(false);
            setError("Access Denied. Please log in.");
        }
    }, [sessionStatus]); // Re-run effect when session status changes

    // --- Loading State ---
    if (isLoading || sessionStatus === 'loading') {
        return (
            <div className="p-6 flex items-center justify-center min-h-[calc(100vh-8rem)]"> {/* Adjusted height */}
                 <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading documents...</span>
                </div>
            </div>
        );
    }

    // --- Error or Unauthenticated State ---
    if (error || sessionStatus === 'unauthenticated') {
         return (
             <div className="p-6 text-center bg-red-50 min-h-[calc(100vh-8rem)] flex flex-col items-center justify-center">
                <ExclamationTriangleIcon className="h-10 w-10 text-red-400 mb-3" />
                 <p className="mb-4 text-lg font-semibold text-red-700">Access Denied or Error</p>
                 <p className="mb-5 text-red-600">{error || "You must be signed in to view this page."}</p>
                 <Link href="/login">
                     <button className="inline-flex items-center gap-2 rounded-md bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                         Go to Login
                     </button>
                 </Link>
             </div>
        );
    }

    // --- Display Document List ---
    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen">
            <h1 className="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
                <DocumentTextIcon className="h-7 w-7 text-green-600" />
                My Uploaded Documents
            </h1>

            {documentsList.length === 0 ? (
                <div className="bg-white p-6 rounded-lg shadow border border-gray-200 text-center text-gray-500 italic">
                    You have not uploaded any documents via your profile yet. Documents added to your CV sections will appear here.
                </div>
            ) : (
                <div className="bg-white shadow overflow-hidden rounded-lg border border-gray-200">
                    <ul role="list" className="divide-y divide-gray-200">
                        {documentsList.map((doc) => {
                            const IconComponent = doc.icon; // Get the icon component
                            return (
                                <li key={`${doc.id}-${doc.fileName}`} className="px-4 py-4 sm:px-6 hover:bg-gray-50 transition duration-150 ease-in-out">
                                    <div className="flex items-center justify-between gap-4">
                                        {/* Icon, Type and Item Name */}
                                        <div className="flex items-center gap-3 flex-1 min-w-0">
                                            <span className="inline-block rounded-md p-1.5 bg-gray-100 text-gray-600 flex-shrink-0">
                                                <IconComponent className="h-5 w-5" aria-hidden="true" />
                                            </span>
                                            <div className="flex-1 min-w-0">
                                                <p className="text-sm font-medium text-gray-800 truncate" title={doc.itemName}>
                                                    {doc.itemName}
                                                </p>
                                                <p className="text-xs text-gray-500">
                                                    Type: {doc.itemType}
                                                </p>
                                            </div>
                                        </div>
                                        {/* Link to Document */}
                                        <div className="ml-4 flex-shrink-0">
                                            <a
                                                href={doc.fileUrl}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="inline-flex items-center gap-1 rounded-md bg-blue-50 px-2.5 py-1 text-xs font-semibold text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1"
                                                title={`View ${doc.fileName}`}
                                            >
                                                <PaperClipIcon className="h-3.5 w-3.5" aria-hidden="true" />
                                                View File
                                            </a>
                                        </div>
                                    </div>
                                </li>
                            );
                        })}
                    </ul>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\documents\page.tsx ---

--- START FILE: src\app\(protected)\(faculty)\profile\page.tsx ---
// src/app/(protected)/(faculty)/profile/page.tsx
'use client';

import React, { useState, useEffect, useCallback, useTransition } from 'react';
import { useSession } from 'next-auth/react';
import { getMyProfileData, updateMyProfile } from '@/lib/userActions';
import type {
    User, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, ApprovalStatus
} from '@/generated/prisma';
import type {
    EditableItem, TempAcademicQualification, TempProfessionalDevelopment,
    TempProfessionalLicense, TempWorkExperience, TempProfessionalAffiliation,
    TempAwardRecognition, TempCommunityInvolvement, TempPublication, TempConferencePresentation
} from '@/types';
import {
    PlusIcon, PencilSquareIcon, XCircleIcon, CheckCircleIcon, AcademicCapIcon, BriefcaseIcon,
    IdentificationIcon, StarIcon, SparklesIcon, UsersIcon, DocumentTextIcon, PresentationChartBarIcon, TrashIcon, PencilIcon, PaperClipIcon,
    CheckIcon, XMarkIcon, InformationCircleIcon
} from '@heroicons/react/24/outline';
import { v4 as uuidv4 } from 'uuid';

// --- Import Display/Form components ---
import AcademicQualificationDisplay from '@/components/profile/AcademicQualificationDisplay';
import AcademicQualificationForm from '@/components/profile/AcademicQualificationForm';
import ProfessionalDevelopmentDisplay from '@/components/profile/ProfessionalDevelopmentDisplay';
import ProfessionalDevelopmentForm from '@/components/profile/ProfessionalDevelopmentForm';
import ProfessionalLicenseDisplay from '@/components/profile/ProfessionalLicenseDisplay';
import ProfessionalLicenseForm from '@/components/profile/ProfessionalLicenseForm';
import WorkExperienceDisplay from '@/components/profile/WorkExperienceDisplay';
import WorkExperienceForm from '@/components/profile/WorkExperienceForm';
import ProfessionalAffiliationDisplay from '@/components/profile/ProfessionalAffiliationDisplay';
import ProfessionalAffiliationForm from '@/components/profile/ProfessionalAffiliationForm';
import AwardRecognitionDisplay from '@/components/profile/AwardRecognitionDisplay';
import AwardRecognitionForm from '@/components/profile/AwardRecognitionForm';
import CommunityInvolvementDisplay from '@/components/profile/CommunityInvolvementDisplay';
import CommunityInvolvementForm from '@/components/profile/CommunityInvolvementForm';
import PublicationDisplay from '@/components/profile/PublicationDisplay';
import PublicationForm from '@/components/profile/PublicationForm';
import ConferencePresentationDisplay from '@/components/profile/ConferencePresentationDisplay';
import ConferencePresentationForm from '@/components/profile/ConferencePresentationForm';

// --- Interfaces & Metadata ---
interface ProfileData { user: { id: string; name: string | null; email: string | null; role: string | null; } | null; academicQualifications: AcademicQualification[]; professionalLicenses: ProfessionalLicense[]; workExperiences: WorkExperience[]; professionalAffiliations: ProfessionalAffiliation[]; awardsRecognitions: AwardRecognition[]; professionalDevelopments: ProfessionalDevelopment[]; communityInvolvements: CommunityInvolvement[]; publications: Publication[]; conferencePresentations: ConferencePresentation[]; error?: string; }
const categoryMetadata = { academicQualifications: { title: 'Academic Qualifications', icon: AcademicCapIcon }, professionalLicenses: { title: 'Professional Licenses', icon: IdentificationIcon }, workExperiences: { title: 'Work Experience', icon: BriefcaseIcon }, professionalAffiliations: { title: 'Professional Affiliations', icon: UsersIcon }, awardsRecognitions: { title: 'Awards & Recognitions', icon: StarIcon }, professionalDevelopments: { title: 'Professional Development', icon: SparklesIcon }, communityInvolvements: { title: 'Community Involvement', icon: UsersIcon }, publications: { title: 'Publications', icon: DocumentTextIcon }, conferencePresentations: { title: 'Conference Presentations', icon: PresentationChartBarIcon }, } as const;
type CategoryKey = keyof typeof categoryMetadata;
type EditableProfileData = Omit<ProfileData, 'user' | 'error'>;

// --- Helper Functions ---
const formatDate = (date: string | Date | null | undefined): string => { if (!date) return 'N/A'; try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' }); } catch (e) { console.error("Error formatting date:", date, e); return 'Invalid Date'; } };
const formatDateForInput = (date: string | Date | null | undefined): string => { if (!date) return ''; try { const d = new Date(date); if (isNaN(d.getTime())) return ''; return d.toISOString().split('T')[0]; } catch (e) { console.error("Error formatting date for input:", date, e); return ''; } };

// --- Main Component ---
export default function ProfilePage() {
    // --- State Hooks ---
    const { status: sessionStatus } = useSession();
    const [profileData, setProfileData] = useState<ProfileData | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [pageError, setPageError] = useState<string | null>(null);
    const [isEditing, setIsEditing] = useState(false);
    const [isPending, startTransition] = useTransition();
    const [editError, setEditError] = useState<string | null>(null);
    const [editSuccess, setEditSuccess] = useState<string | null>(null);
    const [editableData, setEditableData] = useState<EditableProfileData | null>(null);
    const [visibleCategories, setVisibleCategories] = useState<Set<CategoryKey>>(new Set());
    const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
    const [editingItemId, setEditingItemId] = useState<string | null>(null);
    const [originalItemData, setOriginalItemData] = useState<EditableItem | null>(null);
    const [changedItemIds, setChangedItemIds] = useState<Set<string>>(new Set());

    // --- Data Fetching ---
    const fetchProfileData = useCallback(async (showLoading = true) => {
        if (showLoading) setIsLoading(true);
        setPageError(null); setEditError(null); setEditSuccess(null);
        try {
            const data = await getMyProfileData();
            if (data.error) {
                setPageError(data.error); setProfileData(null); setVisibleCategories(new Set());
            } else {
                setProfileData(data);
                const initialVisible = new Set<CategoryKey>();
                (Object.keys(categoryMetadata) as CategoryKey[]).forEach(key => {
                    if (data[key] && Array.isArray(data[key]) && data[key].length > 0) {
                        initialVisible.add(key);
                    }
                });
                setVisibleCategories(initialVisible);
                setIsEditing(false); setEditableData(null); setEditingItemId(null); setOriginalItemData(null);
                setChangedItemIds(new Set()); // Clear changed IDs on fetch
            }
        } catch (err) {
            console.error("Failed fetch:", err);
            setPageError("Unexpected fetch error."); setProfileData(null); setVisibleCategories(new Set());
        } finally {
            if (showLoading) setIsLoading(false);
        }
    }, []); // Empty dependency array for useCallback, fetchProfileData doesn't depend on other state/props

    useEffect(() => {
        if (sessionStatus === 'authenticated') {
            if (!profileData && isLoading) {
                fetchProfileData();
            } else if (profileData && isLoading) {
                setIsLoading(false); // Already loaded
            }
        } else if (sessionStatus === 'unauthenticated') {
            setIsLoading(false);
            setPageError("Access Denied.");
            setProfileData(null);
            setVisibleCategories(new Set());
        } else { // loading state
            setIsLoading(true);
        }
    }, [sessionStatus, profileData, isLoading, fetchProfileData]); // Dependencies for useEffect

    // --- *** MOVED FUNCTION DEFINITIONS UP *** ---

    const handleCancelEdit = () => {
        setIsEditing(false);
        setEditableData(null);
        setEditingItemId(null);
        setOriginalItemData(null);
        setEditError(null);
        setEditSuccess(null);
        setChangedItemIds(new Set()); // Clear changed IDs on cancel
    };

    const handleStartEditingItem = (category: CategoryKey, itemId: string) => {
        if (!editableData || !editableData[category]) return;
        const itemToEdit = (editableData[category] as EditableItem[]).find(item => item.id === itemId);
        if (itemToEdit) {
            setOriginalItemData(structuredClone(itemToEdit)); // Store original state before editing
            setEditingItemId(itemId);
            setEditError(null); // Clear errors when starting a new edit
        } else {
            console.error("Item not found:", itemId);
        }
    };

    const handleCancelItemEdit = (category: CategoryKey, itemId: string) => {
        if (!editableData || !originalItemData || originalItemData.id !== itemId || !editableData[category]) {
            setEditingItemId(null);
            setOriginalItemData(null);
            return;
        };
        // Restore the original data for the cancelled item
        setEditableData(prevData => {
            if (!prevData) return null;
            const updatedCategoryData = structuredClone(prevData[category]) as EditableItem[];
            const itemIndex = updatedCategoryData.findIndex(item => item.id === itemId);
            if (itemIndex !== -1) {
                updatedCategoryData[itemIndex] = originalItemData; // Restore original
            }
            return { ...prevData, [category]: updatedCategoryData };
        });
        setEditingItemId(null);
        setOriginalItemData(null);
        // Decide if you want to remove the highlight on cancel. Let's keep it highlighted for now
        // if it was changed before starting the inline edit.
        // setChangedItemIds(prev => { const newSet = new Set(prev); newSet.delete(itemId); return newSet; });
    };

    const handleSaveEditedItem = (itemId: string) => {
        // Just exit the inline editing mode. The changes are already in editableData.
        setEditingItemId(null);
        setOriginalItemData(null);
        // Item remains marked as changed via handleInputChange/handleFileChange
    };

    const handleInputChange = (category: CategoryKey, itemId: string, fieldName: string, value: string | number | Date | null) => {
        if (!editableData) return;
        setEditableData(prevData => {
            if (!prevData || !prevData[category]) return prevData;
            const updatedCategoryData = structuredClone(prevData[category]) as any[];
            const itemIndex = updatedCategoryData.findIndex(item => item.id === itemId);
            if (itemIndex === -1) { console.warn(`Item ${itemId} not found in ${category}`); return prevData; }

            const numericFields = ['yearCompleted', 'yearReceived'];
            let finalValue = value;

            // Handle empty strings for non-required fields -> null
            if (typeof value === 'string' && value.trim() === '') {
                const requiredFields: { [key: string]: string[] } = {
                    professionalLicenses: ['examination', 'licenseNumber', 'monthYear', 'expiration'],
                    academicQualifications: ['degree', 'institution', 'program', 'yearCompleted'],
                    workExperiences: ['institution', 'position', 'inclusiveYears'],
                    professionalAffiliations: ['organization', 'inclusiveYears'],
                    awardsRecognitions: ['awardName', 'awardingBody', 'yearReceived'],
                    professionalDevelopments: ['title', 'organizer', 'dateLocation'],
                    communityInvolvements: ['engagementTitle', 'role', 'locationDate'],
                    publications: ['researchTitle', 'journal', 'datePublished'],
                    conferencePresentations: ['paperTitle', 'eventName', 'dateLocation']
                };
                if (!requiredFields[category]?.includes(fieldName)) {
                    finalValue = null;
                }
            } else if (numericFields.includes(fieldName)) { // Handle numeric fields
                finalValue = typeof value === 'string' ? parseInt(value, 10) : value;
                if (isNaN(finalValue as number)) finalValue = null; // Set to null if parsing fails
            }

            updatedCategoryData[itemIndex] = {
                ...updatedCategoryData[itemIndex],
                [fieldName]: finalValue,
                updatedAt: new Date() // Update timestamp
            };
            return { ...prevData, [category]: updatedCategoryData };
        });
        setChangedItemIds(prev => new Set(prev).add(itemId)); // Mark item as changed
    };

    const handleFileChange = (category: CategoryKey, itemId: string, file: File | null | undefined) => {
        console.log(`[handleFileChange] Category: ${category}, ItemID: ${itemId}, File:`, file);
        const categoriesWithFiles: CategoryKey[] = [ 'academicQualifications', 'professionalDevelopments', 'professionalLicenses', 'workExperiences', 'professionalAffiliations', 'awardsRecognitions', 'communityInvolvements', 'publications', 'conferencePresentations' ];
        if (!categoriesWithFiles.includes(category)) { console.warn(`File change not supported for: ${category}`); return; }
        if (!editableData || !editableData[category]) { console.warn(`Cannot handle file change: Category ${category} not found`); return; }

        const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
        const ALLOWED_TYPES = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];

        if (file && file.size > MAX_FILE_SIZE) { alert(`File size exceeds 5MB limit.`); return; }
        if (file && !ALLOWED_TYPES.includes(file.type)) { alert('Invalid file type. Allowed: PDF, PNG, JPG/JPEG.'); return; }

        setEditableData(prevData => {
            if (!prevData) return null;
            const updatedCategoryData = structuredClone(prevData[category]) as EditableItem[];
            const itemIndex = updatedCategoryData.findIndex(item => item.id === itemId);
            if (itemIndex === -1) { console.warn(`[handleFileChange] Item ${itemId} not found in ${category}`); return prevData; }
            const currentItem = updatedCategoryData[itemIndex];

            if (currentItem && typeof currentItem === 'object') {
                updatedCategoryData[itemIndex] = {
                    ...currentItem,
                    _selectedFile: file ?? null, // Set the file or null
                    updatedAt: new Date()
                };
                console.log(`[handleFileChange] Updated item ${itemId} state with file:`, file?.name ?? 'null');
            } else { console.warn(`[handleFileChange] Item ${itemId} structure issue.`); }

            const newState = { ...prevData, [category]: updatedCategoryData };
            console.log("[handleFileChange] New editableData state (relevant item):", updatedCategoryData[itemIndex]);
            return newState;
        });
        setChangedItemIds(prev => new Set(prev).add(itemId)); // Mark item as changed due to file selection/removal
    };

    const handleDeleteItemLocally = (category: CategoryKey, id: string) => {
        if (!editableData) return;
        setEditableData(prevData => {
            if (!prevData || !Array.isArray(prevData[category])) return prevData;
            const updatedEditableData = { ...prevData };
            updatedEditableData[category] = (updatedEditableData[category] as any[]).filter(item => item.id !== id);
            return updatedEditableData;
        });
        // If the deleted item was being edited, cancel the edit state
        if (editingItemId === id) {
            setEditingItemId(null);
            setOriginalItemData(null);
        }
        // Remove from changed set if deleted
        setChangedItemIds(prev => { const newSet = new Set(prev); newSet.delete(id); return newSet; });
    };

    const handleAddItemLocally = (category: CategoryKey) => {
        if (!editableData || !profileData?.user?.id) return;
        const newEditableData = { ...editableData };
        const newItemId = uuidv4(); // Generate unique ID for the new item
        let placeholderItem: EditableItem;
        const now = new Date();
        const currentUserId = profileData.user.id;
        const nextYear = new Date(now); nextYear.setFullYear(nextYear.getFullYear() + 1);
        const defaultStatus: ApprovalStatus = 'PENDING';

        // Create placeholder based on category
        switch (category) {
            case 'academicQualifications': placeholderItem = { id: newItemId, degree: '', institution: '', program: '', yearCompleted: now.getFullYear(), diplomaFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempAcademicQualification; break;
            case 'professionalLicenses': placeholderItem = { id: newItemId, examination: '', monthYear: '', licenseNumber: '', expiration: nextYear, licenseFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalLicense; break;
            case 'workExperiences': placeholderItem = { id: newItemId, institution: '', position: '', natureOfWork: null, inclusiveYears: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempWorkExperience; break;
            case 'professionalAffiliations': placeholderItem = { id: newItemId, organization: '', position: null, inclusiveYears: '', membershipProofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalAffiliation; break;
            case 'awardsRecognitions': placeholderItem = { id: newItemId, awardName: '', awardingBody: '', yearReceived: now.getFullYear(), certificateUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempAwardRecognition; break;
            case 'professionalDevelopments': placeholderItem = { id: newItemId, title: '', organizer: '', dateLocation: '', certificateFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalDevelopment; break;
            case 'communityInvolvements': placeholderItem = { id: newItemId, engagementTitle: '', role: '', locationDate: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempCommunityInvolvement; break;
            case 'publications': placeholderItem = { id: newItemId, researchTitle: '', journal: '', datePublished: now, doiLink: null, pdfUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempPublication; break;
            case 'conferencePresentations': placeholderItem = { id: newItemId, paperTitle: '', eventName: '', dateLocation: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempConferencePresentation; break;
            default: console.error(`Add handler not implemented for: ${category}`); return;
        }

        // Add the new item to the beginning of the array for that category
        if (!Array.isArray(newEditableData[category])) { newEditableData[category] = []; }
        (newEditableData[category] as EditableItem[]) = [placeholderItem, ...(newEditableData[category] as EditableItem[])];

        setEditableData(newEditableData);
        handleStartEditingItem(category, newItemId); // Immediately start editing the new item
        setChangedItemIds(prev => new Set(prev).add(newItemId)); // Mark new item as changed
    };

    // --- *** END MOVED FUNCTION DEFINITIONS *** ---

    // --- Edit Mode Toggles ---
    const handleEditToggle = () => {
        if (isEditing) {
            handleCancelEdit(); // Call the correctly defined function
        } else {
            if (!profileData || !profileData.user) { setPageError("Cannot enter edit mode: Profile data missing."); return; }
            setIsEditing(true);
            setEditError(null); setEditSuccess(null);
            // Deep clone profile data for editing
            const dataToEdit: EditableProfileData = {
                academicQualifications: structuredClone(profileData.academicQualifications),
                professionalLicenses: structuredClone(profileData.professionalLicenses),
                workExperiences: structuredClone(profileData.workExperiences),
                professionalAffiliations: structuredClone(profileData.professionalAffiliations),
                awardsRecognitions: structuredClone(profileData.awardsRecognitions),
                professionalDevelopments: structuredClone(profileData.professionalDevelopments),
                communityInvolvements: structuredClone(profileData.communityInvolvements),
                publications: structuredClone(profileData.publications),
                conferencePresentations: structuredClone(profileData.conferencePresentations),
            };
            setEditableData(dataToEdit);
            // Ensure all categories with data are visible
            const categoriesToMakeVisible = new Set(visibleCategories);
            (Object.keys(dataToEdit) as CategoryKey[]).forEach(key => {
                if (dataToEdit[key]?.length > 0) { categoriesToMakeVisible.add(key); }
            });
            setVisibleCategories(categoriesToMakeVisible);
            setEditingItemId(null); setOriginalItemData(null);
            setChangedItemIds(new Set()); // Clear changed IDs when entering edit mode
        }
    };

    // --- Save Changes ---
    const handleSaveChanges = () => {
        if (!editableData) { setEditError("No changes to save."); return; }
        if (editingItemId !== null) { setEditError("Please save or cancel the current item edit before saving all changes."); return; }
        setEditError(null); setEditSuccess(null);

        startTransition(async () => {
            try {
                const formData = new FormData();
                const categoriesWithFiles: CategoryKey[] = [ 'academicQualifications', 'professionalDevelopments', 'professionalLicenses', 'workExperiences', 'professionalAffiliations', 'awardsRecognitions', 'communityInvolvements', 'publications', 'conferencePresentations' ];

                // Prepare data for submission
                (Object.keys(categoryMetadata) as CategoryKey[]).forEach(categoryKey => {
                    const categoryData = editableData[categoryKey] as EditableItem[] | undefined;
                    if (categoryData) {
                        // Prepare JSON data (excluding File objects)
                        const dataToSend = categoryData.map(item => {
                            const { _selectedFile, ...rest } = item as any; // Exclude _selectedFile
                            const finalRest = { ...rest };
                            if (item._isNew) { finalRest._isNew = true; } // Keep _isNew flag
                            // Clean data for JSON (e.g., convert Dates to ISO strings)
                            const cleanedRest: { [key: string]: any } = {};
                            for (const key in finalRest) {
                                const value = finalRest[key];
                                if (value instanceof Date) {
                                    cleanedRest[key] = !isNaN(value.getTime()) ? value.toISOString() : null;
                                } else {
                                    cleanedRest[key] = value;
                                }
                            }
                            return cleanedRest;
                        });
                        formData.append(`${categoryKey}_json`, JSON.stringify(dataToSend));

                        // Append files separately if category supports them
                        if (categoriesWithFiles.includes(categoryKey)) {
                            categoryData.forEach(item => {
                                if (item && '_selectedFile' in item && item._selectedFile instanceof File) {
                                    const fileKey = `${categoryKey}_file_${item.id}`; // Use item ID in key
                                    formData.append(fileKey, item._selectedFile);
                                    console.log(`[Frontend] Appending file to FormData: Key=${fileKey}, File=${item._selectedFile.name}`);
                                }
                            });
                        }
                    }
                });

                console.log("[Frontend] FormData prepared. Keys:");
                for (const pair of formData.entries()) { console.log(`- ${pair[0]}: ${pair[1] instanceof File ? pair[1].name : 'JSON data'}`); }

                // Call the server action
                const result = await updateMyProfile(formData);

                if (result.success) {
                    setEditSuccess("Profile updated successfully!");
                    setIsEditing(false); setEditableData(null); setEditingItemId(null); setOriginalItemData(null);
                    setChangedItemIds(new Set()); // Clear changed IDs on successful save
                    await fetchProfileData(false); // Refetch data without main loading spinner
                } else {
                    setEditError(result.error || "Failed to save profile changes.");
                }
            } catch (err: any) {
                console.error("Save error:", err);
                setEditError(err.message || "An unexpected error occurred while saving.");
            }
        });
    };

    // --- Category Visibility ---
    const handleAddCategory = (categoryKey: CategoryKey) => {
        setVisibleCategories(prev => new Set(prev).add(categoryKey));
        setShowCategoryDropdown(false); // Close dropdown after selection
    };

    // --- Render Loading/Error States ---
    if (isLoading || sessionStatus === 'loading') { return <div className="p-6 animate-pulse text-center text-gray-500">Loading profile data...</div>; }
    if (pageError || sessionStatus === 'unauthenticated' || !profileData || !profileData.user) { return <div className="p-6 text-center text-red-600 bg-red-50 border border-red-200 rounded-md">Error: {pageError || "Could not load profile data or access denied."}</div>; }

    // --- Determine data source ---
    const dataToDisplay = isEditing ? editableData : profileData;
    const finalData = (isEditing && dataToDisplay) ? dataToDisplay : profileData;
    const isNewItem = (item: any): boolean => !!item._isNew;

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen">
            {/* === Page Header & Actions === */}
            <div className="mb-6 flex flex-wrap items-center justify-between gap-4 border-b border-gray-200 pb-4">
                 <h1 className="text-2xl sm:text-3xl font-bold text-gray-800">My Profile</h1>
                 <div className="flex items-center gap-2 flex-wrap">
                     <button onClick={handleEditToggle} disabled={isPending} className={`inline-flex items-center gap-1.5 rounded-md px-3 py-1.5 text-sm font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-70 ${ isEditing ? 'bg-gray-600 hover:bg-gray-700 focus:ring-gray-500' : 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-600' }`}> {isEditing ? ( <><XCircleIcon className="h-4 w-4" /> Cancel</> ) : ( <><PencilSquareIcon className="h-4 w-4" /> Edit Profile</> )} </button>
                     {isEditing && ( <button onClick={handleSaveChanges} disabled={isPending || editingItemId !== null} className="inline-flex items-center gap-1.5 rounded-md bg-green-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed" > {isPending ? ( <> <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> Saving... </> ) : ( <><CheckCircleIcon className="h-4 w-4" /> Save Changes</> )} </button> )}
                     <div className="relative">
                         <button onClick={() => setShowCategoryDropdown(!showCategoryDropdown)} disabled={isPending || isEditing} className="inline-flex items-center gap-1 rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed" aria-haspopup="true" aria-expanded={showCategoryDropdown} > <PlusIcon className="h-4 w-4" /> Add Section </button>
                         {showCategoryDropdown && ( <div className="absolute right-0 z-20 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu"> <div className="py-1" role="none"> {(Object.keys(categoryMetadata) as CategoryKey[]).filter(key => !visibleCategories.has(key)).length > 0 ? ((Object.keys(categoryMetadata) as CategoryKey[]).filter(key => !visibleCategories.has(key)).map(key => ( <button key={key} onClick={() => handleAddCategory(key)} className="block w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100" role="menuitem" > {categoryMetadata[key].title} </button> ))) : ( <p className="px-4 py-2 text-sm text-gray-500">All sections added.</p> )} </div> </div> )}
                     </div>
                 </div>
                 {isEditing && editingItemId !== null && ( <p className="mt-2 text-xs text-yellow-700 bg-yellow-50 p-2 rounded border border-yellow-200 w-full flex items-center gap-1"> <InformationCircleIcon className='h-4 w-4 flex-shrink-0'/> Finish editing the current item (<CheckIcon className='inline h-3 w-3 text-blue-600'/> <XMarkIcon className='inline h-3 w-3 text-gray-600'/>) before saving all profile changes. </p> )}
            </div>

            {/* === Status Messages === */}
            {editSuccess && <div className="mb-4 rounded-md bg-green-100 p-3 text-sm font-medium text-green-700 border border-green-200">{editSuccess}</div>}
            {editError && <div className="mb-4 rounded-md bg-red-100 p-3 text-sm font-medium text-red-700 border border-red-200">{editError}</div>}
            {pageError && !editError && <div className="mb-4 rounded-md bg-red-100 p-3 text-sm font-medium text-red-700 border border-red-200">{pageError}</div>}

            {/* === Basic Information Card === */}
            <div className="mb-8 rounded-2xl bg-white shadow-lg overflow-hidden transition duration-300 ease-in-out hover:shadow-xl">
                 <div className="flex items-center gap-5 p-6 sm:p-7 bg-gradient-to-r from-sky-600 to-cyan-500 text-white"> <div className="flex items-center justify-center w-11 h-11 sm:w-12 sm:h-12 rounded-xl bg-white/20 flex-shrink-0"> <InformationCircleIcon className="h-6 w-6 sm:h-7 sm:w-7" /> </div> <h2 className="font-extrabold text-lg sm:text-xl flex-grow tracking-tight text-shadow-sm">Basic Information</h2> </div>
                 <div className="p-6 sm:p-8"> <div className="grid grid-cols-1 gap-x-4 gap-y-3 text-sm sm:grid-cols-2 md:grid-cols-3"> <div><span className="font-medium text-gray-500">Name:</span> {profileData.user.name ?? 'N/A'}</div> <div><span className="font-medium text-gray-500">Email:</span> {profileData.user.email ?? 'N/A'}</div> <div><span className="font-medium text-gray-500">Role:</span> {profileData.user.role ?? 'N/A'}</div> </div> </div>
            </div>

            {/* === Dynamic CV Sections Grid === */}
            {visibleCategories.size === 0 && !isLoading && ( <div className="rounded-lg border-2 border-dashed border-gray-300 bg-gray-100 p-8 text-center text-gray-500"> <p className="mb-2">No profile sections added yet.</p> <p className="text-sm">Click "Add Section" above to get started.</p> </div> )}

            <div className="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
                {Array.from(visibleCategories).map(categoryKey => {
                    const categoryMeta = categoryMetadata[categoryKey];
                    const categoryData = (finalData?.[categoryKey] ?? []) as any[];
                    const CategoryIcon = categoryMeta.icon;
                    const isCategoryEditable = true; // Assuming all categories are editable for faculty

                    return (
                        <div key={categoryKey} className="flex flex-col rounded-2xl bg-white shadow-lg overflow-hidden transition duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1" >
                            {/* Card Header */}
                            <div className="flex items-center gap-5 p-6 sm:p-7 bg-gradient-to-r from-blue-600 to-sky-500 text-white"> <div className="flex items-center justify-center w-11 h-11 sm:w-12 sm:h-12 rounded-xl bg-white/20 flex-shrink-0"> <CategoryIcon className="h-6 w-6 sm:h-7 sm:w-7" aria-hidden="true" /> </div> <h2 className="font-extrabold text-lg sm:text-xl flex-grow tracking-tight text-shadow-sm"> {categoryMeta.title} </h2> {isEditing && ( <button onClick={() => handleAddItemLocally(categoryKey)} className="ml-auto flex-shrink-0 rounded-full bg-white/25 p-1.5 text-white hover:bg-white/30 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-blue-600" title={`Add ${categoryMeta.title}`} disabled={editingItemId !== null || !isCategoryEditable || isPending} > <PlusIcon className="h-4 w-4 sm:h-5 sm:w-5" /> </button> )} </div>

                            {/* Card Body */}
                            <div className="flex-grow p-6 sm:p-8">
                                {categoryData.length === 0 ? ( <p className="italic text-gray-400 text-center py-4">No items recorded.</p> ) : (
                                    <ul className="space-y-6">
                                        {categoryData.map((item: EditableItem, index: number) => {
                                            const isActivelyEditing = isEditing && item.id === editingItemId;
                                            const isChanged = isEditing && changedItemIds.has(item.id) && !isActivelyEditing;

                                            const liClasses = [
                                                'relative group transition-all duration-200 ease-in-out',
                                                isActivelyEditing ? 'bg-blue-50 p-4 rounded-md border border-dashed border-blue-300 shadow-inner -m-4' : '',
                                                isChanged ? 'bg-yellow-50 p-4 rounded-md border-l-4 border-yellow-400 shadow-sm -m-4' : '',
                                                !isActivelyEditing && !isChanged ? 'pb-6 border-b border-gray-100 last:border-b-0 last:pb-0' : ''
                                            ].filter(Boolean).join(' ');

                                            // *** GET STAGED FILE FOR DISPLAY COMPONENT ***
                                            const stagedFile = (item as any)._selectedFile instanceof File ? (item as any)._selectedFile : null;

                                            return (
                                                <li key={item.id || index} className={liClasses}>
                                                    {/* === RENDER FORM OR DISPLAY === */}
                                                    {isEditing && isCategoryEditable && (isNewItem(item) || item.id === editingItemId) ? (
                                                        <>
                                                            {/* Render the correct form based on categoryKey */}
                                                            {categoryKey === 'academicQualifications' && ( <AcademicQualificationForm item={item as TempAcademicQualification} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'professionalDevelopments' && ( <ProfessionalDevelopmentForm item={item as TempProfessionalDevelopment} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'professionalLicenses' && ( <ProfessionalLicenseForm item={item as TempProfessionalLicense} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'workExperiences' && ( <WorkExperienceForm item={item as TempWorkExperience} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'professionalAffiliations' && ( <ProfessionalAffiliationForm item={item as TempProfessionalAffiliation} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'awardsRecognitions' && ( <AwardRecognitionForm item={item as TempAwardRecognition} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'communityInvolvements' && ( <CommunityInvolvementForm item={item as TempCommunityInvolvement} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'publications' && ( <PublicationForm item={item as TempPublication} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}
                                                            {categoryKey === 'conferencePresentations' && ( <ConferencePresentationForm item={item as TempConferencePresentation} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey, item.id)} handleFileChange={handleFileChange.bind(null, categoryKey, item.id)} /> )}

                                                            {/* Item specific Save/Cancel Buttons */}
                                                            {!isNewItem(item) && item.id === editingItemId && (
                                                                <div className='flex justify-end gap-2 mt-3'>
                                                                    <button onClick={() => handleCancelItemEdit(categoryKey, item.id)} disabled={isPending} className='inline-flex items-center gap-1 px-2 py-1 rounded text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400'> <XMarkIcon className='h-3 w-3'/> Cancel </button>
                                                                    <button onClick={() => handleSaveEditedItem(item.id)} disabled={isPending} className='inline-flex items-center gap-1 px-2 py-1 rounded text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400'> <CheckIcon className='h-3 w-3'/> Save Item </button>
                                                                </div>
                                                            )}
                                                            {/* Remove button for NEW items */}
                                                            {isNewItem(item) && (
                                                                <div className="text-right mt-2">
                                                                    <button onClick={() => handleDeleteItemLocally(categoryKey, item.id)} className="inline-flex items-center gap-1 text-xs text-red-600 hover:text-red-800 disabled:opacity-50" disabled={isPending} title="Remove this new item"> <TrashIcon className="h-3 w-3" /> Remove </button>
                                                                </div>
                                                            )}
                                                        </>
                                                    ) : (
                                                        // --- RENDER DISPLAY (Pass item) ---
                                                        <>
                                                            {/* Render the correct display component */}
                                                            {/* *** PASS isEditing and stagedFile props *** */}
                                                            {categoryKey === 'academicQualifications' && ( <AcademicQualificationDisplay item={item as AcademicQualification} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'professionalDevelopments' && ( <ProfessionalDevelopmentDisplay item={item as ProfessionalDevelopment} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'professionalLicenses' && ( <ProfessionalLicenseDisplay item={item as ProfessionalLicense} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'workExperiences' && ( <WorkExperienceDisplay item={item as WorkExperience} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'professionalAffiliations' && ( <ProfessionalAffiliationDisplay item={item as ProfessionalAffiliation} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'awardsRecognitions' && ( <AwardRecognitionDisplay item={item as AwardRecognition} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'communityInvolvements' && ( <CommunityInvolvementDisplay item={item as CommunityInvolvement} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'publications' && ( <PublicationDisplay item={item as Publication} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                            {categoryKey === 'conferencePresentations' && ( <ConferencePresentationDisplay item={item as ConferencePresentation} isEditing={isEditing} stagedFile={stagedFile} /> )}
                                                        </>
                                                    )}

                                                    {/* Action Buttons (Edit/Delete) for EXISTING items in EDIT mode */}
                                                    {isEditing && item.id !== editingItemId && !isNewItem(item) && (
                                                        <div className="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                                            {isCategoryEditable && (
                                                                <button onClick={() => handleStartEditingItem(categoryKey, item.id)} className="p-1 rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 focus:outline-none focus:ring-1 focus:ring-blue-400 focus:ring-offset-1" title={`Edit`} disabled={isPending || editingItemId !== null} > <PencilIcon className="h-3.5 w-3.5" /> </button>
                                                            )}
                                                            <button onClick={() => handleDeleteItemLocally(categoryKey, item.id)} className="p-1 rounded-full bg-red-100 text-red-600 hover:bg-red-200 focus:outline-none focus:ring-1 focus:ring-red-400 focus:ring-offset-1" title={`Delete`} disabled={isPending || editingItemId !== null} > <TrashIcon className="h-3.5 w-3.5" /> </button>
                                                        </div>
                                                    )}
                                                </li>
                                            )
                                        })}
                                    </ul>
                                )}
                            </div> {/* End Card Body */}
                        </div> // End Card Styling
                    );
                })}
            </div> {/* End Grid */}
        </div> // End Page Container
    );
} // End ProfilePage Component
--- END FILE: src\app\(protected)\(faculty)\profile\page.tsx ---

--- START FILE: src\app\(protected)\admin\approvals\page.tsx ---
// src/app/admin/approvals/page.tsx
'use client';

import React, { useState, useEffect, useTransition } from 'react';
import { getPendingSubmissions, approveSubmission, rejectSubmission } from '@/lib/actions/approvalActions'; // Import admin actions
import type { ItemType } from '@/types'; // Import ItemType
import { CheckCircleIcon, XCircleIcon, PaperClipIcon, UserCircleIcon, ClockIcon } from '@heroicons/react/24/outline';

// Define a more specific type for the items displayed on this page
interface PendingItem {
    id: string;
    itemType: ItemType; // Added during fetch
    createdAt: string | Date;
    user: { id: string; name: string | null; email: string | null };
    // Include fields common enough to display, or use specific checks
    title?: string; // For ProfessionalDevelopment
    degree?: string; // For AcademicQualification
    examination?: string; // For ProfessionalLicense
    position?: string; // For WorkExperience, ProfessionalAffiliation
    awardName?: string; // For AwardRecognition
    engagementTitle?: string; // For CommunityInvolvement
    researchTitle?: string; // For Publication
    paperTitle?: string; // For ConferencePresentation
    // Include relevant URL fields based on itemType
    diplomaFileUrl?: string | null;
    certificateFileUrl?: string | null;
    licenseFileUrl?: string | null;
    proofUrl?: string | null;
    membershipProofUrl?: string | null;
    certificateUrl?: string | null;
    pdfUrl?: string | null;
    // Add other potentially relevant fields
    institution?: string;
    organizer?: string;
    // ... add more as needed for display
}

// Helper to get the display title for an item
function getItemDisplayTitle(item: PendingItem): string {
    return item.title ?? item.degree ?? item.examination ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? `Item ID: ${item.id}`;
}

// Helper to get the relevant document URL
function getItemDocumentUrl(item: PendingItem): string | null | undefined {
     // Order matters if multiple could exist (e.g., proofUrl used in multiple types)
    switch (item.itemType) {
        case 'academicQualification': return item.diplomaFileUrl;
        case 'professionalDevelopment': return item.certificateFileUrl;
        case 'professionalLicense': return item.licenseFileUrl;
        case 'awardRecognition': return item.certificateUrl;
        case 'publication': return item.pdfUrl;
        case 'workExperience':
        case 'communityInvolvement':
        case 'conferencePresentation':
        case 'professionalAffiliation': // Added affiliation proof
             return item.proofUrl ?? item.membershipProofUrl; // Use specific proofUrl if available
        default: return null;
    }
}

// Helper to format date
const formatDate = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleString(undefined, { dateStyle: 'short', timeStyle: 'short' }); }
    catch (e) { return 'Invalid Date'; }
};


export default function AdminApprovalsPage() {
    const [pendingItems, setPendingItems] = useState<PendingItem[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition();
    const [actionError, setActionError] = useState<string | null>(null);
    const [rejectionReason, setRejectionReason] = useState<{ [itemId: string]: string }>({});
    const [showRejectReasonInput, setShowRejectReasonInput] = useState<string | null>(null); // Store ID of item being rejected

    const fetchItems = async () => {
        setIsLoading(true);
        setError(null);
        setActionError(null);
        const result = await getPendingSubmissions();
        if (result.success) {
            setPendingItems(result.pendingItems || []);
        } else {
            setError(result.error || 'Failed to load pending items.');
        }
        setIsLoading(false);
    };

    useEffect(() => {
        fetchItems();
    }, []);

    const handleApprove = (itemId: string, itemType: ItemType) => {
        setActionError(null);
        startTransition(async () => {
            const result = await approveSubmission(itemId, itemType);
            if (!result.success) {
                setActionError(`Failed to approve ${itemType} (${itemId}): ${result.error}`);
            } else {
                // Refresh list after successful action
                await fetchItems();
            }
        });
    };

    const handleReject = (itemId: string, itemType: ItemType) => {
        setActionError(null);
        const reason = rejectionReason[itemId]?.trim();
        if (!reason) {
            setActionError(`Rejection reason is required for item ${itemId}.`);
            setShowRejectReasonInput(itemId); // Ensure input is visible
            return;
        }
        startTransition(async () => {
            const result = await rejectSubmission(itemId, itemType, reason);
            if (!result.success) {
                setActionError(`Failed to reject ${itemType} (${itemId}): ${result.error}`);
            } else {
                // Clear reason and hide input on success
                setRejectionReason(prev => ({ ...prev, [itemId]: '' }));
                setShowRejectReasonInput(null);
                // Refresh list
                await fetchItems();
            }
        });
    };

    const handleReasonChange = (itemId: string, value: string) => {
        setRejectionReason(prev => ({ ...prev, [itemId]: value }));
    };

    const toggleRejectInput = (itemId: string) => {
        if (showRejectReasonInput === itemId) {
            setShowRejectReasonInput(null); // Hide if already shown
        } else {
            setShowRejectReasonInput(itemId); // Show for this item
            setActionError(null); // Clear previous errors when showing input
        }
    };


    return (
        <div className="p-6 bg-gray-50 min-h-screen">
            <h1 className="text-2xl font-semibold text-gray-800 mb-6">Pending Approvals</h1>

            {isLoading && <p className="text-gray-600">Loading pending items...</p>}
            {error && <p className="text-red-600 bg-red-50 p-3 rounded border border-red-200">{error}</p>}
            {actionError && <p className="text-red-600 bg-red-50 p-3 rounded border border-red-200 mb-4">{actionError}</p>}

            {!isLoading && !error && pendingItems.length === 0 && (
                <p className="text-gray-500 italic">No items currently pending approval.</p>
            )}

            {pendingItems.length > 0 && (
                <div className="space-y-6">
                    {pendingItems.map((item) => {
                        const docUrl = getItemDocumentUrl(item);
                        const displayTitle = getItemDisplayTitle(item);
                        const isRejectingThis = showRejectReasonInput === item.id;

                        return (
                            <div key={item.id} className="bg-white p-4 rounded-lg shadow border border-gray-200">
                                <div className="flex flex-col sm:flex-row justify-between sm:items-start gap-4">
                                    {/* Item Details */}
                                    <div className="flex-1">
                                        <p className="text-sm font-medium text-indigo-600 uppercase">{item.itemType.replace(/([A-Z])/g, ' $1').trim()}</p>
                                        <p className="text-lg font-semibold text-gray-800 mt-1">{displayTitle}</p>
                                        <div className="mt-2 text-xs text-gray-500 space-y-1">
                                            <p className="flex items-center gap-1">
                                                <UserCircleIcon className="h-4 w-4" />
                                                <span>{item.user.name ?? item.user.email ?? 'Unknown User'}</span>
                                            </p>
                                            <p className="flex items-center gap-1">
                                                <ClockIcon className="h-4 w-4" />
                                                <span>Submitted: {formatDate(item.createdAt)}</span>
                                            </p>
                                        </div>
                                        {docUrl && (
                                            <a
                                                href={docUrl}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="inline-flex items-center gap-1 text-sm text-blue-600 hover:underline mt-3"
                                            >
                                                <PaperClipIcon className="h-4 w-4" /> View Document
                                            </a>
                                        )}
                                        {!docUrl && <p className="text-xs text-gray-400 italic mt-3">No document attached.</p>}
                                    </div>

                                    {/* Action Buttons */}
                                    <div className="flex flex-col sm:flex-row sm:items-start gap-2 flex-shrink-0 mt-2 sm:mt-0">
                                        <button
                                            onClick={() => handleApprove(item.id, item.itemType)}
                                            disabled={isPending || isRejectingThis} // Disable if rejecting this item
                                            className="inline-flex items-center justify-center gap-1 rounded-md bg-green-100 px-3 py-1.5 text-sm font-medium text-green-700 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            <CheckCircleIcon className="h-4 w-4" /> Approve
                                        </button>
                                        <button
                                            onClick={() => toggleRejectInput(item.id)}
                                            disabled={isPending}
                                            className={`inline-flex items-center justify-center gap-1 rounded-md px-3 py-1.5 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed ${
                                                isRejectingThis
                                                ? 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500' // Active rejection state
                                                : 'bg-red-100 text-red-700 hover:bg-red-200 focus:ring-red-500' // Default reject button state
                                            }`}
                                        >
                                            <XCircleIcon className="h-4 w-4" /> {isRejectingThis ? 'Cancel Reject' : 'Reject'}
                                        </button>
                                    </div>
                                </div>

                                {/* Rejection Reason Input Area (Conditional) */}
                                {isRejectingThis && (
                                    <div className="mt-4 pt-4 border-t border-dashed border-gray-300">
                                        <label htmlFor={`reason-${item.id}`} className="block text-sm font-medium text-gray-700 mb-1">
                                            Reason for Rejection*
                                        </label>
                                        <textarea
                                            id={`reason-${item.id}`}
                                            rows={2}
                                            value={rejectionReason[item.id] || ''}
                                            onChange={(e) => handleReasonChange(item.id, e.target.value)}
                                            className="block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm disabled:opacity-50"
                                            placeholder="Provide a clear reason..."
                                            disabled={isPending}
                                        />
                                        <button
                                            onClick={() => handleReject(item.id, item.itemType)}
                                            disabled={isPending || !rejectionReason[item.id]?.trim()}
                                            className="mt-2 inline-flex items-center justify-center gap-1 rounded-md bg-red-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Confirm Rejection
                                        </button>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\approvals\page.tsx ---

--- START FILE: src\app\(protected)\admin\dashboard\page.tsx ---
// src/app/admin/dashboard/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import {
    UserGroupIcon,
    DocumentCheckIcon,
    TableCellsIcon,
    ChartBarIcon, // Added for stats
    ArrowRightIcon,
} from '@heroicons/react/24/outline'; // Using outline icons
import { getAdminDashboardStats } from '@/lib/actions/dashboardActions'; // Import the action

// Interface for Dashboard Card props
interface DashboardCardProps {
    title: string;
    description: string;
    link: string;
    icon: React.ElementType;
    iconColorClass: string; // Added for icon background color
    statsPlaceholder?: string; // Optional placeholder for stats like counts
}

// Reusable Dashboard Card Component
const DashboardCard: React.FC<DashboardCardProps> = ({
    title,
    description,
    link,
    icon: Icon,
    statsPlaceholder,
    iconColorClass,
}) => (
    <Link href={link} legacyBehavior>
        {/* Enhanced Card Styling */}
        <a className="group block rounded-xl border border-gray-100 bg-white p-6 shadow-sm transition-all duration-300 ease-in-out hover:shadow-lg hover:border-blue-200 hover:-translate-y-1">
            <div className="flex items-start justify-between">
                {/* Icon with background */}
                <span className={`inline-block rounded-lg p-3 ${iconColorClass} bg-opacity-10`}>
                    <Icon className={`h-6 w-6 ${iconColorClass}`} />
                </span>
                {/* Arrow Icon on hover */}
                <ArrowRightIcon className="ml-4 h-5 w-5 text-gray-400 opacity-0 transition-opacity duration-300 group-hover:opacity-100" />
            </div>

            <div className="mt-4">
                <h2 className="text-lg font-semibold text-gray-800 group-hover:text-blue-700">
                    {title}
                </h2>
                <p className="mt-1 text-sm text-gray-600">{description}</p>
            </div>

            {statsPlaceholder && (
                <p className="mt-4 text-xs font-medium text-gray-500">{statsPlaceholder}</p>
            )}
            {/* Removed the explicit "Go to section" link text, the whole card is the link */}
        </a>
    </Link>
);


export default function AdminDashboardPage() {
    const { data: session, status } = useSession();
    const userRole = (session?.user as any)?.role;

    // --- State for Dashboard Stats ---
    const [stats, setStats] = useState<{ totalFaculty: number; pendingApprovals: number } | null>(null);
    const [isLoadingStats, setIsLoadingStats] = useState(true);
    const [statsError, setStatsError] = useState<string | null>(null);

    // --- Fetch Stats on Mount ---
    useEffect(() => {
        setIsLoadingStats(true);
        setStatsError(null);
        getAdminDashboardStats()
            .then(response => {
                if (response.success && response.stats) {
                    setStats(response.stats);
                } else {
                    setStatsError(response.error || 'Failed to load dashboard statistics.');
                    setStats(null); // Clear stats on error
                }
            })
            .catch(err => {
                console.error("Dashboard stats fetch error:", err);
                setStatsError('An unexpected error occurred while fetching statistics.');
                setStats(null);
            })
            .finally(() => {
                setIsLoadingStats(false);
            });
    }, []); // Empty dependency array means run once on mount

    if (status === 'loading') {
        return (
            <div className="flex min-h-[calc(100vh-4rem)] items-center justify-center bg-gradient-to-br from-sky-50 via-white to-blue-50 p-6">
                <p className="text-gray-500">Loading admin dashboard...</p>
                {/* Consider adding a spinner component here */}
            </div>
        );
    }

    if (status === 'unauthenticated' || userRole !== 'ADMIN') {
        return (
            <div className="flex min-h-screen items-center justify-center bg-red-50 p-6">
                <p className="text-center text-red-700">
                    Access Denied. <br /> You do not have permission to view this page.
                </p>
            </div>
        );
    }

    return (
        // Apply gradient background and adjust padding
        <div className="min-h-[calc(100vh-4rem)] bg-gradient-to-br from-sky-50 via-white to-blue-50 p-6 md:p-8 lg:p-10">
            <header className="mb-10"> {/* Increased bottom margin */}
                <h1 className="text-3xl font-bold tracking-tight text-gray-900">
                    Administrator Dashboard
                </h1>
                <p className="mt-2 text-sm text-gray-600">
                    Welcome,{' '}
                    <span className="font-medium">
                        {session?.user?.name ?? session?.user?.email}
                    </span>
                    ! This is the central hub for managing faculty and system settings.
                </p>
            </header>

            {/* Stats Section (Placeholder) */}
            <div className="mb-10 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
                {/* Example Stat Card */}
                <div className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm">
                    <div className="flex items-center gap-3">
                        <div className="flex-shrink-0 rounded-full bg-blue-100 p-2 text-blue-600">
                            <UserGroupIcon className="h-5 w-5" />
                        </div>
                        <div>
                            <p className="text-sm font-medium text-gray-500">Total Faculty</p>
                            <p className="text-xl font-semibold text-gray-900">
                                {/* Display count, loading, or error */}
                                {isLoadingStats ? '...' : statsError ? 'Error' : stats?.totalFaculty ?? 0}
                            </p>
                        </div>
                    </div>
                </div>
                 <div className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm">
                    <div className="flex items-center gap-3">
                        <div className="flex-shrink-0 rounded-full bg-yellow-100 p-2 text-yellow-600">
                            <DocumentCheckIcon className="h-5 w-5" />
                        </div>
                        <div>
                            <p className="text-sm font-medium text-gray-500">Pending Approvals</p>
                            <p className="text-xl font-semibold text-gray-900">
                                {/* Display count, loading, or error */}
                                {isLoadingStats ? '...' : statsError ? 'Error' : stats?.pendingApprovals ?? 0}
                            </p>
                        </div>
                    </div>
                </div>
                {/* Add more stat cards as needed */}
            </div>

            {/* Dashboard Cards Section */}
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                <DashboardCard
                    title="Manage Faculty"
                    description="View, add, and manage faculty profiles and details."
                    link="/admin/faculty"
                    icon={UserGroupIcon}
                    iconColorClass="text-blue-600" // Pass color class
                />
                <DashboardCard
                    title="Document Approvals"
                    description="Review and approve/reject pending document submissions."
                    link="/admin/approvals"
                    icon={DocumentCheckIcon}
                    iconColorClass="text-yellow-600" // Pass color class
                />
                <DashboardCard
                    title="Specialization Matrix"
                    description="View faculty skills, expertise, and generate reports."
                    link="/admin/matrix"
                    icon={TableCellsIcon}
                    iconColorClass="text-purple-600" // Pass color class
                />
                {/* Add more DashboardCard components here as needed for future sections */}
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\dashboard\page.tsx ---

--- START FILE: src\app\(protected)\admin\faculty\[facultyId]\page.tsx ---
    'use client';

import React, { useState, useEffect, useTransition, useCallback, useRef, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
// Import necessary actions
import {
    getFacultyProfileById,
    linkSpecializationToFaculty,
    unlinkSpecializationFromFaculty,
    deleteFacultyUser,
    updateFacultyName
} from '@/lib/actions/facultyActions';
import { getSpecializations } from '@/lib/actions/specializationActions';
import type {
    User, Role, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, Specialization
} from '@/generated/prisma/client';

// Import Display Components
import AcademicQualificationDisplay from '@/components/profile/AcademicQualificationDisplay';
import ProfessionalDevelopmentDisplay from '@/components/profile/ProfessionalDevelopmentDisplay';
import ProfessionalLicenseDisplay from '@/components/profile/ProfessionalLicenseDisplay';
import WorkExperienceDisplay from '@/components/profile/WorkExperienceDisplay';
import ProfessionalAffiliationDisplay from '@/components/profile/ProfessionalAffiliationDisplay';
import AwardRecognitionDisplay from '@/components/profile/AwardRecognitionDisplay';
import CommunityInvolvementDisplay from '@/components/profile/CommunityInvolvementDisplay';
import PublicationDisplay from '@/components/profile/PublicationDisplay';
import ConferencePresentationDisplay from '@/components/profile/ConferencePresentationDisplay';

// Import Icons
import {
    ArrowLeftIcon, UserCircleIcon, EnvelopeIcon, CalendarDaysIcon, ExclamationTriangleIcon,
    AcademicCapIcon, BriefcaseIcon, IdentificationIcon, StarIcon, SparklesIcon, UsersIcon,
    DocumentTextIcon, PresentationChartBarIcon,
    TagIcon,
    LightBulbIcon, // <-- Ensure this is imported
    TrashIcon, XMarkIcon,
    PencilIcon
} from '@heroicons/react/24/outline';

// Updated structure for faculty profile data
interface FacultyProfileData {
    user: {
        id: string;
        name: string | null;
        email: string | null;
        role: Role | null;
        createdAt: Date;
        specializations: Specialization[]; // Keep raw data
    };
    // This array now holds the names derived from user.specializations
    suggestedTeachingAreas: string[];
    academicQualifications: AcademicQualification[];
    professionalLicenses: ProfessionalLicense[];
    workExperiences: WorkExperience[];
    professionalAffiliations: ProfessionalAffiliation[];
    awardsRecognitions: AwardRecognition[];
    professionalDevelopments: ProfessionalDevelopment[];
    communityInvolvements: CommunityInvolvement[];
    publications: Publication[];
    conferencePresentations: ConferencePresentation[];
}

// Metadata for CV sections
const sectionMetadata = {
    academicQualifications: { title: 'Academic Qualifications', icon: AcademicCapIcon, component: AcademicQualificationDisplay },
    professionalLicenses: { title: 'Professional Licenses', icon: IdentificationIcon, component: ProfessionalLicenseDisplay },
    workExperiences: { title: 'Work Experience', icon: BriefcaseIcon, component: WorkExperienceDisplay },
    professionalAffiliations: { title: 'Professional Affiliations', icon: UsersIcon, component: ProfessionalAffiliationDisplay },
    awardsRecognitions: { title: 'Awards & Recognitions', icon: StarIcon, component: AwardRecognitionDisplay },
    professionalDevelopments: { title: 'Professional Development', icon: SparklesIcon, component: ProfessionalDevelopmentDisplay },
    communityInvolvements: { title: 'Community Involvement', icon: UsersIcon, component: CommunityInvolvementDisplay },
    publications: { title: 'Publications', icon: DocumentTextIcon, component: PublicationDisplay },
    conferencePresentations: { title: 'Conference Presentations', icon: PresentationChartBarIcon, component: ConferencePresentationDisplay },
} as const;

type SectionKey = keyof typeof sectionMetadata;

// Helper to format date
const formatDate = (date: Date | string | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' }); }
    catch (e) { return 'Invalid Date'; }
};

export default function AdminFacultyProfilePage() {
    const params = useParams();
    const router = useRouter();
    const facultyId = params?.facultyId as string | undefined;

    // State
    const [facultyProfile, setFacultyProfile] = useState<FacultyProfileData | null>(null);
    const [isLoadingProfile, setIsLoadingProfile] = useState(true);
    const [profileError, setProfileError] = useState<string | null>(null);
    const [allSpecializations, setAllSpecializations] = useState<Specialization[]>([]);
    const [isLoadingSpecs, setIsLoadingSpecs] = useState(true);
    const [specsError, setSpecsError] = useState<string | null>(null);
    const [isLinkingPending, startLinkTransition] = useTransition();
    const [linkError, setLinkError] = useState<string | null>(null);
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [isDeleting, startDeleteTransition] = useTransition();
    const [deleteError, setDeleteError] = useState<string | null>(null);
    const [isEditNameModalOpen, setIsEditNameModalOpen] = useState(false);
    const [isUpdatingName, startNameUpdateTransition] = useTransition();
    const [editNameError, setEditNameError] = useState<string | null>(null);
    const editNameFormRef = useRef<HTMLFormElement>(null);

    // --- Modal Handlers (Delete, Edit Name) ---
    const openDeleteModal = () => { setDeleteError(null); setIsDeleteModalOpen(true); };
    const closeDeleteModal = () => { if (isDeleting) return; setIsDeleteModalOpen(false); setDeleteError(null); };
    const handleDeleteConfirm = () => { /* ... (implementation remains the same) ... */
        if (!facultyId || isDeleting) return;
        setDeleteError(null);
        startDeleteTransition(async () => {
            const result = await deleteFacultyUser(facultyId);
            if (result.success) {
                console.log("Faculty deleted successfully, redirecting...");
                closeDeleteModal();
                router.push('/admin/faculty');
            } else {
                setDeleteError(result.error || 'Failed to delete faculty member.');
            }
        });
     };
    const openEditNameModal = () => { setEditNameError(null); setIsEditNameModalOpen(true); };
    const closeEditNameModal = () => { if (isUpdatingName) return; setIsEditNameModalOpen(false); setEditNameError(null); };
    const handleNameUpdateSubmit = (event: FormEvent<HTMLFormElement>) => { /* ... (implementation remains the same) ... */
        event.preventDefault();
        if (!facultyId || isUpdatingName) return;
        setEditNameError(null);
        const formData = new FormData(event.currentTarget);
        formData.append('facultyId', facultyId);
        startNameUpdateTransition(async () => {
            const result = await updateFacultyName(formData);
            if (result.success) {
                closeEditNameModal();
                await fetchProfile(); // Re-fetch profile
            } else {
                setEditNameError(result.error || 'Failed to update name.');
            }
        });
     };

    // --- Fetch Faculty Profile Data ---
    const fetchProfile = useCallback(async () => {
        // ... (implementation remains the same) ...
        if (!facultyId) {
            setProfileError('Faculty ID not found in URL.');
            setIsLoadingProfile(false);
            return;
        }
        setIsLoadingProfile(true);
        setProfileError(null);
        console.log(`Fetching profile for facultyId: ${facultyId}`);
        try {
            const response = await getFacultyProfileById(facultyId);
            if (response.success && response.facultyProfile) {
                setFacultyProfile(response.facultyProfile);
                console.log("Profile data fetched:", response.facultyProfile);
            } else {
                setProfileError(response.error || 'Failed to load faculty profile.');
                setFacultyProfile(null);
                console.error("Error fetching profile:", response.error);
            }
        } catch (err) {
            console.error("Unexpected error fetching profile:", err);
            setProfileError('An unexpected error occurred while fetching the profile.');
            setFacultyProfile(null);
        } finally {
            setIsLoadingProfile(false);
        }
    }, [facultyId]);

    // --- Fetch All Available Specializations ---
    const fetchAllSpecializations = useCallback(async () => {
        // ... (implementation remains the same) ...
        setIsLoadingSpecs(true);
        setSpecsError(null);
        try {
            const response = await getSpecializations();
            if (response.success && response.specializations) {
                setAllSpecializations(response.specializations);
            } else {
                setSpecsError(response.error || 'Failed to load specializations list.');
                setAllSpecializations([]);
            }
        } catch (err) {
            setSpecsError('An unexpected error occurred while fetching specializations.');
            setAllSpecializations([]);
        } finally {
            setIsLoadingSpecs(false);
        }
    }, []);

    // --- Initial Data Fetch ---
    useEffect(() => {
        fetchProfile();
        fetchAllSpecializations();
    }, [fetchProfile, fetchAllSpecializations]);

    // --- Handler for Specialization Checkbox Change ---
    const handleSpecializationChange = (specializationId: string, isChecked: boolean) => {
        // ... (implementation remains the same) ...
        if (!facultyId || isLinkingPending) return;
        setLinkError(null);
        startLinkTransition(async () => {
            let result: { success: boolean; error?: string };
            if (isChecked) {
                result = await linkSpecializationToFaculty(facultyId, specializationId);
            } else {
                result = await unlinkSpecializationFromFaculty(facultyId, specializationId);
            }
            if (!result.success) {
                setLinkError(result.error || `Failed to ${isChecked ? 'link' : 'unlink'} specialization.`);
            } else {
                await fetchProfile(); // Refetch profile data
            }
        });
    };

    // --- Combined Loading/Error States ---
    const isLoading = isLoadingProfile || isLoadingSpecs;
    const error = profileError || specsError;

    // --- Render Loading State ---
    if (isLoading) { /* ... (loading JSX remains the same) ... */
        return (
            <div className="p-6 bg-gray-50 min-h-screen flex items-center justify-center">
                 <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading faculty profile...</span>
                </div>
            </div>
        );
     }

    // --- Render Error State ---
    if (error) { /* ... (error JSX remains the same) ... */
        return (
            <div className="p-6 bg-red-50 min-h-screen">
                 <div className="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow border border-red-200">
                     <div className="flex items-center gap-3 text-red-700 mb-4">
                        <ExclamationTriangleIcon className="h-6 w-6" />
                        <h2 className="text-xl font-semibold">Error Loading Profile</h2>
                     </div>
                    <p className="text-red-600 mb-6">{error}</p>
                    <Link href="/admin/faculty" className="inline-flex items-center gap-1 text-sm text-blue-600 hover:underline">
                        <ArrowLeftIcon className="h-4 w-4" />
                        Back to Faculty List
                    </Link>
                 </div>
            </div>
        );
    }

    // --- Render Profile Data ---
    if (!facultyProfile) {
        return <div className="p-6">No profile data available.</div>;
    }

    const linkedSpecIds = new Set(facultyProfile.user.specializations.map(spec => spec.id));
    const { user, suggestedTeachingAreas, ...cvSections } = facultyProfile; // Destructure suggestedTeachingAreas

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen">
            {/* Back Link */}
            <div className="mb-4">
                <Link href="/admin/faculty" className="inline-flex items-center gap-1 text-sm text-blue-600 hover:underline">
                    <ArrowLeftIcon className="h-4 w-4" />
                    Back to Faculty List
                </Link>
            </div>

            {/* Faculty Header Info */}
            <div className="mb-8 p-6 bg-white rounded-lg shadow border border-gray-200">
                {/* ... (header content remains the same, including edit/delete buttons) ... */}
                 <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
                    <UserCircleIcon className="h-16 w-16 text-gray-400 flex-shrink-0" />
                    <div className="flex-grow">
                        <h1 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
                            <span>{user.name || 'Unnamed Faculty'}</span>
                            <button onClick={openEditNameModal} disabled={isUpdatingName || isDeleting} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-blue-600 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50" title="Edit Name" > <PencilIcon className="h-4 w-4" /> </button>
                        </h1>
                        <div className="mt-2 flex flex-col sm:flex-row sm:items-center gap-x-4 gap-y-1 text-sm text-gray-600">
                            <span className="flex items-center gap-1.5"> <EnvelopeIcon className="h-4 w-4 text-gray-400" /> {user.email || 'No Email'} </span>
                            <span className="flex items-center gap-1.5"> <CalendarDaysIcon className="h-4 w-4 text-gray-400" /> Joined: {formatDate(user.createdAt)} </span>
                            <span className="flex items-center gap-1.5 font-medium"> Role: {user.role || 'N/A'} </span>
                        </div>
                    </div>
                    <div className="flex-shrink-0 mt-4 sm:mt-0">
                        <button onClick={openDeleteModal} disabled={isDeleting} className="inline-flex items-center gap-1.5 rounded-md bg-red-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-60" > <TrashIcon className="h-4 w-4" /> Delete Faculty </button>
                    </div>
                </div>
            </div>

             {/* Link Error Display */}
             {linkError && ( /* ... (error display remains the same) ... */
                <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded relative flex items-center gap-2" role="alert">
                    <ExclamationTriangleIcon className="h-5 w-5 text-red-500" />
                    <span className="block sm:inline">{linkError}</span>
                </div>
             )}

            {/* Specializations Management Card */}
            <div className="mb-8 rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                 {/* ... (specialization management content remains the same) ... */}
                 <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-gray-50"> <TagIcon className="h-5 w-5 text-gray-500" /> <h2 className="text-base font-semibold text-gray-700"> Manage Assigned Specializations </h2> </div>
                 <div className="p-4 sm:p-6">
                    {allSpecializations.length === 0 && !isLoadingSpecs ? ( <p className="text-sm text-gray-500 italic">No specializations have been defined yet. <Link href="/admin/specializations" className='text-blue-600 hover:underline'>Manage Specializations</Link></p> ) : isLoadingSpecs ? ( <p className="text-sm text-gray-500 italic">Loading available specializations...</p> ) : (
                        <fieldset disabled={isLinkingPending}>
                            <legend className="sr-only">Specializations</legend>
                            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-4 gap-y-3">
                                {allSpecializations.map((spec) => (
                                    <div key={spec.id} className="relative flex items-start">
                                        <div className="flex h-6 items-center"> <input id={`spec-${spec.id}`} name="specializations" type="checkbox" checked={linkedSpecIds.has(spec.id)} onChange={(e) => handleSpecializationChange(spec.id, e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 disabled:opacity-70" /> </div>
                                        <div className="ml-3 text-sm leading-6"> <label htmlFor={`spec-${spec.id}`} className="font-medium text-gray-900"> {spec.name} </label> {spec.description && ( <p className="text-xs text-gray-500">{spec.description}</p> )} </div>
                                    </div>
                                ))}
                            </div>
                        </fieldset>
                    )}
                </div>
            </div>

            {/* --- *** NEW: Suggested Teaching Areas Card *** --- */}
            <div className="mb-8 rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-yellow-50"> {/* Changed background */}
                    <LightBulbIcon className="h-5 w-5 text-yellow-600" /> {/* Changed color */}
                    <h2 className="text-base font-semibold text-yellow-800"> {/* Changed color */}
                        Suggested Teaching Areas / Expertise
                    </h2>
                </div>
                <div className="p-4 sm:p-6">
                    {suggestedTeachingAreas.length === 0 ? (
                        <p className="text-sm text-gray-500 italic">No specializations linked to suggest teaching areas.</p>
                    ) : (
                        <ul className="list-disc pl-5 space-y-1.5"> {/* Added slightly more space */}
                            {suggestedTeachingAreas.map((area, index) => (
                                <li key={index} className="text-sm text-gray-800">
                                    {area}
                                </li>
                            ))}
                        </ul>
                    )}
                     <p className="text-xs text-gray-400 mt-4 italic">Note: Suggestions are based on explicitly linked specializations.</p>
                </div>
            </div>
            {/* --- *** END: Suggested Teaching Areas Card *** --- */}

            {/* Dynamic CV Sections Grid */}
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
                {(Object.keys(sectionMetadata) as SectionKey[]).map(sectionKey => {
                    // ... (CV section rendering logic remains the same) ...
                    const sectionData = cvSections[sectionKey];
                    if (!sectionData || sectionData.length === 0) { return null; }
                    const meta = sectionMetadata[sectionKey];
                    const SectionIcon = meta.icon;
                    const DisplayComponent = meta.component;
                    return (
                        <div key={sectionKey} className="flex flex-col rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                            <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-gray-50"> <SectionIcon className="h-5 w-5 text-gray-500" /> <h2 className="text-base font-semibold text-gray-700"> {meta.title} </h2> </div>
                            <div className="flex-grow p-4 space-y-4">
                                {sectionData.map((item: any) => (
                                    <div key={item.id} className="pb-4 border-b border-gray-100 last:border-b-0 last:pb-0">
                                        <DisplayComponent item={item} />
                                    </div>
                                ))}
                            </div>
                        </div>
                    );
                })}
            </div>

            {/* --- Edit Name Modal --- */}
            {isEditNameModalOpen && facultyProfile?.user && ( /* ... (modal JSX remains the same) ... */
                 <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm p-4" aria-labelledby="edit-name-modal-title" role="dialog" aria-modal="true"> <div className="bg-white rounded-lg shadow-xl w-full max-w-md transform transition-all"> <form ref={editNameFormRef} onSubmit={handleNameUpdateSubmit}> <div className="flex justify-between items-center p-4 border-b border-gray-200"> <h2 className="text-lg font-semibold text-gray-800" id="edit-name-modal-title">Edit Faculty Name</h2> <button type="button" onClick={closeEditNameModal} disabled={isUpdatingName} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal"> <XMarkIcon className="h-5 w-5" /> </button> </div> <div className="p-5 space-y-4"> <div> <label htmlFor="faculty-name-edit" className="block text-sm font-medium text-gray-700 mb-1">Full Name</label> <input type="text" id="faculty-name-edit" name="name" defaultValue={facultyProfile.user.name || ''} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm disabled:opacity-70" placeholder="Enter faculty name" disabled={isUpdatingName} /> </div> {editNameError && ( <div className="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert"> <ExclamationTriangleIcon className="h-4 w-4" /> {editNameError} </div> )} </div> <div className="flex justify-end gap-3 p-4 border-t border-gray-200 bg-gray-50"> <button type="button" onClick={closeEditNameModal} disabled={isUpdatingName} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"> Cancel </button> <button type="submit" disabled={isUpdatingName} className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-60" > {isUpdatingName ? 'Saving...' : 'Save Name'} </button> </div> </form> </div> </div>
            )}

            {/* --- Delete Confirmation Modal --- */}
            {isDeleteModalOpen && facultyProfile?.user && ( /* ... (modal JSX remains the same) ... */
                 <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm p-4" aria-labelledby="delete-faculty-modal-title" role="dialog" aria-modal="true"> <div className="bg-white rounded-lg shadow-xl w-full max-w-md transform transition-all"> <div className="flex justify-between items-center p-4 border-b border-gray-200"> <h2 className="text-lg font-semibold text-red-700 flex items-center gap-2" id="delete-faculty-modal-title"> <ExclamationTriangleIcon className="h-5 w-5 text-red-600"/> Confirm Deletion </h2> <button onClick={closeDeleteModal} disabled={isDeleting} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal"> <XMarkIcon className="h-5 w-5" /> </button> </div> <div className="p-5"> <p className="text-sm text-gray-700 mb-3"> Are you sure you want to permanently delete the faculty member: <br /> <strong className="text-gray-900">{facultyProfile.user.name || facultyProfile.user.email}?</strong> </p> <p className="text-xs text-red-600 bg-red-50 p-2 rounded border border-red-100"> This action cannot be undone. All associated profile data (qualifications, licenses, experience, etc.) will also be permanently deleted. </p> {deleteError && ( <div className="mt-3 bg-red-100 border border-red-300 text-red-800 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert"> <ExclamationTriangleIcon className="h-4 w-4" /> {deleteError} </div> )} </div> <div className="flex justify-end gap-3 p-4 border-t border-gray-200 bg-gray-50"> <button type="button" onClick={closeDeleteModal} disabled={isDeleting} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"> Cancel </button> <button type="button" onClick={handleDeleteConfirm} disabled={isDeleting} className="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-60" > {isDeleting ? 'Deleting...' : 'Confirm Delete'} </button> </div> </div> </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\faculty\[facultyId]\page.tsx ---

--- START FILE: src\app\(protected)\admin\faculty\page.tsx ---
// src/app/(protected)/admin/faculty/page.tsx
'use client';

import React, { useState, useEffect, useTransition, FormEvent, useRef } from 'react'; // Added useTransition, FormEvent, useRef
import Link from 'next/link';
import { getAllFaculty, createFacultyUser } from '@/lib/actions/facultyActions'; // Import createFacultyUser action
import {
    UserGroupIcon, EnvelopeIcon, CalendarDaysIcon, ArrowRightIcon, ExclamationTriangleIcon,
    PlusIcon, // Added PlusIcon
    XMarkIcon // Added XMarkIcon for closing modal
} from '@heroicons/react/24/outline';

// Define the type for a faculty member in the list
interface FacultyMember {
    id: string;
    name: string | null;
    email: string | null;
    createdAt: Date;
}

// Helper to format date
const formatDate = (date: Date | string | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' }); }
    catch (e) { return 'Invalid Date'; }
};

export default function AdminFacultyListPage() {
    const [facultyList, setFacultyList] = useState<FacultyMember[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition(); // For server action loading state

    // --- State for Add Faculty Modal ---
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalError, setModalError] = useState<string | null>(null);
    const [modalSuccess, setModalSuccess] = useState<string | null>(null);
    const formRef = useRef<HTMLFormElement>(null); // Ref to reset the form

    // --- Fetch Faculty List ---
    const fetchFaculty = () => {
        setIsLoading(true);
        setError(null);
        getAllFaculty()
            .then(result => {
                if (result.success) {
                    setFacultyList(result.faculty || []);
                } else {
                    setError(result.error || 'Failed to load faculty list.');
                    setFacultyList([]);
                }
            })
            .catch(err => {
                console.error("Faculty list fetch error:", err);
                setError("An unexpected error occurred while fetching faculty.");
                setFacultyList([]);
            })
            .finally(() => {
                setIsLoading(false);
            });
    };

    useEffect(() => {
        fetchFaculty();
    }, []);

    // --- Modal Handlers ---
    const openModal = () => {
        setModalError(null); // Clear previous errors/success messages
        setModalSuccess(null);
        formRef.current?.reset(); // Reset form fields when opening
        setIsModalOpen(true);
    };
    const closeModal = () => {
        if (isPending) return; // Don't close while submitting
        setIsModalOpen(false);
        setModalError(null);
        setModalSuccess(null);
    };

    // --- Form Submission Handler ---
    const handleAddFacultySubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setModalError(null);
        setModalSuccess(null);

        const formData = new FormData(event.currentTarget);

        startTransition(async () => {
            const result = await createFacultyUser(formData);
            if (result.success) {
                setModalSuccess(`Faculty user ${result.user?.email} created successfully!`);
                formRef.current?.reset(); // Reset form on success
                // Optionally close modal after a delay or keep it open to add more
                // closeModal();
                fetchFaculty(); // Refresh the faculty list in the background
            } else {
                setModalError(result.error || 'Failed to add faculty user.');
            }
        });
    };

    // --- Input/Label Classes for Modal Form ---
    const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm disabled:opacity-70";
    const labelClass = "block text-sm font-medium text-gray-700 mb-1";

    return (
        <div className="p-6 bg-gray-50 min-h-screen">
            <div className="flex justify-between items-center mb-6 gap-4 flex-wrap">
                <h1 className="text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    <UserGroupIcon className="h-7 w-7 text-blue-600" />
                    Faculty Management
                </h1>
                {/* --- Add Faculty Button --- */}
                <button
                    onClick={openModal}
                    disabled={isPending} // Disable button if modal action is pending
                    className="inline-flex items-center gap-1.5 rounded-md bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-60"
                >
                    <PlusIcon className="h-4 w-4" />
                    Add Faculty
                </button>
            </div>

            {/* --- Loading and Error Display for List --- */}
            {isLoading && (
                 <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading faculty list...</span>
                </div>
            )}
            {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative flex items-center gap-2 mb-4" role="alert">
                    <ExclamationTriangleIcon className="h-5 w-5 text-red-500" />
                    <span className="block sm:inline">{error}</span>
                </div>
            )}

            {/* --- Faculty List Table/UL --- */}
            {!isLoading && !error && (
                <div className="bg-white shadow overflow-hidden rounded-lg border border-gray-200">
                    <ul role="list" className="divide-y divide-gray-200">
                        {/* ... (mapping facultyList remains the same) ... */}
                        {facultyList.length === 0 ? (
                            <li className="px-6 py-4 text-center text-gray-500 italic">No faculty members found.</li>
                        ) : (
                            facultyList.map((faculty) => (
                                <li key={faculty.id}>
                                    <Link href={`/admin/faculty/${faculty.id}`} className="block hover:bg-gray-50 transition duration-150 ease-in-out group"> {/* Added group class */}
                                        <div className="px-4 py-4 sm:px-6 flex items-center justify-between">
                                            <div className="flex-1 min-w-0">
                                                <p className="text-sm font-semibold text-indigo-600 truncate group-hover:text-indigo-700"> {/* Added group-hover effect */}
                                                    {faculty.name || 'Unnamed Faculty'}
                                                </p>
                                                <div className="mt-1 flex items-center text-xs text-gray-500 gap-x-3 gap-y-1 flex-wrap">
                                                    <p className="flex items-center gap-1 truncate">
                                                        <EnvelopeIcon className="h-3.5 w-3.5 text-gray-400" aria-hidden="true" />
                                                        {faculty.email || 'No Email'}
                                                    </p>
                                                    <p className="flex items-center gap-1">
                                                        <CalendarDaysIcon className="h-3.5 w-3.5 text-gray-400" aria-hidden="true" />
                                                        Joined: {formatDate(faculty.createdAt)}
                                                    </p>
                                                </div>
                                            </div>
                                            <div className="ml-4 flex-shrink-0">
                                                {/* Make arrow more prominent on hover */}
                                                <ArrowRightIcon className="h-5 w-5 text-gray-400 group-hover:text-gray-600 transition-colors" aria-hidden="true" />
                                            </div>
                                        </div>
                                    </Link>
                                </li>
                            ))
                        )}
                    </ul>
                </div>
            )}

            {/* --- Add Faculty Modal --- */}
            {isModalOpen && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm" aria-labelledby="modal-title" role="dialog" aria-modal="true">
                    <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md transform transition-all">
                        {/* Modal Header */}
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-semibold text-gray-800" id="modal-title">Add New Faculty Member</h2>
                            <button
                                onClick={closeModal}
                                disabled={isPending}
                                className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50"
                                aria-label="Close modal"
                            >
                                <XMarkIcon className="h-5 w-5" />
                            </button>
                        </div>

                        {/* Modal Form */}
                        <form ref={formRef} onSubmit={handleAddFacultySubmit} className="space-y-4">
                            {/* Name Input (Optional) */}
                            <div>
                                <label htmlFor="faculty-name" className={labelClass}>Full Name (Optional)</label>
                                <input type="text" id="faculty-name" name="name" className={inputClass} placeholder="e.g., Juan Dela Cruz" disabled={isPending} />
                            </div>
                            {/* Email Input (Required) */}
                            <div>
                                <label htmlFor="faculty-email" className={labelClass}>Email Address*</label>
                                <input type="email" id="faculty-email" name="email" className={inputClass} placeholder="faculty@spcdavao.edu.ph" required disabled={isPending} />
                            </div>
                            {/* Password Input (Required) */}
                            <div>
                                <label htmlFor="faculty-password" className={labelClass}>Initial Password*</label>
                                <input type="password" id="faculty-password" name="password" className={inputClass} placeholder="Min. 8 characters" required minLength={8} disabled={isPending} />
                                <p className="text-xs text-gray-500 mt-1">Faculty member should change this upon first login.</p>
                            </div>

                            {/* Modal Error/Success Messages */}
                            {modalError && (
                                <div className="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert">
                                    <ExclamationTriangleIcon className="h-4 w-4" /> {modalError}
                                </div>
                            )}
                            {modalSuccess && (
                                <div className="bg-green-50 border border-green-200 text-green-700 px-3 py-2 rounded text-sm" role="alert">
                                    {modalSuccess}
                                </div>
                            )}

                            {/* Modal Footer Actions */}
                            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 mt-6">
                                <button
                                    type="button" // Important: type="button" to prevent form submission
                                    onClick={closeModal}
                                    disabled={isPending}
                                    className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    disabled={isPending}
                                    className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-60"
                                >
                                    {isPending ? (
                                        <>
                                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                        Adding...
                                        </>
                                    ) : (
                                        'Add Faculty'
                                    )}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\faculty\page.tsx ---

--- START FILE: src\app\(protected)\admin\matrix\page.tsx ---
// Action: Modify src/app/(protected)/admin/matrix/page.tsx

'use client';

import React, { useState, useEffect, useMemo, useTransition } from 'react';
import { getFacultySpecializationData, generateMatrixCsv } from '@/lib/actions/dashboardActions'; // Import actions
import { TableCellsIcon, ExclamationTriangleIcon, UserCircleIcon, FunnelIcon, ArrowDownTrayIcon } from '@heroicons/react/24/outline';
import FacultyMatrixDetailPopup from '@/components/admin/FacultyMatrixDetailPopup';
import type { FacultyLinkedSpecialization } from '@/types';

export default function AdminMatrixPage() {
    // --- State Declarations ---
    const [matrixData, setMatrixData] = useState<FacultyLinkedSpecialization[]>([]);
    const [allSpecializations, setAllSpecializations] = useState<string[]>([]); // For table headers
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPopupOpen, setIsPopupOpen] = useState(false);
    const [selectedFaculty, setSelectedFaculty] = useState<FacultyLinkedSpecialization | null>(null);
    const [filterSpecialization, setFilterSpecialization] = useState<string>('');
    const [isDownloading, startDownloadTransition] = useTransition();
    const [downloadError, setDownloadError] = useState<string | null>(null);

    // --- Fetch Initial Data ---
    useEffect(() => {
        setIsLoading(true);
        setError(null);
        setDownloadError(null); // Clear download error on refresh

        getFacultySpecializationData()
            .then(response => {
                if (response.success && response.data && response.allSpecializationNames) {
                    // *** MODIFIED: Set both states from the single response ***
                    setMatrixData(response.data);
                    setAllSpecializations(response.allSpecializationNames);
                    // *** END MODIFICATION ***
                } else {
                    setError(response.error || 'Failed to load specialization data.');
                    setMatrixData([]);
                    setAllSpecializations([]);
                }
            })
            .catch(err => {
                setError('An unexpected error occurred while loading the matrix.');
                setMatrixData([]);
                setAllSpecializations([]);
            })
            .finally(() => {
                setIsLoading(false);
            });
        // *** REMOVED: Incorrect Prisma call and related logic ***
    }, []); // Fetch on mount

    // --- Filtering Logic ---
    const filteredMatrixData = useMemo(() => {
        if (!filterSpecialization) {
            return matrixData;
        }
        return matrixData.filter(faculty =>
            faculty.linkedSpecializationNames.includes(filterSpecialization)
        );
    }, [matrixData, filterSpecialization]);

    // --- Popup Handlers ---
    const handleFacultyClick = (faculty: FacultyLinkedSpecialization) => {
        setSelectedFaculty(faculty);
        setIsPopupOpen(true);
    };
    const handleClosePopup = () => {
        setIsPopupOpen(false);
        setSelectedFaculty(null);
    };

    // --- CSV Download Handler ---
    const handleDownloadCsv = () => {
        setDownloadError(null);
        startDownloadTransition(async () => {
            try {
                const result = await generateMatrixCsv();
                if (result.success && result.csvData) {
                    const blob = new Blob([result.csvData], { type: 'text/csv;charset=utf-8;' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.setAttribute('href', url);
                    link.setAttribute('download', 'faculty_specialization_matrix.csv');
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                } else {
                    setDownloadError(result.error || 'Failed to generate CSV data.');
                }
            } catch (err: any) {
                console.error("CSV download error:", err);
                setDownloadError('An unexpected error occurred during download.');
            }
        });
    };


    // --- Loading State ---
    if (isLoading) {
        return (
            <div className="p-6 bg-gray-50 min-h-screen flex items-center justify-center">
                 <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                         <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading specialization matrix...</span>
                </div>
            </div>
        );
     }

    // --- Error State ---
    if (error) {
        return (
            <div className="p-6 bg-red-50 min-h-screen">
                 <div className="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow border border-red-200">
                     <div className="flex items-center gap-3 text-red-700 mb-4">
                        <ExclamationTriangleIcon className="h-6 w-6" />
                        <h2 className="text-xl font-semibold">Error Loading Matrix</h2>
                     </div>
                    <p className="text-red-600 mb-6">{error}</p>
                 </div>
            </div>
        );
     }

    // --- Render Matrix Table ---
    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen relative">
            {/* --- Header, Filter, and Download Row --- */}
            <div className="mb-6 md:flex md:items-center md:justify-between gap-4 flex-wrap">
                {/* Title */}
                <h1 className="text-2xl font-semibold text-gray-800 flex items-center gap-2 mb-4 md:mb-0 flex-shrink-0">
                    <TableCellsIcon className="h-7 w-7 text-purple-600" />
                    Faculty Specialization Matrix
                </h1>

                <div className="flex items-center gap-4 flex-wrap"> {/* Wrapper for filter and download */}
                    {/* Filter Dropdown */}
                    <div className="flex items-center gap-2">
                        <label htmlFor="specFilter" className="text-sm font-medium text-gray-700 flex-shrink-0 flex items-center gap-1">
                            <FunnelIcon className="h-4 w-4 text-gray-500"/>
                            Filter:
                        </label>
                        <select
                            id="specFilter"
                            name="specFilter"
                            value={filterSpecialization}
                            onChange={(e) => setFilterSpecialization(e.target.value)}
                            className="block w-full md:w-auto rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm py-1.5 pl-3 pr-8"
                        >
                            <option value="">-- All Specializations --</option>
                            {/* *** Uses allSpecializations state correctly *** */}
                            {allSpecializations.map(spec => (
                                <option key={spec} value={spec}>
                                    {spec}
                                </option>
                            ))}
                        </select>
                    </div>

                    {/* Download Button */}
                    <button
                        onClick={handleDownloadCsv}
                        disabled={isDownloading || isLoading}
                        className="inline-flex items-center gap-1.5 rounded-md bg-green-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed"
                    >
                        {isDownloading ? (
                             <>
                                <svg className="animate-spin -ml-0.5 mr-1.5 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                Downloading...
                             </>
                        ) : (
                            <>
                                <ArrowDownTrayIcon className="h-4 w-4" />
                                Download CSV
                            </>
                        )}
                    </button>
                </div>
            </div>
            {/* Download Error Display */}
            {downloadError && (
                 <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded relative flex items-center gap-2 text-sm" role="alert">
                    <ExclamationTriangleIcon className="h-4 w-4 text-red-500" />
                    <span className="block sm:inline">Error downloading CSV: {downloadError}</span>
                </div>
            )}
            {/* --- End Header Row --- */}


            {/* --- Matrix Table --- */}
            {filteredMatrixData.length === 0 && !isLoading ? (
                 <p className="text-gray-500 italic text-center mt-10">
                    {filterSpecialization ? `No faculty found with specialization: "${filterSpecialization}".` : 'No faculty data found.'}
                 </p>
            ) : (
                <div className="overflow-x-auto bg-white shadow rounded-lg border border-gray-200">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-100 sticky top-0 z-10">
                            <tr>
                                <th scope="col" className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider sticky left-0 bg-gray-100 z-20">
                                    Faculty Name ({filteredMatrixData.length})
                                </th>
                                {/* *** Uses allSpecializations state correctly *** */}
                                {allSpecializations.map(spec => (
                                    <th key={spec} scope="col" className="px-3 py-3 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider whitespace-nowrap">
                                        {spec}
                                    </th>
                                ))}
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {filteredMatrixData.map((faculty) => {
                                const linkedSpecsSet = new Set(faculty.linkedSpecializationNames);
                                return (
                                    <tr key={faculty.userId} className="hover:bg-gray-50">
                                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-800 sticky left-0 bg-white hover:bg-gray-50 z-10">
                                            <button
                                                type="button"
                                                onClick={() => handleFacultyClick(faculty)}
                                                className="flex items-center gap-2 group text-left w-full focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1 rounded"
                                                title={`View details for ${faculty.name || 'Unnamed Faculty'}`}
                                            >
                                                <UserCircleIcon className="h-5 w-5 text-gray-400 group-hover:text-indigo-600 flex-shrink-0"/>
                                                <div>
                                                    <span className="group-hover:text-indigo-600 group-hover:font-semibold">{faculty.name || 'Unnamed Faculty'}</span>
                                                    <div className="text-xs text-gray-500">{faculty.email || 'No Email'}</div>
                                                </div>
                                            </button>
                                        </td>
                                        {/* *** Uses allSpecializations state correctly *** */}
                                        {allSpecializations.map(spec => (
                                            <td key={`${faculty.userId}-${spec}`} className="px-3 py-3 text-center">
                                                {linkedSpecsSet.has(spec) ? (
                                                    <span className="text-green-600" title={`${faculty.name} has specialization: ${spec}`}>✔️</span>
                                                ) : (
                                                    <span className="text-gray-300">-</span>
                                                )}
                                            </td>
                                        ))}
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            )}

            {/* --- Pop-up Component Integration --- */}
            {isPopupOpen && (
                 <FacultyMatrixDetailPopup
                    faculty={selectedFaculty}
                    onClose={handleClosePopup}
                 />
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\matrix\page.tsx ---

--- START FILE: src\app\(protected)\admin\specializations\page.tsx ---
// src/app/(protected)/admin/specializations/page.tsx
'use client';

import React, { useState, useEffect, useTransition, FormEvent, useRef } from 'react';
// Import the new server actions
import { getSpecializations, createSpecialization, updateSpecialization, deleteSpecialization } from '@/lib/adminActions';
import { TagIcon, PlusIcon, ExclamationTriangleIcon, XMarkIcon, PencilIcon, TrashIcon } from '@heroicons/react/24/outline'; // Added PencilIcon, TrashIcon
import type { Specialization } from '@/generated/prisma';

export default function AdminSpecializationsPage() {
    // --- Existing State ---
    const [specializations, setSpecializations] = useState<Specialization[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null); // For fetching list
    const [isPending, startTransition] = useTransition(); // For server action loading state

    // --- State for Add Modal ---
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [addModalError, setAddModalError] = useState<string | null>(null);
    const [addModalSuccess, setAddModalSuccess] = useState<string | null>(null);
    const addFormRef = useRef<HTMLFormElement>(null);

    // --- State for Edit Modal ---
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [editModalError, setEditModalError] = useState<string | null>(null);
    const [editModalSuccess, setEditModalSuccess] = useState<string | null>(null);
    const [editingSpecialization, setEditingSpecialization] = useState<Specialization | null>(null);
    const editFormRef = useRef<HTMLFormElement>(null);

    // --- State for Delete Modal ---
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [deleteModalError, setDeleteModalError] = useState<string | null>(null);
    const [deletingSpecialization, setDeletingSpecialization] = useState<Specialization | null>(null);

    // --- Fetch Specializations (Modified to clear modal states) ---
    const fetchSpecializations = () => {
        if (!isPending) setIsLoading(true);
        setError(null);
        // Clear modal states on refresh
        setAddModalError(null);
        setAddModalSuccess(null);
        setEditModalError(null);
        setEditModalSuccess(null);
        setDeleteModalError(null);
        console.log("Specializations page: Fetching data...");

        getSpecializations()
            .then(response => {
                if (response.success && response.specializations) {
                    setSpecializations(response.specializations);
                    console.log("Specializations fetched:", response.specializations);
                } else {
                    setError(response.error || 'Failed to load specializations.');
                    setSpecializations([]);
                    console.error("Error fetching specializations:", response.error);
                }
            })
            .catch(err => {
                console.error("Unexpected error fetching specializations:", err);
                setError('An unexpected error occurred.');
                setSpecializations([]);
            })
            .finally(() => {
                if (!isPending) setIsLoading(false);
            });
    };

    useEffect(() => {
        fetchSpecializations();
    }, []); // Initial fetch

    // --- Add Modal Handlers ---
    const openAddModal = () => {
        setAddModalError(null);
        setAddModalSuccess(null);
        addFormRef.current?.reset();
        setIsAddModalOpen(true);
    };
    const closeAddModal = () => {
        if (isPending) return;
        setIsAddModalOpen(false);
        setAddModalError(null);
        setAddModalSuccess(null);
    };
    const handleCreateSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setAddModalError(null);
        setAddModalSuccess(null);
        const formData = new FormData(event.currentTarget);
        const specName = formData.get('name') as string;

        startTransition(async () => {
            setIsLoading(true); // Indicate loading for list refresh
            const result = await createSpecialization(formData);
            if (result.success) {
                setAddModalSuccess(`Specialization "${specName}" created successfully!`);
                addFormRef.current?.reset();
                fetchSpecializations(); // Refresh list
                // Keep modal open to add more, or close after delay:
                // setTimeout(() => closeAddModal(), 1500);
            } else {
                setAddModalError(result.error || 'Failed to create specialization.');
                setIsLoading(false); // Stop list loading if creation failed
            }
        });
    };

    // --- Edit Modal Handlers ---
    const openEditModal = (spec: Specialization) => {
        setEditingSpecialization(spec); // Set the spec to edit
        setEditModalError(null);
        setEditModalSuccess(null);
        setIsEditModalOpen(true);
    };
    const closeEditModal = () => {
        if (isPending) return;
        setIsEditModalOpen(false);
        setEditingSpecialization(null); // Clear editing state
        setEditModalError(null);
        setEditModalSuccess(null);
    };
    const handleUpdateSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!editingSpecialization) return; // Should not happen

        setEditModalError(null);
        setEditModalSuccess(null);
        const formData = new FormData(event.currentTarget);
        // Ensure the ID is included in the form data for the action
        formData.append('id', editingSpecialization.id);
        const specName = formData.get('name') as string;

        startTransition(async () => {
            setIsLoading(true); // Indicate loading for list refresh
            const result = await updateSpecialization(formData);
            if (result.success) {
                setEditModalSuccess(`Specialization "${specName}" updated successfully!`);
                fetchSpecializations(); // Refresh list
                // Close modal after successful update
                setTimeout(() => closeEditModal(), 1500);
            } else {
                setEditModalError(result.error || 'Failed to update specialization.');
                setIsLoading(false); // Stop list loading if update failed
            }
        });
    };

    // --- Delete Modal Handlers ---
    const openDeleteModal = (spec: Specialization) => {
        setDeletingSpecialization(spec);
        setDeleteModalError(null); // Clear previous delete errors
        setIsDeleteModalOpen(true);
    };
    const closeDeleteModal = () => {
        if (isPending) return;
        setIsDeleteModalOpen(false);
        setDeletingSpecialization(null);
        setDeleteModalError(null);
    };
    const handleDeleteConfirm = async () => {
        if (!deletingSpecialization) return;
        setDeleteModalError(null); // Clear error before attempting delete

        startTransition(async () => {
            setIsLoading(true); // Indicate loading for list refresh
            const result = await deleteSpecialization(deletingSpecialization.id);
            if (result.success) {
                closeDeleteModal(); // Close modal on success
                fetchSpecializations(); // Refresh list
            } else {
                setDeleteModalError(result.error || 'Failed to delete specialization.');
                setIsLoading(false); // Stop list loading if delete failed
            }
        });
    };

    // --- Input/Label Classes ---
    const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm disabled:opacity-70";
    const labelClass = "block text-sm font-medium text-gray-700 mb-1";

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen">
            {/* Header Row */}
            <div className="flex justify-between items-center mb-6 gap-4 flex-wrap">
                <h1 className="text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    <TagIcon className="h-7 w-7 text-blue-600" />
                    Manage Specializations
                </h1>
                <button
                    onClick={openAddModal}
                    disabled={isPending}
                    className="inline-flex items-center gap-1.5 rounded-md bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-60"
                >
                    <PlusIcon className="h-4 w-4" />
                    Add Specialization
                </button>
            </div>

            {/* Loading State */}
            {isLoading && (
                <div className="text-center py-10">
                    <div className="flex items-center justify-center gap-3 text-gray-500">
                        <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>{isPending ? 'Processing...' : 'Loading specializations...'}</span>
                    </div>
                </div>
            )}

            {/* Error State for List */}
            {error && !isLoading && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative flex items-center gap-2 mb-4" role="alert">
                    <ExclamationTriangleIcon className="h-5 w-5 text-red-500" />
                    <span className="block sm:inline">{error}</span>
                </div>
            )}

            {/* Specializations List/Table */}
            {!isLoading && !error && (
                <div className="bg-white shadow overflow-hidden rounded-lg border border-gray-200">
                    <ul role="list" className="divide-y divide-gray-200">
                        {specializations.length === 0 ? (
                            <li className="px-6 py-4 text-center text-gray-500 italic">No specializations defined yet. Click "Add Specialization" to create one.</li>
                        ) : (
                            specializations.map((spec) => (
                                <li key={spec.id} className="px-4 py-3 sm:px-6 hover:bg-gray-50 group"> {/* Added group */}
                                    <div className="flex items-center justify-between gap-4">
                                        {/* Specialization Name & Description */}
                                        <div className="flex-1 min-w-0">
                                            <p className="text-sm font-semibold text-gray-800 truncate">
                                                {spec.name}
                                            </p>
                                            {spec.description && (
                                                <p className="mt-1 text-xs text-gray-500">
                                                    {spec.description}
                                                </p>
                                            )}
                                        </div>
                                        {/* Action Buttons (Visible on hover) */}
                                        <div className="ml-4 flex-shrink-0 space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                            <button
                                                onClick={() => openEditModal(spec)}
                                                disabled={isPending}
                                                className="p-1 rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 focus:outline-none focus:ring-1 focus:ring-blue-400 focus:ring-offset-1 disabled:opacity-50"
                                                title={`Edit ${spec.name}`}
                                            >
                                                <PencilIcon className="h-3.5 w-3.5" />
                                            </button>
                                            <button
                                                onClick={() => openDeleteModal(spec)}
                                                disabled={isPending}
                                                className="p-1 rounded-full bg-red-100 text-red-600 hover:bg-red-200 focus:outline-none focus:ring-1 focus:ring-red-400 focus:ring-offset-1 disabled:opacity-50"
                                                title={`Delete ${spec.name}`}
                                            >
                                                <TrashIcon className="h-3.5 w-3.5" />
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            ))
                        )}
                    </ul>
                </div>
            )}

            {/* --- Add Specialization Modal --- */}
            {isAddModalOpen && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm" aria-labelledby="add-modal-title" role="dialog" aria-modal="true">
                    <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md transform transition-all">
                        {/* Header */}
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-semibold text-gray-800" id="add-modal-title">Add New Specialization</h2>
                            <button onClick={closeAddModal} disabled={isPending} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal">
                                <XMarkIcon className="h-5 w-5" />
                            </button>
                        </div>
                        {/* Form */}
                        <form ref={addFormRef} onSubmit={handleCreateSubmit} className="space-y-4">
                            <div>
                                <label htmlFor="spec-name-add" className={labelClass}>Specialization Name*</label>
                                <input type="text" id="spec-name-add" name="name" className={inputClass} required disabled={isPending} />
                            </div>
                            <div>
                                <label htmlFor="spec-description-add" className={labelClass}>Description (Optional)</label>
                                <textarea id="spec-description-add" name="description" rows={3} className={inputClass} disabled={isPending}></textarea>
                            </div>
                            {/* Messages */}
                            {addModalError && <div className="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert"><ExclamationTriangleIcon className="h-4 w-4" /> {addModalError}</div>}
                            {addModalSuccess && <div className="bg-green-50 border border-green-200 text-green-700 px-3 py-2 rounded text-sm" role="alert">{addModalSuccess}</div>}
                            {/* Footer */}
                            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 mt-6">
                                <button type="button" onClick={closeAddModal} disabled={isPending} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50">Cancel</button>
                                <button type="submit" disabled={isPending} className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-60">{isPending ? 'Adding...' : 'Add Specialization'}</button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

            {/* --- Edit Specialization Modal --- */}
            {isEditModalOpen && editingSpecialization && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm" aria-labelledby="edit-modal-title" role="dialog" aria-modal="true">
                    <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md transform transition-all">
                        {/* Header */}
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-semibold text-gray-800" id="edit-modal-title">Edit Specialization</h2>
                            <button onClick={closeEditModal} disabled={isPending} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal">
                                <XMarkIcon className="h-5 w-5" />
                            </button>
                        </div>
                        {/* Form */}
                        <form ref={editFormRef} onSubmit={handleUpdateSubmit} className="space-y-4">
                            {/* Hidden ID field - not strictly necessary if passed via FormData in handler, but good practice */}
                            {/* <input type="hidden" name="id" value={editingSpecialization.id} /> */}
                            <div>
                                <label htmlFor="spec-name-edit" className={labelClass}>Specialization Name*</label>
                                <input type="text" id="spec-name-edit" name="name" defaultValue={editingSpecialization.name} className={inputClass} required disabled={isPending} />
                            </div>
                            <div>
                                <label htmlFor="spec-description-edit" className={labelClass}>Description (Optional)</label>
                                <textarea id="spec-description-edit" name="description" rows={3} defaultValue={editingSpecialization.description || ''} className={inputClass} disabled={isPending}></textarea>
                            </div>
                            {/* Messages */}
                            {editModalError && <div className="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert"><ExclamationTriangleIcon className="h-4 w-4" /> {editModalError}</div>}
                            {editModalSuccess && <div className="bg-green-50 border border-green-200 text-green-700 px-3 py-2 rounded text-sm" role="alert">{editModalSuccess}</div>}
                            {/* Footer */}
                            <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 mt-6">
                                <button type="button" onClick={closeEditModal} disabled={isPending} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50">Cancel</button>
                                <button type="submit" disabled={isPending} className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-60">{isPending ? 'Saving...' : 'Save Changes'}</button>
                            </div>
                        </form>
                    </div>
                </div>
            )}

             {/* --- Delete Confirmation Modal --- */}
             {isDeleteModalOpen && deletingSpecialization && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm" aria-labelledby="delete-modal-title" role="dialog" aria-modal="true">
                    <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md transform transition-all">
                        {/* Header */}
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-semibold text-gray-800" id="delete-modal-title">Confirm Deletion</h2>
                            <button onClick={closeDeleteModal} disabled={isPending} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal">
                                <XMarkIcon className="h-5 w-5" />
                            </button>
                        </div>
                        {/* Confirmation Text */}
                        <p className="text-sm text-gray-600 mb-4">
                            Are you sure you want to delete the specialization: <strong className="text-gray-900">{deletingSpecialization.name}</strong>?
                            This action cannot be undone. Faculty members currently linked to this specialization will be unlinked.
                        </p>
                         {/* Error Message Area */}
                         {deleteModalError && (
                            <div className="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded text-sm flex items-center gap-2 mb-4" role="alert">
                                <ExclamationTriangleIcon className="h-4 w-4" /> {deleteModalError}
                            </div>
                        )}
                        {/* Footer Actions */}
                        <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 mt-6">
                            <button type="button" onClick={closeDeleteModal} disabled={isPending} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50">
                                Cancel
                            </button>
                            <button
                                type="button"
                                onClick={handleDeleteConfirm}
                                disabled={isPending}
                                className="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-60"
                            >
                                {isPending ? 'Deleting...' : 'Delete'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

        </div> // End Page Container
    );
}
--- END FILE: src\app\(protected)\admin\specializations\page.tsx ---

--- START FILE: src\app\(protected)\layout.tsx ---
// src/app/(protected)/layout.tsx
import React from 'react';
import Header from '@/components/ui/Header';
import Footer from '@/components/ui/Footer';

// No font or globals.css imports here

export default function ProtectedLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">
        {children}
      </main>
      <Footer />
    </div>
  );
}
--- END FILE: src\app\(protected)\layout.tsx ---

--- START FILE: src\app\api\auth\[...nextauth]\route.ts ---
// src/app/api/auth/[...nextauth]/route.ts
import NextAuth, { type NextAuthOptions } from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { PrismaAdapter } from '@next-auth/prisma-adapter';
import bcrypt from 'bcrypt';
import prisma from '@/lib/prisma'; // Import the singleton Prisma Client instance

export const authOptions: NextAuthOptions = {
    // Configure Prisma Adapter
    adapter: PrismaAdapter(prisma),

    // Configure one or more authentication providers
    providers: [
        CredentialsProvider({
            // The name to display on the sign in form (e.g. "Sign in with...")
            name: 'Credentials',
            // `credentials` is used to generate a form on the sign in page.
            credentials: {
                email: { label: "Email", type: "email", placeholder: "jsmith@example.com" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials, req) {
                // Add logic here to look up the user from the credentials supplied
                if (!credentials?.email || !credentials?.password) {
                    console.error('Credentials missing');
                    return null; // Indicate failure: credentials not provided
                }

                try {
                    // Find the user in the database using the imported prisma instance
                    const user = await prisma.user.findUnique({
                        where: { email: credentials.email }
                    });

                    if (!user) {
                        console.error('No user found with email:', credentials.email);
                        // Optionally: throw new Error("No user found."); // Can provide feedback
                        return null; // User not found
                    }

                    // Validate the password using bcrypt.compare
                    const isValidPassword = await bcrypt.compare(
                        credentials.password, // Plain password from login form
                        user.password         // Hashed password from database
                    );

                    if (!isValidPassword) {
                        console.error('Invalid password for user:', credentials.email);
                        // Optionally: throw new Error("Invalid password."); // Can provide feedback
                        return null; // Password doesn't match
                    }

                    console.log('User authorized:', user.email);
                    // Return user object if credentials are valid
                    // This object must satisfy NextAuth's User type (at least 'id')
                    // Using 'as any' here simplifies typing for now.
                    return {
                        id: user.id,
                        name: user.name,
                        email: user.email,
                        role: user.role, // Include the role
                    } as any;

                } catch (error) {
                    console.error("Error during authorization:", error);
                    return null; // Return null on any unexpected error during authorization
                }
            }
        })
        // ...add more providers here (e.g., Google, GitHub)
    ],

    // Define how session is managed
    session: {
        strategy: "jwt", // Use JSON Web Tokens for session management
    },

    // Callbacks are asynchronous functions you can use to control what happens
    callbacks: {
        // Add user id and role to the JWT payload
        async jwt({ token, user }) {
            if (user) {
                // The 'user' object here comes from the 'authorize' function or DB lookup
                token.id = user.id;
                // Need type assertion because 'role' isn't part of default JWT token type
                token.role = (user as any).role;
            }
            return token;
        },
        // Add user id and role to the session object available client-side
        async session({ session, token }) {
            if (token && session.user) {
                 // Need type assertion to add custom properties to default Session['user']
                (session.user as any).id = token.id;
                (session.user as any).role = token.role;
            }
            return session;
        },
    },

    // Specify pages for login, error handling, etc.
    pages: {
        signIn: '/login', // Redirect users to /login if they need to sign in
        // error: '/auth/error', // Optional: Custom error page
    },

    // Secret for signing tokens (required) - loaded from .env.local
    secret: process.env.NEXTAUTH_SECRET,

    // Enable debug messages in development for easier troubleshooting
    debug: process.env.NODE_ENV === 'development',
};

// Export the NextAuth handler for GET and POST requests
const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
--- END FILE: src\app\api\auth\[...nextauth]\route.ts ---

--- START FILE: src\app\api\documents\route.ts ---
[EMPTY FILE]
--- END FILE: src\app\api\documents\route.ts ---

--- START FILE: src\app\api\faculty\route.ts ---
[EMPTY FILE]
--- END FILE: src\app\api\faculty\route.ts ---

--- START FILE: src\app\image-test\page.tsx ---
'use client'; // Required for potential state/hooks later if needed

import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

// Ensure you have a valid image file named dot.png
// located directly in your project's /public directory
const IMAGE_SRC = "/dot.png";
const IMAGE_WIDTH = 100; // Example width
const IMAGE_HEIGHT = 100; // Example height

export default function ImageTestPage() {

    return (
        <div className="p-10">
            <h1 className="text-2xl font-bold mb-6">Image Loading Test Page</h1>

            <p className="mb-4">
                This page attempts to load the image located at <code>{IMAGE_SRC}</code>
                (expected to be in the <code>/public</code> folder).
            </p>

            <hr className="my-6" />

            {/* Test Case 1: Standard next/image */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 1: Standard `next/image`</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Using default optimization. Should work if the file is valid and optimization is okay.
                </p>
                <div style={{ width: `${IMAGE_WIDTH}px`, height: `${IMAGE_HEIGHT}px`, position: 'relative', border: '1px dashed blue' }}>
                    <Image
                        src={IMAGE_SRC}
                        alt="Test Dot - Standard"
                        width={IMAGE_WIDTH}
                        height={IMAGE_HEIGHT}
                        style={{ border: '1px solid red' }} // Add visible border to image itself
                        // Add onError for more feedback
                        onError={(e) => console.error(`Standard Image Error for ${IMAGE_SRC}:`, e)}
                    />
                </div>
                 <p className="text-xs mt-2">Container size: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red. Container border: blue dashed.</p>
            </div>

            {/* Test Case 2: next/image with unoptimized={true} */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 2: `next/image` with `unoptimized`</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Bypasses optimization. Should work if the file exists but optimization fails.
                </p>
                 <div style={{ width: `${IMAGE_WIDTH}px`, height: `${IMAGE_HEIGHT}px`, position: 'relative', border: '1px dashed blue' }}>
                    <Image
                        src={IMAGE_SRC}
                        alt="Test Dot - Unoptimized"
                        width={IMAGE_WIDTH}
                        height={IMAGE_HEIGHT}
                        unoptimized={true} // Bypass optimization
                        style={{ border: '1px solid red' }}
                        onError={(e) => console.error(`Unoptimized Image Error for ${IMAGE_SRC}:`, e)}
                    />
                </div>
                <p className="text-xs mt-2">Container size: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red. Container border: blue dashed.</p>
            </div>

             {/* Test Case 3: Standard HTML <img> tag */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 3: Standard HTML `<img/>` tag</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Loads the image directly from the public folder, no Next.js processing. Should work if the file exists and the server serves static files correctly.
                </p>
                {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                    src={IMAGE_SRC}
                    alt="Test Dot - Standard img tag"
                    width={IMAGE_WIDTH}
                    height={IMAGE_HEIGHT}
                    style={{ border: '1px solid red' }}
                    onError={(e) => console.error(`Standard <img> Error for ${IMAGE_SRC}:`, e.currentTarget.src)} // Note: error handling is slightly different
                />
                 <p className="text-xs mt-2">Explicit width/height set: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red.</p>
            </div>

            <hr className="my-6" />

            <Link href="/login" className="text-blue-600 hover:underline">
                ← Back to Login
            </Link>
        </div>
    );
}
--- END FILE: src\app\image-test\page.tsx ---

--- START FILE: src\app\globals.css ---
/* src/app/globals.css (Updated for v3) */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add minimal body styling */
/* body { */
   /* font-family: sans-serif; /* REMOVED - Tailwind will apply font-sans */ */
   /* Add other base styles if needed e.g., background color */
/* } */

/* You can leave the body selector empty or remove it if no other base body styles are needed */
body {
    /* Example: Add a default background if desired */
    /* background-color: #f8fafc; */ /* Light gray */
}

@layer utilities {
    @keyframes fade-in-scale {
      0% { opacity: 0; transform: scale(0.9); }
      100% { opacity: 1; transform: scale(1); }
    }
    .animate-fade-in-scale {
      animation: fade-in-scale 0.2s ease-out forwards;
    }
  }
--- END FILE: src\app\globals.css ---

--- START FILE: src\app\layout.tsx ---
// src/app/layout.tsx
import "./globals.css"; // Ensure this is imported EARLY and ONLY HERE
import type { Metadata } from "next";
import NextAuthProvider from "@/components/providers/NextAuthProvider";
import { Inter } from 'next/font/google'; // Import the Inter font

// Configure the Inter font
const inter = Inter({
  subsets: ['latin'], // Specify character subsets you need
  display: 'swap', // Use 'swap' for better perceived performance
  variable: '--font-inter', // Define a CSS variable for the font
});

export const metadata: Metadata = {
  title: "SMLS-SFMS",
  description: "Skills and Faculty Management System",
};

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode; }>) {
  return (
    // Apply the font variable to the html tag
    <html lang="en" className={`${inter.variable}`}>
      <body> {/* The font variable will cascade down */}
         <NextAuthProvider>
           {children}
         </NextAuthProvider>
      </body>
    </html>
  );
}
--- END FILE: src\app\layout.tsx ---

--- START FILE: src\app\page.tsx ---
'use client'; // Needs to be a client component to use the hook

import React from 'react';
import { useSession, signIn, signOut } from 'next-auth/react';
import Link from 'next/link';

export default function HomePage() {
    const { data: session, status } = useSession();

    return (
        <div className="p-6">
            <h1 className="text-2xl font-semibold mb-4 text-[#003153]">Welcome to SMLS-SFMS!</h1>

            {status === 'loading' && (
                <p className="text-gray-500">Loading session...</p>
            )}

            {status === 'authenticated' && session?.user && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <p>Signed in as: <strong>{session.user.email}</strong></p>
                    <p>Role: <strong>{(session.user as any).role}</strong></p>
                    <button
                        onClick={() => signOut()}
                        className="mt-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded shadow"
                    >
                        Sign Out
                    </button>
                </div>
            )}

            {status === 'unauthenticated' && (
                 <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <p>You are not signed in.</p>
                    <Link href="/login">
                       <button
                          className="mt-2 px-4 py-2 bg-[#003153] hover:bg-[#002742] text-white rounded shadow"
                       >
                           Sign In
                       </button>
                    </Link>
                 </div>
            )}

             <p className="mt-4">This is the homepage content.</p>

        </div>
    );
}
--- END FILE: src\app\page.tsx ---

--- START FILE: src\components\admin\FacultyMatrixDetailPopup.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
// Updated imports: Added LightBulbIcon, CheckIcon is already there
import { ArrowTopRightOnSquareIcon, TagIcon, CheckIcon, LightBulbIcon, XMarkIcon } from '@heroicons/react/24/outline';
import type { FacultyLinkedSpecialization } from '@/types';

interface Props {
    faculty: FacultyLinkedSpecialization | null;
    onClose: () => void;
}

export default function FacultyMatrixDetailPopup({ faculty, onClose }: Props) {
    if (!faculty) {
        return null; // Return null if no faculty data is provided
    }

    // Ensure linkedSpecializationNames is always an array, sort it
    const specializations = faculty.linkedSpecializationNames?.sort() || [];

    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm p-4 transition-opacity duration-300"
            aria-labelledby="faculty-detail-popup-title"
            role="dialog"
            aria-modal="true"
            onClick={onClose} // Close when clicking the backdrop
        >
            <div
                className="bg-white rounded-lg shadow-xl w-full max-w-lg relative transform transition-all duration-300 scale-95 opacity-0 animate-fade-in-scale flex flex-col max-h-[90vh]"
                onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside the modal
            >
                {/* Header */}
                <div className="flex justify-between items-center p-4 border-b border-gray-200 flex-shrink-0">
                    <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2" id="faculty-detail-popup-title">
                        {/* Using TagIcon for general faculty info */}
                        <TagIcon className="h-5 w-5 text-indigo-600"/>
                        {faculty.name || 'Unnamed Faculty'} - Details
                    </h3>
                    <button
                        onClick={onClose}
                        className="p-1 rounded-full text-gray-400 hover:bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1"
                        aria-label="Close detail view"
                    >
                        {/* Using XMarkIcon for close button */}
                        <XMarkIcon className="h-6 w-6" />
                    </button>
                </div>

                {/* Scrollable Content Area */}
                <div className="p-5 overflow-y-auto flex-grow space-y-5"> {/* Added space-y-5 */}
                    {/* Basic Info */}
                    <div>
                        <p className="text-sm text-gray-600">
                            <span className="font-medium text-gray-700">Email:</span> {faculty.email || 'N/A'}
                        </p>
                        {/* Add other basic info if needed */}
                    </div>

                    {/* Linked Specializations / Suggested Areas Section */}
                    <div>
                        <h4 className="text-md font-semibold text-yellow-800 mb-3 border-b border-yellow-200 pb-1 flex items-center gap-2">
                            <LightBulbIcon className="h-5 w-5 text-yellow-600" />
                            Linked Specializations / Suggested Areas ({specializations.length})
                        </h4>
                        {specializations.length === 0 ? (
                            <p className="italic text-gray-500 text-sm">No specializations linked.</p>
                        ) : (
                            <ul className="space-y-1.5 pl-2">
                                {specializations.map((specName, index) => (
                                    <li key={`${faculty.userId}-spec-${index}`} className="flex items-center gap-2 text-sm text-gray-800">
                                        {/* Using CheckIcon to indicate linkage */}
                                        <CheckIcon className="h-4 w-4 text-green-600 flex-shrink-0"/>
                                        <span>{specName}</span>
                                    </li>
                                ))}
                            </ul>
                        )}
                         <p className="text-xs text-gray-400 mt-3 italic">Suggestions based on explicitly linked specializations.</p>
                    </div>
                </div>

                 {/* Footer with Profile Link */}
                 <div className="p-4 border-t border-gray-200 bg-gray-50 text-right flex-shrink-0">
                    <Link
                        href={`/admin/faculty/${faculty.userId}`}
                        className="inline-flex items-center gap-1 text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline"
                        target="_blank" // Open profile in new tab
                        rel="noopener noreferrer"
                    >
                        View Full Profile
                        <ArrowTopRightOnSquareIcon className="h-4 w-4" />
                    </Link>
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\admin\FacultyMatrixDetailPopup.tsx ---

--- START FILE: src\components\profile\AcademicQualificationDisplay.tsx ---
// src/components/profile/AcademicQualificationDisplay.tsx
import React from 'react';
import type { AcademicQualification } from '@/generated/prisma';
// Import the new StatusDisplay component
import StatusDisplay from './StatusDisplay';
// Import necessary icons (adjust as needed)
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon } from '@heroicons/react/24/outline';

interface Props {
    item: AcademicQualification;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function AcademicQualificationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure from the template
        <div className="flex flex-col gap-2"> {/* Reduced gap slightly */}
            {/* Degree Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight"> {/* Adjusted size */}
                {item.degree || 'N/A'}
            </h3>

            {/* Institution */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold"> {/* Adjusted size/gap */}
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-blue-50 text-blue-600 flex-shrink-0"> {/* Adjusted size */}
                    {/* Use a relevant icon */}
                    <BuildingLibraryIcon className="h-4 w-4" />
                </div>
                <span>{item.institution || 'N/A'}{item.program ? ` - ${item.program}` : ''}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2"> {/* Added gap/margin */}

                {/* Completion Year */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium"> {/* Adjusted size/gap */}
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Completed: {item.yearCompleted || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.diplomaFileUrl ? (
                     <a
                        href={item.diplomaFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200" // Adjusted size/padding
                        title={item.diplomaFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" /> {/* Changed icon */}
                       <span>View Document</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No document</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0"> {/* Ensure status is right-aligned */}
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\AcademicQualificationDisplay.tsx ---

--- START FILE: src\components\profile\AcademicQualificationForm.tsx ---
// src/components/profile/AcademicQualificationForm.tsx
import React, { ChangeEvent } from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempAcademicQualification } from '@/types';

interface Props {
    item: TempAcademicQualification;
    isPending: boolean;
    handleInputChange: (fieldName: keyof TempAcademicQualification, value: string | number) => void; // Simplified signature if bound in parent
    // *** CHANGE THIS LINE ***
    handleFileChange: (file: File | null | undefined) => void; // Expects only the file
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function AcademicQualificationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempAcademicQualification, value: string | number) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
             <p className="text-xs font-semibold text-blue-700"> {isNewItem ? 'New Qualification' : 'Editing Qualification'} </p>
             {/* Degree Input */}
             <div> <label htmlFor={`degree-${item.id}`} className={labelClass}>Degree*</label> <input type="text" id={`degree-${item.id}`} name="degree" value={item.degree || ''} onChange={(e) => onInputChange('degree', e.target.value)} className={inputClass} placeholder="e.g., Bachelor of Science" required disabled={isPending} /> </div>
             {/* Institution Input */}
             <div> <label htmlFor={`institution-${item.id}`} className={labelClass}>Institution*</label> <input type="text" id={`institution-${item.id}`} name="institution" value={item.institution || ''} onChange={(e) => onInputChange('institution', e.target.value)} className={inputClass} placeholder="e.g., San Pedro College" required disabled={isPending} /> </div>
             {/* Program Input */}
             <div> <label htmlFor={`program-${item.id}`} className={labelClass}>Program/Major*</label> <input type="text" id={`program-${item.id}`} name="program" value={item.program || ''} onChange={(e) => onInputChange('program', e.target.value)} className={inputClass} placeholder="e.g., Medical Laboratory Science" required disabled={isPending} /> </div>
             {/* Year Completed Input */}
             <div> <label htmlFor={`yearCompleted-${item.id}`} className={labelClass}>Year Completed*</label> <input type="number" id={`yearCompleted-${item.id}`} name="yearCompleted" value={item.yearCompleted || ''} onChange={(e) => onInputChange('yearCompleted', parseInt(e.target.value, 10) || '')} className={inputClass} placeholder="YYYY" required min="1900" max={new Date().getFullYear() + 5} disabled={isPending} /> </div>
             {/* File Input */}
             <div>
                <label htmlFor={`diplomaFile-${item.id}`} className={labelClass}> Upload Diploma/Transcript {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'} </label>
                {!isNewItem && item.diplomaFileUrl && !item._selectedFile && ( <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current: <a href={item.diplomaFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">{item.diplomaFileUrl.split('/').pop()}</a> </div> )}
                {/* *** CHANGE THIS LINE *** */}
                <input
                    type="file"
                    id={`diplomaFile-${item.id}`}
                    name="diplomaFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Only pass the file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                />
                {item._selectedFile && ( <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>×</button> </div> )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\AcademicQualificationForm.tsx ---

--- START FILE: src\components\profile\AwardRecognitionDisplay.tsx ---
// src/components/profile/AwardRecognitionDisplay.tsx
import React from 'react';
import type { AwardRecognition } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, StarIcon } from '@heroicons/react/24/outline'; // Added StarIcon

interface Props {
    item: AwardRecognition;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function AwardRecognitionDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Award Name Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.awardName || 'N/A'}
            </h3>

            {/* Awarding Body */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-indigo-50 text-indigo-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <StarIcon className="h-4 w-4" />
                </div>
                <span>{item.awardingBody || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Year Received */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Received: {item.yearReceived || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.certificateUrl ? (
                     <a
                        href={item.certificateUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.certificateUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Certificate</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No certificate</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\AwardRecognitionDisplay.tsx ---

--- START FILE: src\components\profile\AwardRecognitionForm.tsx ---
// src/components/profile/AwardRecognitionForm.tsx
import React from 'react';
import type { TempAwardRecognition } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempAwardRecognition;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempAwardRecognition, value: string | number | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function AwardRecognitionForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempAwardRecognition, value: string | number | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Award/Recognition' : 'Editing Award/Recognition'}</p>

            {/* Award Name Input */}
            <div>
                <label htmlFor={`awardName-${item.id}`} className={labelClass}>Award/Recognition Name*</label>
                <input
                    type="text"
                    id={`awardName-${item.id}`}
                    name="awardName"
                    value={item.awardName || ''}
                    onChange={(e) => onInputChange('awardName', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Awarding Body Input */}
            <div>
                <label htmlFor={`awardingBody-${item.id}`} className={labelClass}>Awarding Body*</label>
                <input
                    type="text"
                    id={`awardingBody-${item.id}`}
                    name="awardingBody"
                    value={item.awardingBody || ''}
                    onChange={(e) => onInputChange('awardingBody', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., San Pedro College, PAMET"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Year Received Input */}
            <div>
                <label htmlFor={`yearReceived-${item.id}`} className={labelClass}>Year Received*</label>
                <input
                    type="number"
                    id={`yearReceived-${item.id}`}
                    name="yearReceived"
                    value={item.yearReceived || ''}
                    onChange={(e) => onInputChange('yearReceived', parseInt(e.target.value, 10) || null)} // Parse to number or null
                    className={inputClass}
                    placeholder="YYYY"
                    required
                    min="1900"
                    max={new Date().getFullYear() + 5} // Allow a bit into the future
                    disabled={isPending}
                />
            </div>

             {/* File Input */}
             <div>
                <label htmlFor={`certificateFile-${item.id}`} className={labelClass}>Upload Certificate/Proof (Optional)</label>
                 {!isNewItem && item.certificateUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.certificateUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.certificateUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`certificateFile-${item.id}`}
                    name="certificateFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\AwardRecognitionForm.tsx ---

--- START FILE: src\components\profile\CommunityInvolvementDisplay.tsx ---
// src/components/profile/CommunityInvolvementDisplay.tsx
import React from 'react';
import type { CommunityInvolvement } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, UserGroupIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added UserGroupIcon, MapPinIcon

interface Props {
    item: CommunityInvolvement;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function CommunityInvolvementDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Engagement Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.engagementTitle || 'N/A'}
            </h3>

            {/* Role */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-teal-50 text-teal-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <UserGroupIcon className="h-4 w-4" />
                </div>
                <span>Role: {item.role || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Location/Date */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.locationDate || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\CommunityInvolvementDisplay.tsx ---

--- START FILE: src\components\profile\CommunityInvolvementForm.tsx ---
// src/components/profile/CommunityInvolvementForm.tsx
import React from 'react';
import type { TempCommunityInvolvement } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempCommunityInvolvement;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempCommunityInvolvement, value: string | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function CommunityInvolvementForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempCommunityInvolvement, value: string | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Community Involvement' : 'Editing Community Involvement'}</p>

            {/* Engagement Title Input */}
            <div>
                <label htmlFor={`engagementTitle-${item.id}`} className={labelClass}>Engagement Title*</label>
                <input
                    type="text"
                    id={`engagementTitle-${item.id}`}
                    name="engagementTitle"
                    value={item.engagementTitle || ''}
                    onChange={(e) => onInputChange('engagementTitle', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Medical Mission Barangay X"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Role Input */}
            <div>
                <label htmlFor={`role-${item.id}`} className={labelClass}>Role*</label>
                <input
                    type="text"
                    id={`role-${item.id}`}
                    name="role"
                    value={item.role || ''}
                    onChange={(e) => onInputChange('role', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Volunteer, Organizer"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Location/Date Input */}
            <div>
                <label htmlFor={`locationDate-${item.id}`} className={labelClass}>Location & Date*</label>
                <input
                    type="text"
                    id={`locationDate-${item.id}`}
                    name="locationDate"
                    value={item.locationDate || ''}
                    onChange={(e) => onInputChange('locationDate', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Barangay X / May 5, 2024"
                    required
                    disabled={isPending}
                />
            </div>

             {/* File Input */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., Certificate) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\CommunityInvolvementForm.tsx ---

--- START FILE: src\components\profile\ConferencePresentationDisplay.tsx ---
// src/components/profile/ConferencePresentationDisplay.tsx
import React from 'react';
import type { ConferencePresentation } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, PresentationChartBarIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added PresentationChartBarIcon, MapPinIcon

interface Props {
    item: ConferencePresentation;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ConferencePresentationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Paper Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.paperTitle || 'N/A'}
            </h3>

            {/* Event Name */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-purple-50 text-purple-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <PresentationChartBarIcon className="h-4 w-4" />
                </div>
                <span>Event: {item.eventName || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date/Location */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.dateLocation || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof/Details</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ConferencePresentationDisplay.tsx ---

--- START FILE: src\components\profile\ConferencePresentationForm.tsx ---
// src/components/profile/ConferencePresentationForm.tsx
import React from 'react';
import type { TempConferencePresentation } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempConferencePresentation;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempConferencePresentation, value: string) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ConferencePresentationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempConferencePresentation, value: string) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Conference Presentation' : 'Editing Conference Presentation'}</p>

            {/* Paper Title Input */}
            <div>
                <label htmlFor={`paperTitle-${item.id}`} className={labelClass}>Paper/Presentation Title*</label>
                <input
                    type="text"
                    id={`paperTitle-${item.id}`}
                    name="paperTitle"
                    value={item.paperTitle || ''}
                    onChange={(e) => onInputChange('paperTitle', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Event Name Input */}
            <div>
                <label htmlFor={`eventName-${item.id}`} className={labelClass}>Conference/Event Name*</label>
                <input
                    type="text"
                    id={`eventName-${item.id}`}
                    name="eventName"
                    value={item.eventName || ''}
                    onChange={(e) => onInputChange('eventName', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date & Location Input */}
            <div>
                <label htmlFor={`dateLocation-${item.id}`} className={labelClass}>Date & Location*</label>
                <input
                    type="text"
                    id={`dateLocation-${item.id}`}
                    name="dateLocation"
                    value={item.dateLocation || ''}
                    onChange={(e) => onInputChange('dateLocation', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., June 2024 / Manila"
                    required
                    disabled={isPending}
                />
            </div>

            {/* File Input for Proof */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., Certificate, Program) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\ConferencePresentationForm.tsx ---

--- START FILE: src\components\profile\ProfessionalAffiliationDisplay.tsx ---
// src/components/profile/ProfessionalAffiliationDisplay.tsx
import React from 'react';
import type { ProfessionalAffiliation } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, UserGroupIcon, BuildingOfficeIcon } from '@heroicons/react/24/outline'; // Added BuildingOfficeIcon

interface Props {
    item: ProfessionalAffiliation;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ProfessionalAffiliationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Organization Name */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.organization || 'N/A'}
            </h3>

            {/* Position (Conditional) */}
            {item.position && (
                <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                    <div className="flex items-center justify-center w-6 h-6 rounded-md bg-cyan-50 text-cyan-600 flex-shrink-0">
                        {/* Use a relevant icon */}
                        <UserGroupIcon className="h-4 w-4" />
                    </div>
                    <span>Position: {item.position}</span>
                </div>
            )}

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Inclusive Years */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Years: {item.inclusiveYears || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.membershipProofUrl ? (
                     <a
                        href={item.membershipProofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.membershipProofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalAffiliationDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalAffiliationForm.tsx ---
// src/components/profile/ProfessionalAffiliationForm.tsx
import React from 'react';
import type { TempProfessionalAffiliation } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempProfessionalAffiliation;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempProfessionalAffiliation, value: string | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ProfessionalAffiliationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempProfessionalAffiliation, value: string | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Affiliation' : 'Editing Affiliation'}</p>
            <div>
                <label htmlFor={`organization-${item.id}`} className={labelClass}>Organization*</label>
                <input type="text" id={`organization-${item.id}`} name="organization" value={item.organization || ''} onChange={(e) => onInputChange('organization', e.target.value)} className={inputClass} required disabled={isPending} />
            </div>
            <div>
                <label htmlFor={`position-${item.id}`} className={labelClass}>Position (Optional)</label>
                <input type="text" id={`position-${item.id}`} name="position" value={item.position || ''} onChange={(e) => onInputChange('position', e.target.value || null)} className={inputClass} disabled={isPending} />
            </div>
            <div>
                <label htmlFor={`inclusiveYears-${item.id}`} className={labelClass}>Inclusive Years*</label>
                <input type="text" id={`inclusiveYears-${item.id}`} name="inclusiveYears" value={item.inclusiveYears || ''} onChange={(e) => onInputChange('inclusiveYears', e.target.value)} className={inputClass} placeholder="e.g., 2019-Present" required disabled={isPending} />
            </div>
             {/* File Input */}
             <div>
                <label htmlFor={`membershipProofFile-${item.id}`} className={labelClass}>Upload Membership Proof (Optional)</label>
                 {!isNewItem && item.membershipProofUrl && !item._selectedFile && ( <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current: <a href={item.membershipProofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.membershipProofUrl.split('/').pop()} </a> </div> )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`membershipProofFile-${item.id}`}
                    name="membershipProofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                    </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalAffiliationForm.tsx ---

--- START FILE: src\components\profile\ProfessionalDevelopmentDisplay.tsx ---
// src/components/profile/ProfessionalDevelopmentDisplay.tsx
import React from 'react';
import type { ProfessionalDevelopment } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, SparklesIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added SparklesIcon, MapPinIcon

interface Props {
    item: ProfessionalDevelopment;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ProfessionalDevelopmentDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Development Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.title || 'N/A'}
            </h3>

            {/* Organizer */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-yellow-50 text-yellow-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <SparklesIcon className="h-4 w-4" />
                </div>
                <span>Organizer: {item.organizer || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date/Location */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.dateLocation || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.certificateFileUrl ? (
                     <a
                        href={item.certificateFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.certificateFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Certificate</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No certificate</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalDevelopmentDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalDevelopmentForm.tsx ---
// src/components/profile/ProfessionalDevelopmentForm.tsx
import React from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempProfessionalDevelopment } from '@/types'; // Import from shared types

interface Props {
    item: TempProfessionalDevelopment;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempProfessionalDevelopment, value: string) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ProfessionalDevelopmentForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempProfessionalDevelopment, value: string) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">
                {isNewItem ? 'New Professional Development' : 'Editing Professional Development'}
            </p>

            {/* Title Input */}
            <div>
                <label htmlFor={`title-${item.id}`} className={labelClass}>Title*</label>
                <input
                    type="text"
                    id={`title-${item.id}`}
                    name="title"
                    value={item.title || ''}
                    onChange={(e) => onInputChange('title', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Seminar on Advanced Lab Techniques"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Organizer Input */}
            <div>
                <label htmlFor={`organizer-${item.id}`} className={labelClass}>Organizer*</label>
                <input
                    type="text"
                    id={`organizer-${item.id}`}
                    name="organizer"
                    value={item.organizer || ''}
                    onChange={(e) => onInputChange('organizer', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., PAMET"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date & Location Input */}
            <div>
                <label htmlFor={`dateLocation-${item.id}`} className={labelClass}>Date & Location*</label>
                <input
                    type="text"
                    id={`dateLocation-${item.id}`}
                    name="dateLocation"
                    value={item.dateLocation || ''}
                    onChange={(e) => onInputChange('dateLocation', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., May 2024 / Davao City"
                    required
                    disabled={isPending}
                />
            </div>

            {/* File Input for Certificate */}
            <div>
                <label htmlFor={`certificateFile-${item.id}`} className={labelClass}>
                    Upload Certificate {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'}
                </label>
                {!isNewItem && item.certificateFileUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        Current:
                        <a href={item.certificateFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">
                            {item.certificateFileUrl.split('/').pop()}
                        </a>
                    </div>
                )}
                {/* *** UPDATED onChange *** */}
                <input
                    type="file"
                    id={`certificateFile-${item.id}`}
                    name="certificateFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only the file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg" // Consistent file types
                    disabled={isPending}
                />
                {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button
                            type="button"
                            onClick={() => handleFileChange(null)} // Pass null to clear
                            className="ml-1 text-red-500 hover:text-red-700 focus:outline-none"
                            title="Remove selection"
                            disabled={isPending}
                        >
                            ✕ {/* Cross symbol */}
                        </button>
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalDevelopmentForm.tsx ---

--- START FILE: src\components\profile\ProfessionalLicenseDisplay.tsx ---
// src/components/profile/ProfessionalLicenseDisplay.tsx
import React from 'react';
import type { ProfessionalLicense } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, IdentificationIcon, ClockIcon as ExpiryIcon } from '@heroicons/react/24/outline'; // Added IdentificationIcon, aliased ClockIcon

// Helper function to format only the date part
const formatDateOnly = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return 'Invalid Date';
        return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
};

interface Props {
    item: ProfessionalLicense;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ProfessionalLicenseDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Examination Name */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.examination || 'N/A'}
            </h3>

            {/* License Number */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-lime-50 text-lime-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <IdentificationIcon className="h-4 w-4" />
                </div>
                <span>License No: {item.licenseNumber || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Issued & Expiry */}
                <div className="flex flex-col sm:flex-row sm:items-center gap-x-3 gap-y-1 text-xs text-gray-600 font-medium">
                    <div className="flex items-center gap-1.5">
                        <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                        <span>Issued: {item.monthYear || 'N/A'}</span>
                    </div>
                     <div className="flex items-center gap-1.5">
                        <ExpiryIcon className="h-4 w-4 text-gray-400"/>
                        <span>Expires: {formatDateOnly(item.expiration)}</span>
                    </div>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.licenseFileUrl ? (
                     <a
                        href={item.licenseFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.licenseFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View License File</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No file</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalLicenseDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalLicenseForm.tsx ---
// src/components/profile/ProfessionalLicenseForm.tsx
import React from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempProfessionalLicense } from '@/types'; // Import from shared types

interface Props {
    item: TempProfessionalLicense;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempProfessionalLicense, value: string | Date | number | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

// Helper to format date for input type="date"
const formatDateForInput = (date: Date | string | null): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return '';
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch { return ''; }
};

export default function ProfessionalLicenseForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempProfessionalLicense, value: string | Date | number | null) => {
        handleInputChange(fieldName, value);
    };

    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const dateValue = e.target.value;
        try {
            const dateObject = dateValue ? new Date(dateValue) : null;
            // Pass Date object or null, even if invalid (backend MUST validate)
            onInputChange('expiration', dateObject);
        } catch {
            onInputChange('expiration', null);
        }
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">
                {isNewItem ? 'New Professional License' : 'Editing Professional License'}
            </p>

            {/* Examination Name Input */}
            <div>
                <label htmlFor={`examination-${item.id}`} className={labelClass}>Examination Name*</label>
                <input type="text" id={`examination-${item.id}`} name="examination" value={item.examination || ''} onChange={(e) => onInputChange('examination', e.target.value)} className={inputClass} placeholder="e.g., Medical Technologist Licensure" required disabled={isPending} />
            </div>

            {/* License Number Input */}
            <div>
                <label htmlFor={`licenseNumber-${item.id}`} className={labelClass}>License Number*</label>
                <input type="text" id={`licenseNumber-${item.id}`} name="licenseNumber" value={item.licenseNumber || ''} onChange={(e) => onInputChange('licenseNumber', e.target.value)} className={inputClass} placeholder="e.g., 0123456" required disabled={isPending} />
            </div>

            {/* Month/Year Issued Input */}
            <div>
                <label htmlFor={`monthYear-${item.id}`} className={labelClass}>Month/Year Issued*</label>
                <input type="text" id={`monthYear-${item.id}`} name="monthYear" value={item.monthYear || ''} onChange={(e) => onInputChange('monthYear', e.target.value)} className={inputClass} placeholder="e.g., August 2023" required disabled={isPending} />
            </div>

            {/* Expiration Date Input */}
            <div>
                <label htmlFor={`expiration-${item.id}`} className={labelClass}>Expiration Date*</label>
                <input type="date" id={`expiration-${item.id}`} name="expiration" value={formatDateForInput(item.expiration)} onChange={handleDateChange} className={inputClass} required disabled={isPending} />
            </div>

            {/* File Input for License */}
            <div>
                <label htmlFor={`licenseFile-${item.id}`} className={labelClass}>
                    Upload License File {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'}
                </label>
                {!isNewItem && item.licenseFileUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        Current:
                        <a href={item.licenseFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">
                            {item.licenseFileUrl.split('/').pop()}
                        </a>
                    </div>
                )}
                {/* *** UPDATED onChange *** */}
                <input
                    type="file"
                    id={`licenseFile-${item.id}`}
                    name="licenseFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only the file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                />
                {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button
                            type="button"
                            onClick={() => handleFileChange(null)} // Pass null to clear
                            className="ml-1 text-red-500 hover:text-red-700 focus:outline-none"
                            title="Remove selection"
                            disabled={isPending}
                        >
                            ✕
                        </button>
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalLicenseForm.tsx ---

--- START FILE: src\components\profile\PublicationDisplay.tsx ---
// src/components/profile/PublicationDisplay.tsx
import React from 'react';
import type { Publication } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, LinkIcon, BookOpenIcon } from '@heroicons/react/24/outline'; // Added BookOpenIcon

// Helper function to format only the date part
const formatDateOnly = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return 'Invalid Date';
        return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
};

interface Props {
    item: Publication;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function PublicationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Research Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.researchTitle || 'N/A'}
            </h3>

            {/* Journal */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold italic">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-rose-50 text-rose-600 flex-shrink-0 not-italic">
                    {/* Use a relevant icon */}
                    <BookOpenIcon className="h-4 w-4" />
                </div>
                <span className='not-italic'>Journal: {item.journal || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date Published */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Published: {formatDateOnly(item.datePublished)}</span>
                </div>

                {/* Links (DOI & PDF / Staged File) */}
                <div className="flex items-center gap-x-3 gap-y-1">
                    {/* Show Staged File if present in edit mode */}
                    {isEditing && stagedFile ? (
                        <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                            <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                            <span>Pending upload: {stagedFile.name}</span>
                        </div>
                    ) : (
                        // Otherwise, show existing links
                        <>
                            {item.doiLink && (
                                <a
                                    href={item.doiLink.startsWith('http') ? item.doiLink : `https://${item.doiLink}`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                                    title={item.doiLink}
                                >
                                <LinkIcon className="h-4 w-4" /> DOI Link
                                </a>
                            )}
                            {item.pdfUrl && (
                                <a
                                    href={item.pdfUrl}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                     className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                                    title={item.pdfUrl}>
                                <DocumentTextIcon className="h-4 w-4" /> View PDF
                                </a>
                            )}
                            {!item.doiLink && !item.pdfUrl && !isEditing && ( // Only show "No links" if not editing
                                 <span className="text-xs text-gray-400 italic">No links/file</span>
                            )}
                        </>
                    )}
                </div>


                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\PublicationDisplay.tsx ---

--- START FILE: src\components\profile\PublicationForm.tsx ---
// src/components/profile/PublicationForm.tsx
import React from 'react';
import type { TempPublication } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempPublication;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempPublication, value: string | Date | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

// Helper to format date for input type="date"
const formatDateForInput = (date: Date | string | null): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return '';
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch { return ''; }
};


export default function PublicationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempPublication, value: string | Date | null) => {
        handleInputChange(fieldName, value);
    };

    // Handle date change specifically
    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const dateValue = e.target.value;
        try {
            // Date is required, so only pass valid Date objects
            const dateObject = dateValue ? new Date(dateValue) : null;
            if (dateObject && !isNaN(dateObject.getTime())) {
                onInputChange('datePublished', dateObject);
            } else {
                 onInputChange('datePublished', null); // Pass null if invalid/empty
            }
        } catch {
            onInputChange('datePublished', null); // Pass null on error
        }
    };


    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Publication' : 'Editing Publication'}</p>

            {/* Research Title Input */}
            <div>
                <label htmlFor={`researchTitle-${item.id}`} className={labelClass}>Research Title*</label>
                <input
                    type="text"
                    id={`researchTitle-${item.id}`}
                    name="researchTitle"
                    value={item.researchTitle || ''}
                    onChange={(e) => onInputChange('researchTitle', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Journal Input */}
            <div>
                <label htmlFor={`journal-${item.id}`} className={labelClass}>Journal Name*</label>
                <input
                    type="text"
                    id={`journal-${item.id}`}
                    name="journal"
                    value={item.journal || ''}
                    onChange={(e) => onInputChange('journal', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date Published Input */}
             <div>
                <label htmlFor={`datePublished-${item.id}`} className={labelClass}>Date Published*</label>
                <input
                    type="date"
                    id={`datePublished-${item.id}`}
                    name="datePublished"
                    value={formatDateForInput(item.datePublished)} // Format Date to YYYY-MM-DD string
                    onChange={handleDateChange}
                    className={inputClass}
                    required // Mark as required
                    disabled={isPending}
                />
            </div>

             {/* DOI Link Input */}
            <div>
                <label htmlFor={`doiLink-${item.id}`} className={labelClass}>DOI Link (Optional)</label>
                <input
                    type="text"
                    id={`doiLink-${item.id}`}
                    name="doiLink"
                    value={item.doiLink || ''}
                    onChange={(e) => onInputChange('doiLink', e.target.value || null)} // Pass null if empty
                    className={inputClass}
                    placeholder="e.g., 10.1000/xyz123 or https://doi.org/..."
                    disabled={isPending}
                 />
            </div>

            {/* File Input for PDF */}
             <div>
                <label htmlFor={`pdfFile-${item.id}`} className={labelClass}>Upload PDF Copy (Optional)</label>
                 {!isNewItem && item.pdfUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.pdfUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.pdfUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`pdfFile-${item.id}`}
                    name="pdfFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf" // Primarily expect PDFs
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF only.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\PublicationForm.tsx ---

--- START FILE: src\components\profile\StatusDisplay.tsx ---
// src/components/profile/StatusDisplay.tsx
import React from 'react';
import type { ApprovalStatus } from '@/generated/prisma';
import { ClockIcon, CheckCircleIcon, XCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

interface Props {
    status: ApprovalStatus;
    rejectionReason?: string | null;
}

export default function StatusDisplay({ status, rejectionReason }: Props) {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-700';
    let iconColor = 'text-gray-500';
    let shadow = 'shadow-sm';
    let Icon = ClockIcon;
    let text = status;

    switch (status) {
        case 'PENDING':
            bgColor = 'bg-amber-100';
            textColor = 'text-amber-800';
            iconColor = 'text-amber-600';
            shadow = 'shadow-md shadow-amber-500/10';
            Icon = ClockIcon;
            break;
        case 'APPROVED':
            // Match template's approved style
            bgColor = 'bg-emerald-100'; // Lighter green
            textColor = 'text-emerald-800'; // Darker green text
            iconColor = 'text-emerald-600';
            shadow = 'shadow-lg shadow-emerald-500/20'; // Subtle green shadow
            Icon = CheckCircleIcon;
            break;
        case 'REJECTED':
            bgColor = 'bg-red-100';
            textColor = 'text-red-800';
            iconColor = 'text-red-600';
            shadow = 'shadow-md shadow-red-500/10';
            Icon = XCircleIcon;
            break;
    }

    return (
        <div className="flex flex-col items-end gap-1"> {/* Align status pill and reason */}
            <div
                className={`inline-flex items-center gap-1.5 rounded-full px-3 py-1 text-xs font-bold uppercase tracking-wider ${bgColor} ${textColor} ${shadow}`}
                title={status}
            >
                <Icon className={`h-4 w-4 ${iconColor}`} />
                {text}
            </div>
            {status === 'REJECTED' && rejectionReason && (
                 <div className="mt-1 flex items-start gap-1 rounded border border-red-200 bg-red-50 p-1.5 text-xs text-red-700 max-w-[200px] text-right"> {/* Added max-width */}
                    <ExclamationTriangleIcon className="h-4 w-4 flex-shrink-0 text-red-500 mt-0.5" />
                    <span><strong>Reason:</strong> {rejectionReason}</span>
                 </div>
            )}
        </div>
    );
}
--- END FILE: src\components\profile\StatusDisplay.tsx ---

--- START FILE: src\components\profile\WorkExperienceDisplay.tsx ---
// src/components/profile/WorkExperienceDisplay.tsx
import React from 'react';
import type { WorkExperience } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingOfficeIcon, BriefcaseIcon } from '@heroicons/react/24/outline'; // Added BriefcaseIcon

interface Props {
    item: WorkExperience;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function WorkExperienceDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Position Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.position || 'N/A'}
            </h3>

            {/* Institution */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-orange-50 text-orange-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <BuildingOfficeIcon className="h-4 w-4" />
                </div>
                <span>{item.institution || 'N/A'}</span>
            </div>

             {/* Nature of Work (Conditional) */}
             {item.natureOfWork && (
                <p className="text-xs text-gray-500 mt-1 pl-8"> {/* Indent slightly */}
                    <span className="font-medium">Nature:</span> {item.natureOfWork}
                 </p>
            )}

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Inclusive Years */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Years: {item.inclusiveYears || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\WorkExperienceDisplay.tsx ---

--- START FILE: src\components\profile\WorkExperienceForm.tsx ---
// src/components/profile/WorkExperienceForm.tsx
import React from 'react';
import type { TempWorkExperience } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempWorkExperience;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempWorkExperience, value: string | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function WorkExperienceForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempWorkExperience, value: string | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Work Experience' : 'Editing Work Experience'}</p>

            {/* Position Input */}
            <div>
                <label htmlFor={`position-${item.id}`} className={labelClass}>Position*</label>
                <input
                    type="text"
                    id={`position-${item.id}`}
                    name="position"
                    value={item.position || ''}
                    onChange={(e) => onInputChange('position', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Faculty, Medical Technologist"
                    required
                    disabled={isPending} />
             </div>

             {/* Institution Input */}
            <div>
                <label htmlFor={`institution-${item.id}`} className={labelClass}>Institution*</label>
                <input
                    type="text"
                    id={`institution-${item.id}`}
                    name="institution"
                    value={item.institution || ''}
                    onChange={(e) => onInputChange('institution', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., San Pedro College"
                    required
                    disabled={isPending}
                 />
             </div>

             {/* Inclusive Years Input */}
            <div>
                <label htmlFor={`inclusiveYears-${item.id}`} className={labelClass}>Inclusive Years*</label>
                <input
                    type="text"
                    id={`inclusiveYears-${item.id}`}
                    name="inclusiveYears"
                    value={item.inclusiveYears || ''}
                    onChange={(e) => onInputChange('inclusiveYears', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., 2020-Present or 2018-2019"
                    required
                    disabled={isPending}
                 />
             </div>

             {/* Nature of Work Input */}
            <div>
                <label htmlFor={`natureOfWork-${item.id}`} className={labelClass}>Nature of Work (Optional)</label>
                <input
                    type="text"
                    id={`natureOfWork-${item.id}`}
                    name="natureOfWork"
                    value={item.natureOfWork || ''}
                    // Pass null if empty string for optional fields
                    onChange={(e) => onInputChange('natureOfWork', e.target.value || null)}
                    className={inputClass}
                    disabled={isPending}
                 />
             </div>

             {/* File Input */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., COE) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\WorkExperienceForm.tsx ---

--- START FILE: src\components\providers\NextAuthProvider.tsx ---
// src/components/providers/NextAuthProvider.tsx
'use client'; // This component wraps SessionProvider, so it must be a Client Component

import { SessionProvider } from 'next-auth/react';
import React from 'react';

interface Props {
    children: React.ReactNode;
    // We might pass the session from the server later for optimization,
    // but for now, SessionProvider will fetch it client-side.
}

export default function NextAuthProvider({ children }: Props) {
    return <SessionProvider>{children}</SessionProvider>;
}
--- END FILE: src\components\providers\NextAuthProvider.tsx ---

--- START FILE: src\components\ui\Footer.tsx ---
// src/components/ui/Footer.tsx
import React from 'react';
import Link from 'next/link';

export default function Footer() {
    const currentYear = new Date().getFullYear();

    return (
        // Changed background to a light sky blue, adjusted border and text colors
        <footer className="bg-sky-50 border-t border-sky-100 mt-auto backdrop-blur-sm"> {/* Added backdrop-blur for a subtle effect if needed */}
            <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-5"> {/* Slightly increased padding */}
                <div className="flex flex-col sm:flex-row justify-between items-center text-xs text-sky-700"> {/* Adjusted text color */}
                    {/* Left Side */}
                    <p>
                        © {currentYear} San Pedro College - SMLS. All rights reserved.
                    </p>

                    {/* Right Side (Optional Links) */}
                    <div className="flex space-x-4 mt-2 sm:mt-0">
                        <Link href="#" className="text-sky-600 hover:text-sky-800 hover:underline transition-colors duration-200"> {/* Adjusted link colors */}
                            Privacy Policy
                        </Link>
                        <Link href="#" className="text-sky-600 hover:text-sky-800 hover:underline transition-colors duration-200"> {/* Adjusted link colors */}
                            Terms of Service
                        </Link>
                        {/* Add more links if needed */}
                    </div>
                </div>
            </div>
        </footer>
    );
}
--- END FILE: src\components\ui\Footer.tsx ---

--- START FILE: src\components\ui\Header.tsx ---
// src/components/ui/Header.tsx
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSession, signOut } from 'next-auth/react';
import {
    ArrowLeftStartOnRectangleIcon,
    UserCircleIcon,
    HomeIcon,
    DocumentTextIcon,
    CheckBadgeIcon,
    UsersIcon,
    TableCellsIcon,
    ChevronDownIcon,
    BellIcon,
} from '@heroicons/react/24/outline';
// Import the server action
import { getMyNotifications } from '../../lib/actions/notificationActions';
// *** Import the NotificationPanel component ***
import NotificationPanel from './NotificationPanel'; // Adjust path if needed

export default function Header() {
    const { data: session, status } = useSession();
    const user = session?.user;
    const userRole = (user as any)?.role;

    // State for Notifications
    const [unreadCount, setUnreadCount] = useState<number>(0);
    const [isLoadingNotifications, setIsLoadingNotifications] = useState<boolean>(true);
    const [showNotificationPanel, setShowNotificationPanel] = useState<boolean>(false);

    // Fetch Notifications Count
    useEffect(() => {
        if (status === 'authenticated') {
            setIsLoadingNotifications(true);
            getMyNotifications()
                .then(response => {
                    if (response.success && response.unreadCount !== undefined) {
                        setUnreadCount(response.unreadCount);
                    } else {
                        console.error("Failed to fetch notification count:", response.error);
                        setUnreadCount(0);
                    }
                })
                .catch(error => {
                    console.error("Error calling getMyNotifications:", error);
                    setUnreadCount(0);
                })
                .finally(() => {
                    setIsLoadingNotifications(false);
                });
        } else {
            setUnreadCount(0);
            setIsLoadingNotifications(false);
        }
    }, [status]);

    const handleSignOut = async () => {
        await signOut({ callbackUrl: '/login' });
    };

    // Define links based on role
    const facultyLinks = [
        { href: '/dashboard', label: 'Dashboard', icon: HomeIcon },
        { href: '/profile', label: 'My Profile', icon: UserCircleIcon },
        { href: '/documents', label: 'My Documents', icon: DocumentTextIcon },
    ];
    const adminLinks = [
        { href: '/admin/dashboard', label: 'Dashboard', icon: HomeIcon },
        { href: '/admin/approvals', label: 'Approvals', icon: CheckBadgeIcon },
        { href: '/admin/faculty', label: 'Faculty', icon: UsersIcon },
        { href: '/admin/matrix', label: 'Matrix', icon: TableCellsIcon },
        { href: '/admin/specializations', label: 'Specializations', icon: UsersIcon },
    ];
    const navLinks = userRole === 'ADMIN' ? adminLinks : facultyLinks;

    if (status === 'loading') { return null; }
    if (status === 'unauthenticated') { return null; }

    const userName = user?.name ?? user?.email ?? 'User';
    const userInitials = userName?.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase() || '?';

    // Toggle Notification Panel
    const togglePanel = () => {
        setShowNotificationPanel(prev => !prev);
    };

    // Function to close the panel (passed to the panel component)
    const closePanel = () => {
        setShowNotificationPanel(false);
    };

    // Function to update the count (passed to the panel component)
    const updateCount = (newCount: number) => {
        setUnreadCount(newCount);
    }

    return (
        <header className="bg-gradient-to-r from-[#003153] to-[#004a7c] text-white shadow-lg sticky top-0 z-50">
            <nav className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div className="flex h-16 items-center justify-between">
                    {/* Left Side: Logo and Title */}
                    {/* ... (remains the same) ... */}
                     <div className="flex items-center">
                        <Link href={userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard'} className="flex-shrink-0 flex items-center gap-3">
                            <Image src="/smls-logo.png" alt="SMLS Logo" width={40} height={40} className="h-10 w-auto" />
                            <span className="font-semibold text-xl text-white hidden sm:inline"> SMLS-SFMS </span>
                        </Link>
                    </div>

                    {/* Center: Navigation Links */}
                    {/* ... (remains the same) ... */}
                    <div className="hidden md:flex md:items-center md:space-x-2 lg:space-x-4">
                        {navLinks.map((link) => (
                            <Link key={link.href} href={link.href} className="flex items-center gap-1.5 rounded-md px-3 py-2 text-sm font-medium text-gray-200 hover:bg-white/20 hover:text-white transition-colors duration-150" >
                                <link.icon className="h-4 w-4 text-gray-300" /> {link.label}
                            </Link>
                        ))}
                    </div>

                    {/* Right Side: User Info, Notifications & Logout */}
                    <div className="flex items-center">
                        <div className="ml-4 flex items-center md:ml-6 gap-3">

                            {/* Notification Bell */}
                            <div className="relative">
                                <button
                                    onClick={togglePanel}
                                    type="button"
                                    className="relative flex-shrink-0 rounded-full p-1.5 text-gray-300 hover:bg-white/20 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-[#003153] transition-colors duration-150"
                                    title="Notifications"
                                >
                                    <span className="absolute -inset-1.5" />
                                    <span className="sr-only">View notifications</span>
                                    <BellIcon className="h-5 w-5" aria-hidden="true" />
                                    {!isLoadingNotifications && unreadCount > 0 && (
                                        <span className="absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white ring-2 ring-white">
                                            {unreadCount > 9 ? '9+' : unreadCount}
                                        </span>
                                    )}
                                </button>

                                {/* *** Render NotificationPanel instead of Placeholder *** */}
                                {showNotificationPanel && (
                                    <NotificationPanel
                                        onClose={closePanel}
                                        onUpdateCount={updateCount}
                                    />
                                )}
                                {/* *** End NotificationPanel *** */}
                            </div>

                            {/* User Info with Initials/Icon */}
                            {/* ... (remains the same) ... */}
                            <div className="flex items-center gap-2 cursor-default" title={userName}>
                                <span className="relative inline-flex items-center justify-center h-8 w-8 rounded-full bg-white/10 text-sky-200 text-xs font-semibold ring-1 ring-white/30"> {userInitials} </span>
                                <span className="text-sm font-medium text-gray-100 hidden lg:inline"> {userName} </span>
                            </div>

                            {/* Logout Button */}
                            {/* ... (remains the same) ... */}
                             <button onClick={handleSignOut} type="button" className="relative flex-shrink-0 rounded-md p-1.5 text-gray-300 hover:bg-white/20 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-[#003153] transition-colors duration-150" title="Sign Out" > <span className="absolute -inset-1.5" /> <span className="sr-only">Sign Out</span> <ArrowLeftStartOnRectangleIcon className="h-5 w-5" aria-hidden="true" /> </button>
                        </div>
                    </div>
                </div>
            </nav>
        </header>
    );
}
--- END FILE: src\components\ui\Header.tsx ---

--- START FILE: src\components\ui\NotificationPanel.tsx ---
// src/components/ui/NotificationPanel.tsx
'use client';

import React, { useState, useEffect, useTransition } from 'react';
import Link from 'next/link';
import { BellAlertIcon, CheckCircleIcon, XCircleIcon, InboxIcon } from '@heroicons/react/24/outline';
import type { Notification } from '@/generated/prisma';
import {
    getMyNotifications,
    markNotificationAsRead,
    markAllNotificationsAsRead
} from '@/lib/actions/notificationActions';

interface NotificationPanelProps {
    onClose: () => void; // Function to close the panel
    onUpdateCount: (newCount: number) => void; // Function to update count in header
}

// Helper to format time difference (simple version)
function timeAgo(date: Date | string): string {
    const seconds = Math.floor((new Date().getTime() - new Date(date).getTime()) / 1000);
    let interval = seconds / 31536000;
    if (interval > 1) return Math.floor(interval) + "y ago";
    interval = seconds / 2592000;
    if (interval > 1) return Math.floor(interval) + "mo ago";
    interval = seconds / 86400;
    if (interval > 1) return Math.floor(interval) + "d ago";
    interval = seconds / 3600;
    if (interval > 1) return Math.floor(interval) + "h ago";
    interval = seconds / 60;
    if (interval > 1) return Math.floor(interval) + "m ago";
    return Math.floor(seconds) + "s ago";
}


export default function NotificationPanel({ onClose, onUpdateCount }: NotificationPanelProps) {
    const [notifications, setNotifications] = useState<Notification[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition(); // For mark as read actions

    const fetchNotifications = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await getMyNotifications();
            if (response.success && response.notifications) {
                setNotifications(response.notifications);
                // Update count in header immediately after fetching
                onUpdateCount(response.unreadCount ?? 0);
            } else {
                setError(response.error || 'Failed to load notifications.');
                setNotifications([]);
                 onUpdateCount(0);
            }
        } catch (err) {
            setError('An unexpected error occurred.');
            setNotifications([]);
             onUpdateCount(0);
        } finally {
            setIsLoading(false);
        }
    };

    // Fetch notifications when the panel mounts
    useEffect(() => {
        fetchNotifications();
        // Optional: Set up polling or WebSocket connection for real-time updates
        // return () => { /* cleanup polling/WebSocket */ };
    }, []); // Run only once on mount

    const handleMarkOneRead = (notificationId: string) => {
        startTransition(async () => {
            const result = await markNotificationAsRead(notificationId);
            if (result.success) {
                // Refresh the list to show updated read status and count
                fetchNotifications();
            } else {
                // Handle error (e.g., show a temporary message)
                console.error("Failed to mark notification as read:", result.error);
            }
        });
    };

    const handleMarkAllRead = () => {
        startTransition(async () => {
            const result = await markAllNotificationsAsRead();
            if (result.success) {
                // Refresh the list
                fetchNotifications();
            } else {
                // Handle error
                console.error("Failed to mark all notifications as read:", result.error);
            }
        });
    };

    return (
        // Panel container - positioned absolutely by the Header component
        <div className="absolute right-0 mt-2 w-80 sm:w-96 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50 flex flex-col max-h-[70vh]">
            {/* Panel Header */}
            <div className="flex justify-between items-center px-4 py-3 border-b border-gray-200 flex-shrink-0">
                <h3 className="text-base font-semibold text-gray-800 flex items-center gap-2">
                    <BellAlertIcon className="h-5 w-5 text-indigo-600" />
                    Notifications
                </h3>
                <button
                    onClick={handleMarkAllRead}
                    disabled={isPending || notifications.filter(n => !n.isRead).length === 0}
                    className="text-xs font-medium text-indigo-600 hover:text-indigo-800 disabled:text-gray-400 disabled:cursor-not-allowed"
                    title="Mark all as read"
                >
                    Mark all read
                </button>
            </div>

            {/* Notification List Area (Scrollable) */}
            <div className="flex-grow overflow-y-auto">
                {isLoading ? (
                    <p className="p-4 text-sm text-center text-gray-500">Loading...</p>
                ) : error ? (
                    <p className="p-4 text-sm text-center text-red-600">{error}</p>
                ) : notifications.length === 0 ? (
                    <div className="p-6 text-center text-gray-500">
                        <InboxIcon className="h-10 w-10 mx-auto text-gray-300 mb-2"/>
                        <p className="text-sm">No notifications yet.</p>
                    </div>
                ) : (
                    <ul role="list" className="divide-y divide-gray-100">
                        {notifications.map((notification) => (
                            <li
                                key={notification.id}
                                className={`px-4 py-3 group transition-colors duration-150 ${
                                    notification.isRead ? 'bg-white' : 'bg-indigo-50 hover:bg-indigo-100'
                                }`}
                            >
                                <div className="flex items-start justify-between gap-2">
                                    <div className="flex-1 min-w-0">
                                        {/* Message Content */}
                                        <p className={`text-sm ${notification.isRead ? 'text-gray-600' : 'text-gray-800 font-medium'}`}>
                                            {notification.message}
                                        </p>
                                        {/* Time Ago */}
                                        <p className={`mt-1 text-xs ${notification.isRead ? 'text-gray-400' : 'text-indigo-500'}`}>
                                            {timeAgo(notification.createdAt)}
                                        </p>
                                        {/* Optional Link */}
                                        {notification.link && (
                                            <Link href={notification.link} onClick={onClose} className="mt-1 text-xs font-semibold text-blue-600 hover:underline block">
                                                View Details
                                            </Link>
                                        )}
                                    </div>
                                    {/* Mark as Read Button (only if unread) */}
                                    {!notification.isRead && (
                                        <button
                                            onClick={() => handleMarkOneRead(notification.id)}
                                            disabled={isPending}
                                            className="mt-1 p-1 rounded-full text-gray-400 hover:text-green-600 hover:bg-green-100 focus:outline-none focus:ring-1 focus:ring-green-500 disabled:opacity-50 opacity-0 group-hover:opacity-100 transition-opacity"
                                            title="Mark as read"
                                        >
                                            <CheckCircleIcon className="h-4 w-4" />
                                        </button>
                                    )}
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>

            {/* Panel Footer (Optional) */}
            {/* <div className="px-4 py-2 border-t border-gray-200 bg-gray-50 text-center flex-shrink-0">
                <Link href="/notifications" onClick={onClose} className="text-sm font-medium text-indigo-600 hover:text-indigo-800">
                    View all notifications
                </Link>
            </div> */}
        </div>
    );
}
--- END FILE: src\components\ui\NotificationPanel.tsx ---

--- START FILE: src\lib\actions\approvalActions.ts ---
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../app/api/auth/[...nextauth]/route';
import prisma from '../prisma';
import { revalidatePath } from 'next/cache';
import type { ItemType } from '../../types';
import { Role, ApprovalStatus, type Prisma } from '../../generated/prisma/client';

// Helper: Get Prisma Model Delegate
function getPrismaModel(tx: Prisma.TransactionClient, itemType: ItemType) {
    const modelMap: Record<ItemType, any> = {
        academicQualification: tx.academicQualification,
        professionalLicense: tx.professionalLicense,
        workExperience: tx.workExperience,
        professionalAffiliation: tx.professionalAffiliation,
        awardRecognition: tx.awardRecognition,
        professionalDevelopment: tx.professionalDevelopment,
        communityInvolvement: tx.communityInvolvement,
        publication: tx.publication,
        conferencePresentation: tx.conferencePresentation,
    };
    const model = modelMap[itemType];
    if (!model) {
        throw new Error(`Invalid item type provided: ${itemType}`);
    }
    return model;
}

// Helper to get item title/name for notification message
function getItemDisplayTitleForNotification(item: any, itemType: ItemType): string {
    // Use optional chaining and nullish coalescing for safety
    switch (itemType) {
        case 'academicQualification': return item?.degree ?? `Qualification`;
        case 'professionalLicense': return item?.examination ?? `License`;
        case 'workExperience': return item?.position ?? `Work Experience`;
        case 'professionalAffiliation': return item?.organization ?? `Affiliation`;
        case 'awardRecognition': return item?.awardName ?? `Award/Recognition`;
        case 'professionalDevelopment': return item?.title ?? `Development`;
        case 'communityInvolvement': return item?.engagementTitle ?? `Involvement`;
        case 'publication': return item?.researchTitle ?? `Publication`;
        case 'conferencePresentation': return item?.paperTitle ?? `Presentation`;
        default: return `Item (${itemType})`;
    }
}

// --- Action: Get Pending Submissions ---
export async function getPendingSubmissions() {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized', pendingItems: [] };
    }

    try {
        const itemTypes: ItemType[] = [
            'academicQualification', 'professionalLicense', 'workExperience',
            'professionalAffiliation', 'awardRecognition', 'professionalDevelopment',
            'communityInvolvement', 'publication', 'conferencePresentation'
        ];

        let allPendingItems: any[] = [];

        for (const itemType of itemTypes) {
            const modelKey = itemType;
            const model = (prisma as any)[modelKey];

            if (model && typeof model.findMany === 'function') {
                const pending = await model.findMany({
                    where: { status: 'PENDING' },
                    include: {
                        user: { select: { id: true, name: true, email: true } }
                    },
                    orderBy: { createdAt: 'asc' }
                });
                allPendingItems = allPendingItems.concat(pending.map((item: any) => ({ ...item, itemType })));
            } else {
                console.warn(`Model or findMany not found for itemType: ${itemType}`);
            }
        }
        return { success: true, pendingItems: allPendingItems };
    } catch (error: any) {
        console.error("Error fetching pending submissions:", error);
        return { success: false, error: 'Failed to fetch pending items.', pendingItems: [] };
    }
}


// --- Action: Approve Submission ---
export async function approveSubmission(itemId: string, itemType: ItemType) {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;
    const adminName = session?.user?.name ?? session?.user?.email ?? 'Administrator';

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized' };
    }

    try {
        let facultyUserId: string | null = null;

        await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
            const model = getPrismaModel(tx, itemType);

            // Step 1: Update the item status
            const updatedItemMeta = await model.update({
                where: { id: itemId },
                data: {
                    status: ApprovalStatus.APPROVED,
                    rejectionReason: null,
                },
                // *** Select only the userId needed for revalidation/notification target ***
                select: {
                    userId: true,
                 }
            });

            if (!updatedItemMeta || !updatedItemMeta.userId) {
                // If update failed or didn't return userId, throw error to rollback
                throw new Error(`Failed to update item ${itemId} or retrieve userId.`);
            }
            facultyUserId = updatedItemMeta.userId;

            // Step 2: Fetch minimal data needed for the notification title *after* update
            // Select only the field most likely to contain the title/name
            let selectForTitle: any = { id: true }; // Always select id for safety
            switch (itemType) {
                case 'academicQualification': selectForTitle.degree = true; break;
                case 'professionalLicense': selectForTitle.examination = true; break;
                case 'workExperience': selectForTitle.position = true; break;
                case 'professionalAffiliation': selectForTitle.organization = true; break;
                case 'awardRecognition': selectForTitle.awardName = true; break;
                case 'professionalDevelopment': selectForTitle.title = true; break;
                case 'communityInvolvement': selectForTitle.engagementTitle = true; break;
                case 'publication': selectForTitle.researchTitle = true; break;
                case 'conferencePresentation': selectForTitle.paperTitle = true; break;
            }

            const itemDetailsForNotification = await model.findUnique({
                where: { id: itemId },
                select: selectForTitle,
            });

            const itemTitle = itemDetailsForNotification
                ? getItemDisplayTitleForNotification(itemDetailsForNotification, itemType)
                : `Item (${itemType})`; // Fallback title

            // Step 3: Create Notification for Faculty
            const message = `Your submission "${itemTitle}" has been approved by ${adminName}.`;
            console.log(`Creating approval notification for user ${facultyUserId}: "${message}"`);
            await tx.notification.create({
                data: {
                    userId: facultyUserId!, // facultyUserId is guaranteed to be non-null here
                    message: message,
                    link: '/profile'
                }
            });
        }); // End Transaction

        // Revalidate paths after successful transaction
        revalidatePath('/admin/approvals');
        if (facultyUserId) {
            revalidatePath(`/profile`);
        }

        console.log(`Approved ${itemType} with ID: ${itemId}`);
        return { success: true };

    } catch (error: any) {
        console.error(`Error approving ${itemType} (${itemId}):`, error);
        // Provide a more generic error message to the frontend
        return { success: false, error: `Failed to approve item. Please check server logs.` };
    }
}

// --- Action: Reject Submission ---
export async function rejectSubmission(itemId: string, itemType: ItemType, reason: string) {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;
    const adminName = session?.user?.name ?? session?.user?.email ?? 'Administrator';

    if (userRole !== 'ADMIN') { return { success: false, error: 'Unauthorized' }; }
    if (!reason || reason.trim() === '') { return { success: false, error: 'Rejection reason cannot be empty.' }; }

    try {
        let facultyUserId: string | null = null;

        await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
            const model = getPrismaModel(tx, itemType);

            // Step 1: Update the item status and reason
            const updatedItemMeta = await model.update({
                where: { id: itemId },
                data: {
                    status: ApprovalStatus.REJECTED,
                    rejectionReason: reason.trim(),
                },
                 // *** Select only the userId needed for revalidation/notification target ***
                 select: {
                    userId: true,
                 }
            });

            if (!updatedItemMeta || !updatedItemMeta.userId) {
                 throw new Error(`Failed to update item ${itemId} or retrieve userId.`);
            }
            facultyUserId = updatedItemMeta.userId;

            // Step 2: Fetch minimal data needed for the notification title *after* update
            let selectForTitle: any = { id: true };
             switch (itemType) {
                case 'academicQualification': selectForTitle.degree = true; break;
                case 'professionalLicense': selectForTitle.examination = true; break;
                case 'workExperience': selectForTitle.position = true; break;
                case 'professionalAffiliation': selectForTitle.organization = true; break;
                case 'awardRecognition': selectForTitle.awardName = true; break;
                case 'professionalDevelopment': selectForTitle.title = true; break;
                case 'communityInvolvement': selectForTitle.engagementTitle = true; break;
                case 'publication': selectForTitle.researchTitle = true; break;
                case 'conferencePresentation': selectForTitle.paperTitle = true; break;
            }
            const itemDetailsForNotification = await model.findUnique({
                where: { id: itemId },
                select: selectForTitle,
            });
            const itemTitle = itemDetailsForNotification
                ? getItemDisplayTitleForNotification(itemDetailsForNotification, itemType)
                : `Item (${itemType})`; // Fallback title


            // Step 3: Create Notification for Faculty
            const message = `Your submission "${itemTitle}" was rejected by ${adminName}. Reason: ${reason.trim()}`;
            console.log(`Creating rejection notification for user ${facultyUserId}: "${message}"`);
            await tx.notification.create({
                data: {
                    userId: facultyUserId!, // facultyUserId is guaranteed to be non-null here
                    message: message,
                    link: '/profile'
                }
            });
        }); // End Transaction

        // Revalidate paths after successful transaction
        revalidatePath('/admin/approvals');
        if (facultyUserId) {
            revalidatePath(`/profile`);
        }

        console.log(`Rejected ${itemType} with ID: ${itemId}`);
        return { success: true };

    } catch (error: any) {
        console.error(`Error rejecting ${itemType} (${itemId}):`, error);
        return { success: false, error: `Failed to reject item. Please check server logs.` };
    }
}
--- END FILE: src\lib\actions\approvalActions.ts ---

--- START FILE: src\lib\actions\authActions.ts ---
// Action: Modify src/lib/actions/authActions.ts

'use server';

import prisma from '@/lib/prisma';
import crypto from 'crypto'; // For generating secure random tokens
import bcrypt from 'bcrypt'; // For hashing the token AND new password
import { z } from 'zod'; // For input validation
import { revalidatePath } from 'next/cache'; // May not be strictly needed here, but good practice

// --- Request Reset Types/Action (Keep existing) ---
interface RequestPasswordResetResponse {
    success: boolean;
    message: string;
}
const EmailSchema = z.string().email({ message: "Invalid email address." });
export async function requestPasswordReset(formData: FormData): Promise<RequestPasswordResetResponse> {
    const emailValue = formData.get('email');
    const validationResult = EmailSchema.safeParse(emailValue);
    if (!validationResult.success) {
        console.warn("Password reset attempt with invalid email format:", emailValue);
        return { success: true, message: "If an account with that email exists, a password reset link has been sent." };
    }
    const email = validationResult.data.toLowerCase().trim();
    console.log(`Password reset requested for email: ${email}`);
    try {
        const user = await prisma.user.findUnique({
            where: { email: email },
            select: { id: true }
        });
        if (user) {
            console.log(`User found with ID: ${user.id}. Proceeding with token generation.`);
            const resetToken = crypto.randomBytes(32).toString('hex');
            const saltRounds = 10;
            const hashedToken = await bcrypt.hash(resetToken, saltRounds);
            const expires = new Date(Date.now() + 3600 * 1000); // 1 hour
            await prisma.$transaction([
                prisma.passwordResetToken.deleteMany({ where: { userId: user.id } }),
                prisma.passwordResetToken.create({
                    data: { userId: user.id, token: hashedToken, expires: expires }
                })
            ]);
            console.log(`Stored hashed password reset token for user ${user.id}. Expiration: ${expires.toISOString()}`);
            const resetLink = `${process.env.NEXTAUTH_URL}/reset-password?token=${resetToken}`;
            console.log("--------------------------------------------------");
            console.log("--- SIMULATED EMAIL ---");
            console.log(`To: ${email}`);
            console.log(`Subject: Reset Your SMLS-SFMS Password`);
            console.log(`Body: Click the link below to reset your password:\n${resetLink}`);
            console.log(`(Unhashed Token for link: ${resetToken})`);
            console.log("--------------------------------------------------");
        } else {
            console.log(`Password reset requested for non-existent email: ${email}. No action taken.`);
        }
        return { success: true, message: "If an account with that email exists, a password reset link has been sent." };
    } catch (error: any) {
        console.error("Error during password reset request:", error);
        return { success: false, message: "An error occurred while processing your request. Please try again later." };
    }
}


// --- *** NEW: Perform Password Reset Action *** ---

// Define the expected shape of the response
interface PerformPasswordResetResponse {
    success: boolean;
    message: string; // User-facing message
}

// Define a schema for the reset form data validation using Zod
const ResetPasswordSchema = z.object({
    token: z.string().min(1, { message: "Token is required." }),
    password: z.string().min(8, { message: "Password must be at least 8 characters long." }),
    confirmPassword: z.string()
}).refine(data => data.password === data.confirmPassword, {
    message: "Passwords do not match.",
    path: ["confirmPassword"], // Point error to the confirmation field
});

export async function performPasswordReset(formData: FormData): Promise<PerformPasswordResetResponse> {
    const rawFormData = {
        token: formData.get('token'),
        password: formData.get('password'),
        confirmPassword: formData.get('confirmPassword'),
    };

    // 1. Validate Form Input
    const validationResult = ResetPasswordSchema.safeParse(rawFormData);
    if (!validationResult.success) {
        // Combine multiple errors if necessary, or just take the first one
        const firstError = validationResult.error.errors[0]?.message || "Invalid input.";
        console.warn("Password reset validation failed:", validationResult.error.flatten());
        return { success: false, message: firstError };
    }

    const { token, password } = validationResult.data;
    console.log(`Attempting password reset with token (first 8 chars): ${token.substring(0, 8)}...`);

    try {
        // 2. Find the corresponding HASHED token in the database
        // We need to iterate through potential tokens or use a more direct lookup if possible.
        // Since we stored the HASHED token, we cannot directly query `where: { token: hashedToken }`
        // because bcrypt generates a different hash each time even for the same input.
        // The standard secure approach is:
        // a) Hash the token from the URL *before* storing it. (We did this in requestPasswordReset)
        // b) Find the token record by its *hashed* value.

        // Let's re-evaluate: We stored the HASHED token. The URL contains the UNHASHED token.
        // We CANNOT efficiently find the DB record using the unhashed token.
        // The CORRECT secure flow is usually:
        //   - Store HASHED token in DB.
        //   - Send UNHASHED token in URL.
        //   - When user submits: Hash the token from URL AGAIN, then find the DB record matching this NEW HASH.
        // This seems counter-intuitive but prevents timing attacks.
        // HOWEVER, bcrypt salts hashes, meaning hashing the same token twice yields DIFFERENT hashes.
        // THEREFORE, the standard secure method is actually:
        //   - Generate token. Store HASHED token in DB. Send UNHASHED token in URL.
        //   - When user submits: Find the potential DB token record(s) by USER ID (if possible, or other non-secret identifier).
        //   - Use `bcrypt.compare(unhashedTokenFromUrl, hashedTokenFromDb)` to verify.

        // Let's adjust the logic: We can't easily find the token by its value.
        // A common workaround (less ideal than finding by user ID if the token page required login)
        // is to fetch recent, unexpired tokens and compare. This is inefficient.

        // *** A BETTER APPROACH (REQUIRING SCHEMA CHANGE which we already did): ***
        // Find the token record by the *hashed* token value. We need to hash the incoming token first.
        // THIS IS WRONG - bcrypt compare is needed.

        // *** CORRECTED APPROACH: Find token records and compare ***
        // This is still inefficient if many tokens exist. A better real-world solution
        // might involve linking the token request to a session or adding a non-secret identifier.
        // For this implementation, let's fetch recent tokens and compare.

        const potentialTokens = await prisma.passwordResetToken.findMany({
            where: {
                expires: { gt: new Date() } // Only consider non-expired tokens
            },
            include: { user: { select: { id: true } } } // Include user ID
        });

        let validTokenRecord = null;
        for (const dbToken of potentialTokens) {
            const isValid = await bcrypt.compare(token, dbToken.token);
            if (isValid) {
                validTokenRecord = dbToken;
                break; // Found the matching token
            }
        }

        // 3. Validate Token Existence and Expiry
        if (!validTokenRecord) {
            console.log("Password reset failed: Token not found or expired/invalid.");
            return { success: false, message: "Invalid or expired password reset link." };
        }

        // Check expiry again just in case (though the query should handle it)
        if (new Date() > validTokenRecord.expires) {
            console.log(`Password reset failed: Token expired at ${validTokenRecord.expires.toISOString()}`);
             // Clean up expired token (optional, could run a cron job)
             await prisma.passwordResetToken.delete({ where: { id: validTokenRecord.id } });
            return { success: false, message: "Password reset link has expired." };
        }

        const userId = validTokenRecord.userId;
        console.log(`Valid token found for user ID: ${userId}. Proceeding to update password.`);

        // 4. Hash the New Password
        const saltRounds = 10;
        const hashedNewPassword = await bcrypt.hash(password, saltRounds);

        // 5. Update User Password and Delete Token (Transaction)
        await prisma.$transaction([
            // Update user's password
            prisma.user.update({
                where: { id: userId },
                data: { password: hashedNewPassword }
            }),
            // Delete the used reset token
            prisma.passwordResetToken.delete({
                where: { id: validTokenRecord.id }
            })
        ]);

        console.log(`Successfully reset password for user ID: ${userId} and deleted token.`);

        // 6. Return Success
        return { success: true, message: "Password has been reset successfully." };

    } catch (error: any) {
        console.error("Error during password reset execution:", error);
        // Handle potential errors like user deletion between token validation and update
        if (error.code === 'P2025') { // Record not found during update/delete
             return { success: false, message: "User not found or token already used." };
        }
        return { success: false, message: "An error occurred while resetting your password. Please try again." };
    }
}
// --- *** END: Perform Password Reset Action *** ---
--- END FILE: src\lib\actions\authActions.ts ---

--- START FILE: src\lib\actions\dashboardActions.ts ---
// Action: Modify src/lib/actions/dashboardActions.ts

'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { Role } from '@/generated/prisma'; // Import Role enum
// Import the centralized types, including the renamed response type for the matrix
import type { GetMatrixDataResponse, FacultyLinkedSpecialization } from '@/types'; // Ensure GetMatrixDataResponse is imported

// --- Get Faculty Specialization Data (Uses Links) ---
// This action now fetches explicitly linked specializations for the matrix display
// AND fetches all defined specialization names for consistent headers.
export async function getFacultySpecializationData(): Promise<GetMatrixDataResponse> { // <-- Use the renamed type here
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization Check
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Fetching linked specialization data and all specialization names for matrix...");

    try {
        // 2. Fetch all Faculty Users and include their linked Specializations
        const facultyUsersPromise = prisma.user.findMany({
            where: {
                role: Role.FACULTY,
            },
            include: {
                specializations: {
                    select: { name: true },
                    orderBy: { name: 'asc' }
                }
            },
            orderBy: { name: 'asc' }
        });

        // *** ADDED: Fetch all defined specialization names ***
        const allSpecializationsPromise = prisma.specialization.findMany({
            select: { name: true },
            orderBy: { name: 'asc' }
        });
        // *** END ADDED ***

        // 3. Execute queries concurrently
        const [facultyUsers, allDbSpecializations] = await Promise.all([
            facultyUsersPromise,
            allSpecializationsPromise
        ]);

        const allSpecializationNames = allDbSpecializations.map(spec => spec.name);

        console.log(`Found ${facultyUsers.length} faculty users and ${allSpecializationNames.length} total specializations.`);

        // 4. Process faculty data into the desired structure
        const specializationData: FacultyLinkedSpecialization[] = facultyUsers.map(user => {
            const linkedNames = user.specializations.map(spec => spec.name).sort((a, b) => a.localeCompare(b));
            return {
                userId: user.id,
                name: user.name,
                email: user.email,
                linkedSpecializationNames: linkedNames,
            };
        });

        console.log("Successfully processed linked specialization data.");
        // *** MODIFIED: Return both faculty data and all specialization names ***
        return {
            success: true,
            data: specializationData,
            allSpecializationNames: allSpecializationNames // Include the list here
        };
        // *** END MODIFICATION ***

    } catch (error: any) {
        console.error("Error fetching matrix data:", error);
        // *** MODIFIED: Ensure error response structure matches interface ***
        return {
            success: false,
            error: `Failed to get matrix data. ${error.message}`,
            data: undefined, // Explicitly set to undefined on error
            allSpecializationNames: undefined // Explicitly set to undefined on error
        };
        // *** END MODIFICATION ***
    }
}

// --- Get Admin Dashboard Stats ---
interface AdminDashboardStats {
    totalFaculty: number;
    pendingApprovals: number;
}

interface GetAdminDashboardStatsResponse {
    success: boolean;
    stats?: AdminDashboardStats;
    error?: string;
}

export async function getAdminDashboardStats(): Promise<GetAdminDashboardStatsResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Fetching admin dashboard stats...");

    try {
        // 2. Count Faculty Users
        const facultyCount = await prisma.user.count({
            where: { role: Role.FACULTY },
        });

        // 3. Count Pending Submissions (Iterate through relevant models)
        let pendingCount = 0;
        const modelsToCheck: (keyof typeof prisma)[] = [
            'academicQualification', 'professionalLicense', 'workExperience',
            'professionalAffiliation', 'awardRecognition', 'professionalDevelopment',
            'communityInvolvement', 'publication', 'conferencePresentation'
        ];

        for (const modelName of modelsToCheck) {
            // Type assertion needed as prisma client type doesn't directly support indexed access with string keys well
            const model = prisma[modelName] as any;
            if (model && typeof model.count === 'function') {
                const count = await model.count({
                    where: { status: 'PENDING' },
                });
                pendingCount += count;
            } else {
                 console.warn(`Model or count function not found for: ${String(modelName)} while calculating pending stats.`);
            }
        }

        console.log(`Dashboard Stats - Faculty: ${facultyCount}, Pending: ${pendingCount}`);

        // 4. Return Stats
        return {
            success: true,
            stats: {
                totalFaculty: facultyCount,
                pendingApprovals: pendingCount,
            },
        };

    } catch (error: any) {
        console.error("Error fetching admin dashboard stats:", error);
        return { success: false, error: 'Failed to fetch dashboard statistics.' };
    }
}

// --- *** NEW: Generate Matrix CSV Data *** ---
interface GenerateMatrixCsvResponse {
    success: boolean;
    csvData?: string;
    error?: string;
}

// Helper function to safely quote CSV fields if needed
function escapeCsvField(field: string | null | undefined): string {
    const str = String(field ?? ''); // Convert null/undefined to empty string
    // Quote if it contains comma, double quote, or newline
    if (str.includes(',') || str.includes('"') || str.includes('\n') || str.includes('\r')) {
        // Escape existing double quotes by doubling them, then wrap in double quotes
        return `"${str.replace(/"/g, '""')}"`;
    }
    return str; // Return as is if no special characters
}


export async function generateMatrixCsv(): Promise<GenerateMatrixCsvResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Generating CSV data for specialization matrix...");

    try {
        // 2. Fetch necessary data (reuse or adapt logic from getFacultySpecializationData)
        // Fetch all faculty with their linked specializations
        const facultyUsers = await prisma.user.findMany({
            where: { role: Role.FACULTY },
            include: {
                specializations: {
                    select: { name: true }, // Only need names
                    orderBy: { name: 'asc' }
                }
            },
            orderBy: { name: 'asc' }
        });

        // Fetch all unique specialization names to build headers consistently
        const allDbSpecializations = await prisma.specialization.findMany({
            select: { name: true },
            orderBy: { name: 'asc' }
        });
        const allSpecializationNames = allDbSpecializations.map(spec => spec.name);

        // 3. Build CSV Header
        const header = [
            "Faculty Name",
            "Email",
            ...allSpecializationNames.map(escapeCsvField) // Escape header names too
        ].join(',');

        // 4. Build CSV Data Rows
        const dataRows = facultyUsers.map(user => {
            const linkedSpecsSet = new Set(user.specializations.map(spec => spec.name));
            const row = [
                escapeCsvField(user.name),
                escapeCsvField(user.email),
                // For each known specialization, mark 'X' if the user has it linked
                ...allSpecializationNames.map(specName =>
                    linkedSpecsSet.has(specName) ? '"X"' : '""' // Use "X" or empty quoted string
                )
            ];
            return row.join(',');
        });

        // 5. Combine Header and Rows
        const csvData = [header, ...dataRows].join('\n');

        console.log("Successfully generated CSV data.");
        return { success: true, csvData: csvData };

    } catch (error: any) {
        console.error("Error generating matrix CSV data:", error);
        return { success: false, error: `Failed to generate CSV data. ${error.message}` };
    }
}
// --- *** END: Generate Matrix CSV Data *** ---
--- END FILE: src\lib\actions\dashboardActions.ts ---

--- START FILE: src\lib\actions\facultyActions.ts ---
// src/lib/actions/facultyActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { Role, // Import Role enum
         // Import Prisma types for the return value definition
         User, AcademicQualification, ProfessionalLicense, WorkExperience,
         ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment, Specialization,
         CommunityInvolvement, Publication, ConferencePresentation
       } from '@/generated/prisma';
import bcrypt from 'bcrypt';

// --- Action: Get All Faculty Users ---
export async function getAllFaculty() {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized', faculty: [] };
    }

    try {
        const facultyUsers = await prisma.user.findMany({
            where: {
                role: Role.FACULTY, // Use the Role enum
            },
            select: {
                id: true,
                name: true,
                email: true,
                createdAt: true, // Include creation date for potential sorting/display
            },
            orderBy: {
                name: 'asc', // Order alphabetically by name
            },
        });

        return { success: true, faculty: facultyUsers };

    } catch (error: any) {
        console.error("Error fetching faculty list:", error);
        return { success: false, error: 'Failed to fetch faculty list.', faculty: [] };
    }
}

// --- Get Faculty Profile By ID ---
interface FacultyProfileData {
    user: {
        id: string;
        name: string | null;
        email: string | null;
        role: Role | null; // Use Role enum
        createdAt: Date; // Include createdAt for context
        // Add the specializations array here
        specializations: Specialization[]; // Keep this raw data
    };
    suggestedTeachingAreas: string[]; // Array of specialization names
    academicQualifications: AcademicQualification[];
    professionalLicenses: ProfessionalLicense[];
    workExperiences: WorkExperience[];
    professionalAffiliations: ProfessionalAffiliation[];
    awardsRecognitions: AwardRecognition[];
    professionalDevelopments: ProfessionalDevelopment[];
    communityInvolvements: CommunityInvolvement[];
    publications: Publication[];
    conferencePresentations: ConferencePresentation[];
}

interface GetFacultyProfileResponse {
    success: boolean;
    facultyProfile?: FacultyProfileData;
    error?: string;
}

export async function getFacultyProfileById(facultyId: string): Promise<GetFacultyProfileResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization Check: Ensure the caller is an Admin
    if (userRole !== Role.ADMIN) { // Use Role enum
        console.warn(`Unauthorized attempt to fetch faculty profile by non-admin. User role: ${userRole}`);
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Input Validation: Ensure facultyId is provided
    if (!facultyId || typeof facultyId !== 'string') {
        console.error('getFacultyProfileById called without a valid facultyId.');
        return { success: false, error: 'Invalid Faculty ID provided.' };
    }

    console.log(`Admin fetching profile (including specializations for suggestions) for faculty ID: ${facultyId}`);

    try {
        // 3. Database Query: Fetch the user and all related profile data
        const facultyUser = await prisma.user.findUnique({
            where: {
                id: facultyId,
                // Optional: Ensure we only fetch users with the FACULTY role
                // role: Role.FACULTY,
            },
            include: {
                // --- Ensure specializations is included ---
                specializations: { // Fetch linked specializations
                    orderBy: { name: 'asc' } // Order them alphabetically
                },
                // Include all the relations, similar to getMyProfileData
                academicQualifications: { orderBy: { yearCompleted: 'desc' } },
                professionalLicenses: { orderBy: { expiration: 'desc' } },
                workExperiences: { orderBy: { createdAt: 'desc' } }, // Consider ordering by inclusiveYears if possible/needed
                professionalAffiliations: { orderBy: { createdAt: 'desc' } },
                awardsRecognitions: { orderBy: { yearReceived: 'desc' } },
                professionalDevelopments: { orderBy: { createdAt: 'desc' } }, // Consider ordering by dateLocation if possible/needed
                communityInvolvements: { orderBy: { createdAt: 'desc' } }, // Consider ordering by locationDate if possible/needed
                publications: { orderBy: { datePublished: 'desc' } },
                conferencePresentations: { orderBy: { createdAt: 'desc' } }, // Consider ordering by dateLocation if possible/needed
            },
        });

        // 4. Handle Not Found
        if (!facultyUser) {
            console.warn(`Faculty profile not found for ID: ${facultyId}`);
            return { success: false, error: 'Faculty member not found.' };
        }

        // Optional: Check if the found user is actually faculty, if strictness is needed
        // if (facultyUser.role !== Role.FACULTY) {
        //     console.warn(`User found with ID ${facultyId}, but is not a FACULTY member (Role: ${facultyUser.role}).`);
        //     return { success: false, error: 'Specified user is not a faculty member.' };
        // }

        // --- *** MODIFY Structuring the Response *** ---
        // Extract specialization names for the suggestions
        const specializationNames = (facultyUser.specializations ?? []).map(spec => spec.name);

        // 5. Structure and Return Success Response
        const profileData: FacultyProfileData = {
            user: {
                id: facultyUser.id,
                name: facultyUser.name,
                email: facultyUser.email,
                role: facultyUser.role,
                createdAt: facultyUser.createdAt,
                specializations: facultyUser.specializations ?? [], // Keep original data if needed elsewhere
            },
            // --- POPULATE THE NEW FIELD ---
            suggestedTeachingAreas: specializationNames,
            // --- END POPULATE ---
            // Use nullish coalescing to ensure arrays are always returned
            academicQualifications: facultyUser.academicQualifications ?? [],
            professionalLicenses: facultyUser.professionalLicenses ?? [],
            workExperiences: facultyUser.workExperiences ?? [],
            professionalAffiliations: facultyUser.professionalAffiliations ?? [],
            awardsRecognitions: facultyUser.awardsRecognitions ?? [],
            professionalDevelopments: facultyUser.professionalDevelopments ?? [],
            communityInvolvements: facultyUser.communityInvolvements ?? [],
            publications: facultyUser.publications ?? [],
            conferencePresentations: facultyUser.conferencePresentations ?? [],
        };
        // --- *** END MODIFICATION *** ---

        console.log(`Successfully fetched profile for faculty: ${facultyUser.email}, Suggested Areas: ${specializationNames.join(', ')}`);
        return { success: true, facultyProfile: profileData };

    } catch (error: any) {
        // 6. Handle Errors
        console.error(`Error fetching faculty profile for ID ${facultyId}:`, error);
        return { success: false, error: `Failed to fetch faculty profile. ${error.message}` };
    }
}

// --- Create Faculty User ---
interface CreateFacultyResponse {
    success: boolean;
    error?: string;
    user?: { id: string; email: string | null }; // Return basic info of created user
}

export async function createFacultyUser(formData: FormData): Promise<CreateFacultyResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization Check
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Extract Data from FormData
    const name = formData.get('name') as string | null; // Name is optional initially
    const email = formData.get('email') as string | null;
    const password = formData.get('password') as string | null;

    // 3. Basic Input Validation
    if (!email || typeof email !== 'string') {
        return { success: false, error: 'Email is required and must be a string.' };
    }
    if (!password || typeof password !== 'string') {
        return { success: false, error: 'Password is required and must be a string.' };
    }
    // Basic email format check
    if (!/\S+@\S+\.\S+/.test(email)) {
        return { success: false, error: 'Invalid email format.' };
    }
    // Basic password length check (adjust as needed)
    if (password.length < 8) {
        return { success: false, error: 'Password must be at least 8 characters long.' };
    }
    // Optional: Validate name if provided
    if (name && typeof name !== 'string') {
         return { success: false, error: 'Name must be a string if provided.' };
    }


    try {
        // 4. Check if email already exists
        const existingUser = await prisma.user.findUnique({
            where: { email: email },
        });
        if (existingUser) {
            return { success: false, error: 'Email address is already in use.' };
        }

        // 5. Hash the password
        const saltRounds = 10; // Standard practice
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        // 6. Create User in Database
        const newUser = await prisma.user.create({
            data: {
                name: name?.trim() || null, // Store trimmed name or null
                email: email.toLowerCase().trim(), // Store lowercase, trimmed email
                password: hashedPassword,
                role: Role.FACULTY, // Assign the FACULTY role
                // emailVerified: null, // Set if you implement email verification later
            },
            select: { // Only select necessary fields to return
                id: true,
                email: true,
            }
        });

        console.log(`Admin created new faculty user: ${newUser.email} (ID: ${newUser.id})`);

        // 7. Revalidate Path to update the faculty list page
        revalidatePath('/admin/faculty');

        // 8. Return Success Response
        return { success: true, user: newUser };

    } catch (error: any) {
        // 9. Handle Errors (e.g., database connection issues)
        console.error("Error creating faculty user:", error);
        // Avoid exposing detailed database errors to the client
        if (error.code === 'P2002') { // Prisma unique constraint violation code
             return { success: false, error: 'Email address is already in use.' };
        }
        return { success: false, error: `Failed to create faculty user. ${error.message}` };
    }
}

// --- Delete Faculty User ---
interface DeleteUserResponse {
    success: boolean;
    error?: string;
}

export async function deleteFacultyUser(facultyId: string): Promise<DeleteUserResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;
    const currentUserId = (session?.user as any)?.id; // Get current admin's ID

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Validation
    if (!facultyId || typeof facultyId !== 'string') {
        return { success: false, error: 'Faculty ID is missing or invalid.' };
    }

    // 3. Prevent Self-Deletion
    if (facultyId === currentUserId) {
        return { success: false, error: 'Administrators cannot delete their own account.' };
    }

    console.log(`Admin (ID: ${currentUserId}) attempting to delete faculty user ID: ${facultyId}`);

    try {
        // 4. Verify the user exists and is indeed a Faculty member (optional but good practice)
        const userToDelete = await prisma.user.findUnique({
            where: { id: facultyId },
            select: { role: true, email: true } // Select only needed fields for check
        });

        if (!userToDelete) {
            // User already deleted or never existed
            console.warn(`Attempted to delete non-existent user ID: ${facultyId}. Assuming success.`);
            revalidatePath('/admin/faculty'); // Revalidate list anyway
            return { success: true };
        }

        // Optional: Strict check to prevent deleting non-faculty users via this action
        // if (userToDelete.role !== Role.FACULTY) {
        //     return { success: false, error: 'Specified user is not a faculty member.' };
        // }

        // 5. Delete the User
        // Prisma's `onDelete: Cascade` in the schema for relations on the User model
        // (like AcademicQualification, ProfessionalLicense, etc.) will automatically
        // delete all associated CV records when the user is deleted.
        // The many-to-many link with Specialization will also be removed.
        await prisma.user.delete({
            where: { id: facultyId },
        });

        console.log(`Successfully deleted user ID: ${facultyId} (Email: ${userToDelete.email})`);

        // 6. Revalidate the faculty list path
        revalidatePath('/admin/faculty');

        // 7. Return Success
        return { success: true };

    } catch (error: any) {
        console.error(`Error deleting user ${facultyId}:`, error);
        if (error.code === 'P2025') { // Record to delete not found (already handled above, but good fallback)
            console.warn(`Record not found during deletion attempt for user ID: ${facultyId}. Assuming success.`);
            revalidatePath('/admin/faculty');
            return { success: true };
        }
        // Avoid exposing detailed errors
        return { success: false, error: 'Failed to delete faculty user.' };
    }
}

// --- Link Specialization to Faculty ---
interface LinkResponse {
    success: boolean;
    error?: string;
}

export async function linkSpecializationToFaculty(facultyId: string, specializationId: string): Promise<LinkResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Validation
    if (!facultyId || !specializationId) {
        return { success: false, error: 'Faculty ID and Specialization ID are required.' };
    }

    console.log(`Admin linking Specialization ${specializationId} to Faculty ${facultyId}`);

    try {
        // 3. Database Update using connect
        await prisma.user.update({
            where: { id: facultyId },
            data: {
                specializations: {
                    connect: { // Use 'connect' for many-to-many
                        id: specializationId
                    }
                }
            },
        });

        console.log(`Successfully linked Specialization ${specializationId} to Faculty ${facultyId}`);

        // 4. Revalidate relevant paths (faculty profile page)
        revalidatePath(`/admin/faculty/${facultyId}`);
        revalidatePath('/admin/matrix'); // Matrix data might change

        return { success: true };

    } catch (error: any) {
        console.error(`Error linking specialization ${specializationId} to faculty ${facultyId}:`, error);
        // Handle specific errors like record not found if needed
        if (error.code === 'P2025') { // Record to update not found
             return { success: false, error: 'Faculty member or Specialization not found.' };
        }
        if (error.code === 'P2016') { // Relation violation (might happen if already connected)
             console.warn(`Attempted to link already linked specialization ${specializationId} to faculty ${facultyId}. Assuming success.`);
             return { success: true }; // Treat as success if already linked
        }
        return { success: false, error: `Failed to link specialization. ${error.message}` };
    }
}

// --- Unlink Specialization from Faculty ---
export async function unlinkSpecializationFromFaculty(facultyId: string, specializationId: string): Promise<LinkResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Validation
    if (!facultyId || !specializationId) {
        return { success: false, error: 'Faculty ID and Specialization ID are required.' };
    }

    console.log(`Admin unlinking Specialization ${specializationId} from Faculty ${facultyId}`);

    try {
        // 3. Database Update using disconnect
        await prisma.user.update({
            where: { id: facultyId },
            data: {
                specializations: {
                    disconnect: { // Use 'disconnect' for many-to-many
                        id: specializationId
                    }
                }
            },
        });

        console.log(`Successfully unlinked Specialization ${specializationId} from Faculty ${facultyId}`);

        // 4. Revalidate relevant paths
        revalidatePath(`/admin/faculty/${facultyId}`);
        revalidatePath('/admin/matrix');

        return { success: true };

    } catch (error: any) {
        console.error(`Error unlinking specialization ${specializationId} from faculty ${facultyId}:`, error);
         if (error.code === 'P2025') { // Record to update not found or relation doesn't exist
             console.warn(`Attempted to unlink non-existent link between specialization ${specializationId} and faculty ${facultyId}. Assuming success.`);
             return { success: true }; // Treat as success if already unlinked or records don't exist
         }
        return { success: false, error: `Failed to unlink specialization. ${error.message}` };
    }
}
// --- *** NEW ACTION: Update Faculty Name *** ---
interface UpdateFacultyNameResponse {
    success: boolean;
    user?: { id: string; name: string | null }; // Return updated basic info
    error?: string;
}

export async function updateFacultyName(formData: FormData): Promise<UpdateFacultyNameResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Extract Data
    const facultyId = formData.get('facultyId') as string | null;
    const newName = formData.get('name') as string | null;

    // 3. Validation
    if (!facultyId || typeof facultyId !== 'string') {
        return { success: false, error: 'Faculty ID is missing or invalid.' };
    }
    // Name can be empty string or null, but should be treated as null if empty
    const trimmedName = newName?.trim() || null;
     if (trimmedName && trimmedName.length > 255) { // Example length limit
         return { success: false, error: 'Name is too long.' };
     }

    console.log(`Admin attempting to update name for faculty ID: ${facultyId} to "${trimmedName}"`);

    try {
        // 4. Update in Database
        const updatedUser = await prisma.user.update({
            where: { id: facultyId },
            data: {
                name: trimmedName, // Update the name field
            },
            select: { // Select fields to return
                id: true,
                name: true,
            }
        });

        console.log(`Successfully updated name for user ID: ${updatedUser.id}`);

        // 5. Revalidate Paths
        revalidatePath(`/admin/faculty`); // Update the list view
        revalidatePath(`/admin/faculty/${facultyId}`); // Update the detail view

        // 6. Return Success
        return { success: true, user: updatedUser };

    } catch (error: any) {
        console.error(`Error updating name for faculty ${facultyId}:`, error);
        if (error.code === 'P2025') { // Record to update not found
            return { success: false, error: 'Faculty member not found.' };
        }
        return { success: false, error: 'Failed to update faculty name.' };
    }
}
// --- *** END Update Faculty Name ACTION *** ---
--- END FILE: src\lib\actions\facultyActions.ts ---

--- START FILE: src\lib\actions\notificationActions.ts ---
// src/lib/actions/notificationActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../app/api/auth/[...nextauth]/route';
import prisma from '../prisma';
import { revalidatePath } from 'next/cache';
import type { Notification } from '../../generated/prisma/client';

// --- Get Notifications for Current User ---
interface GetNotificationsResponse {
    success: boolean;
    notifications?: Notification[];
    unreadCount?: number; // Optionally return the count directly
    error?: string;
}

export async function getMyNotifications(): Promise<GetNotificationsResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        return { success: false, error: 'Not authenticated' };
    }

    try {
        const notifications = await prisma.notification.findMany({
            where: {
                userId: userId,
            },
            orderBy: {
                createdAt: 'desc', // Show newest first
            },
            take: 20, // Limit the number of notifications fetched initially
        });

        // Calculate unread count separately or from the fetched list
        const unreadCount = await prisma.notification.count({
            where: {
                userId: userId,
                isRead: false,
            },
        });

        return { success: true, notifications: notifications, unreadCount: unreadCount };

    } catch (error: any) {
        console.error("Error fetching notifications:", error);
        return { success: false, error: 'Failed to fetch notifications.' };
    }
}

// --- Mark a Single Notification as Read ---
interface MarkReadResponse {
    success: boolean;
    error?: string;
}

export async function markNotificationAsRead(notificationId: string): Promise<MarkReadResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        return { success: false, error: 'Not authenticated' };
    }
    if (!notificationId) {
        return { success: false, error: 'Notification ID is required.' };
    }

    try {
        // IMPORTANT: Update only if the notification belongs to the current user
        const result = await prisma.notification.updateMany({
            where: {
                id: notificationId,
                userId: userId, // Ensure user owns the notification
                isRead: false,   // Only update if it's currently unread
            },
            data: {
                isRead: true,
            },
        });

        if (result.count === 0) {
            // This could mean the notification didn't exist, wasn't owned by the user,
            // or was already read. We don't treat this as a hard error usually.
            console.log(`Notification ${notificationId} not updated (possibly already read or not found/owned).`);
        } else {
             console.log(`Marked notification ${notificationId} as read for user ${userId}.`);
             // Revalidate paths that might display the unread count or notification list
             // Revalidating the header path might be tricky, might need client-side update instead
             // revalidatePath('/'); // Example - adjust as needed
        }

        return { success: true };

    } catch (error: any) {
        console.error(`Error marking notification ${notificationId} as read:`, error);
        return { success: false, error: 'Failed to mark notification as read.' };
    }
}


// --- Mark All Notifications as Read ---
export async function markAllNotificationsAsRead(): Promise<MarkReadResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        return { success: false, error: 'Not authenticated' };
    }

    try {
        const result = await prisma.notification.updateMany({
            where: {
                userId: userId,
                isRead: false, // Only target unread notifications
            },
            data: {
                isRead: true,
            },
        });

        console.log(`Marked ${result.count} notifications as read for user ${userId}.`);
        // Revalidate paths if needed
        // revalidatePath('/'); // Example

        return { success: true };

    } catch (error: any) {
        console.error(`Error marking all notifications as read for user ${userId}:`, error);
        return { success: false, error: 'Failed to mark all notifications as read.' };
    }
}
--- END FILE: src\lib\actions\notificationActions.ts ---

--- START FILE: src\lib\actions\specializationActions.ts ---
// src/lib/actions/specializationActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { Role, Specialization } from '@/generated/prisma'; // Import Role enum and Specialization type

// --- Create Specialization ---
interface CreateSpecializationResponse {
    success: boolean;
    specialization?: Specialization; // Return the created specialization
    error?: string;
}

export async function createSpecialization(formData: FormData): Promise<CreateSpecializationResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization Check
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Extract Data
    const name = formData.get('name') as string | null;
    const description = formData.get('description') as string | null; // Optional

    // 3. Validation
    if (!name || typeof name !== 'string' || name.trim().length === 0) {
        return { success: false, error: 'Specialization name is required.' };
    }
    if (description && typeof description !== 'string') {
        // Should not happen with standard form data, but good practice
        return { success: false, error: 'Description must be a string if provided.' };
    }

    const trimmedName = name.trim();
    const trimmedDescription = description?.trim() || null; // Store null if empty/whitespace

    console.log(`Admin attempting to create specialization: "${trimmedName}"`);

    try {
        // --- MODIFIED DUPLICATE CHECK ---
        // 4. Fetch potential matches based on name (case-sensitive by default in SQLite via Prisma)
        // We fetch any specialization to compare names manually later.
        const potentialMatches = await prisma.specialization.findMany({
            where: {
                 // We can't use mode: 'insensitive' with SQLite directly here.
                 // A simple 'equals' might miss case variations.
                 // Fetching based on a broader filter or just fetching all and filtering in code
                 // might be necessary if strict case-insensitivity is required before creation.
                 // For simplicity now, let's check for an exact match first.
                 // A better approach might be to fetch all and filter below.
                 name: trimmedName // Check exact match first
            }
         });

        // If an exact match exists, error out immediately
        if (potentialMatches.length > 0) {
             console.warn(`Specialization with the exact name "${trimmedName}" already exists.`);
             return { success: false, error: `Specialization "${trimmedName}" already exists.` };
        }

        // Optional: If you need strict case-insensitive check *before* creating,
        // you might need to fetch all specializations and check in code.
        // This can be inefficient for many specializations.
        /*
        const allSpecs = await prisma.specialization.findMany({ select: { name: true } });
        const existingSpec = allSpecs.find(spec => spec.name.toLowerCase() === trimmedName.toLowerCase());
        if (existingSpec) {
             console.warn(`Specialization with name "${trimmedName}" (case-insensitive) already exists.`);
            return { success: false, error: `Specialization "${trimmedName}" already exists.` };
        }
        */
        // For now, we rely on the database's unique constraint (which IS case-sensitive in SQLite)
        // and the exact match check above.

        // 5. Create in Database
        const newSpecialization = await prisma.specialization.create({
            data: {
                name: trimmedName,
                description: trimmedDescription,
            },
        });
        // --- END MODIFIED DUPLICATE CHECK ---

        console.log(`Successfully created specialization: ${newSpecialization.name} (ID: ${newSpecialization.id})`);

        // 6. Revalidate the path for the specializations list page
        revalidatePath('/admin/specializations');

        // 7. Return Success
        return { success: true, specialization: newSpecialization };

    } catch (error: any) {
        console.error("Error creating specialization:", error);
         // Catch unique constraint violation (case-sensitive in SQLite)
         if (error.code === 'P2002' && error.meta?.target?.includes('name')) {
             // Catch unique constraint violation specifically on 'name'
             return { success: false, error: `Specialization "${trimmedName}" already exists.` };
         }
        return { success: false, error: `Failed to create specialization. ${error.message}` };
    }
}

// --- Get All Specializations ---
interface GetSpecializationsResponse {
    success: boolean;
    specializations?: Specialization[]; // Array of Specialization records
    error?: string;
}

export async function getSpecializations(): Promise<GetSpecializationsResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // Authorization: Ensure only admins can fetch this list
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Admin fetching list of all specializations...");

    try {
        const specializations = await prisma.specialization.findMany({
            orderBy: {
                name: 'asc', // Order alphabetically by name
            },
        });

        console.log(`Found ${specializations.length} specializations.`);
        return { success: true, specializations: specializations };

    } catch (error: any) {
        console.error("Error fetching specializations:", error);
        return { success: false, error: `Failed to fetch specializations. ${error.message}` };
    }
}

// --- Update Specialization ---
interface UpdateSpecializationResponse {
    success: boolean;
    specialization?: Specialization;
    error?: string;
}

export async function updateSpecialization(formData: FormData): Promise<UpdateSpecializationResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Extract Data
    const id = formData.get('id') as string | null;
    const name = formData.get('name') as string | null;
    const description = formData.get('description') as string | null;

    // 3. Validation
    if (!id || typeof id !== 'string') {
        return { success: false, error: 'Specialization ID is missing or invalid.' };
    }
    if (!name || typeof name !== 'string' || name.trim().length === 0) {
        return { success: false, error: 'Specialization name is required.' };
    }
    const trimmedName = name.trim();
    const trimmedDescription = description?.trim() || null;

    console.log(`Admin attempting to update specialization ID: ${id} to Name: "${trimmedName}"`);

    try {
        // 4. Check for Duplicate Name (excluding the current item being edited)
        const existingSpec = await prisma.specialization.findFirst({
            where: {
                name: trimmedName,
                id: { not: id } // Exclude the record we are currently editing
            }
        });

        if (existingSpec) {
            return { success: false, error: `Another specialization with the name "${trimmedName}" already exists.` };
        }

        // 5. Update in Database
        const updatedSpecialization = await prisma.specialization.update({
            where: { id: id },
            data: {
                name: trimmedName,
                description: trimmedDescription,
            },
        });

        console.log(`Successfully updated specialization: ${updatedSpecialization.name} (ID: ${updatedSpecialization.id})`);

        // 6. Revalidate Paths
        revalidatePath('/admin/specializations');
        revalidatePath('/admin/matrix'); // Matrix uses specialization names
        // Revalidate all faculty pages might be too broad, but safer if names are displayed there
        // Consider revalidating specific faculty if performance is an issue later
        revalidatePath('/admin/faculty');


        // 7. Return Success
        return { success: true, specialization: updatedSpecialization };

    } catch (error: any) {
        console.error(`Error updating specialization ${id}:`, error);
        if (error.code === 'P2025') { // Record to update not found
            return { success: false, error: 'Specialization not found.' };
        }
         if (error.code === 'P2002' && error.meta?.target?.includes('name')) {
             // Should be caught by the check above, but as a fallback
             return { success: false, error: `Another specialization with the name "${trimmedName}" already exists.` };
         }
        return { success: false, error: `Failed to update specialization. ${error.message}` };
    }
}

// --- Delete Specialization ---
interface DeleteSpecializationResponse {
    success: boolean;
    error?: string;
}

export async function deleteSpecialization(id: string): Promise<DeleteSpecializationResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Validation
    if (!id || typeof id !== 'string') {
        return { success: false, error: 'Specialization ID is missing or invalid.' };
    }

    console.log(`Admin attempting to delete specialization ID: ${id}`);

    try {
        // 3. Delete from Database
        // Prisma will automatically handle disconnecting the relation from Users
        // based on the schema definition for the many-to-many relation.
        await prisma.specialization.delete({
            where: { id: id },
        });

        console.log(`Successfully deleted specialization ID: ${id}`);

        // 4. Revalidate Paths
        revalidatePath('/admin/specializations');
        revalidatePath('/admin/matrix');
        revalidatePath('/admin/faculty'); // Faculty profiles might no longer show this spec


        // 5. Return Success
        return { success: true };

    } catch (error: any) {
        console.error(`Error deleting specialization ${id}:`, error);
        if (error.code === 'P2025') { // Record to delete not found
            // It's already gone, consider it a success from the user's perspective
            console.warn(`Attempted to delete non-existent specialization ID: ${id}. Assuming success.`);
            revalidatePath('/admin/specializations'); // Still revalidate
             revalidatePath('/admin/matrix');
             revalidatePath('/admin/faculty');
            return { success: true };
        }
        return { success: false, error: `Failed to delete specialization. ${error.message}` };
    }
}
--- END FILE: src\lib\actions\specializationActions.ts ---

--- START FILE: src\lib\auth.ts ---
[EMPTY FILE]
--- END FILE: src\lib\auth.ts ---

--- START FILE: src\lib\db.ts ---
[EMPTY FILE]
--- END FILE: src\lib\db.ts ---

--- START FILE: src\lib\prisma.ts ---
// src/lib/prisma.ts
import { PrismaClient } from '@/generated/prisma';

// Declare a global variable to hold the Prisma Client instance.
// We use 'globalThis' which works in different environments (Node, browser, edge).
// We add '_prisma' to avoid potential naming conflicts.
declare global {
  // eslint-disable-next-line no-var
  var _prisma: PrismaClient | undefined;
}

// Check if we already have an instance in the global scope.
// If not, create a new one. In development, due to Next.js hot reloading,
// 'global._prisma' might already exist, so we reuse it to avoid creating too many connections.
const prisma = globalThis._prisma ?? new PrismaClient();

// In non-production environments, assign the instance to the global scope.
if (process.env.NODE_ENV !== 'production') {
  globalThis._prisma = prisma;
}

// Export the single instance.
export default prisma;
--- END FILE: src\lib\prisma.ts ---

--- START FILE: src\lib\userActions.ts ---
"use server";

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { Role } from '@/generated/prisma/client'; // Import Role as a value
import type {
    User, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation,
    ApprovalStatus
    // Role removed from type-only import
 } from '@/generated/prisma/client';
import { revalidatePath } from 'next/cache';
import fs from 'fs/promises';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

// --- Incoming Data Types ---
// ... (remain the same) ...
type IncomingAcademicQualification = Omit<AcademicQualification, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; yearCompleted: number | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingProfessionalLicense = Omit<ProfessionalLicense, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; expiration: string | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingWorkExperience = Omit<WorkExperience, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingProfessionalAffiliation = Omit<ProfessionalAffiliation, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingAwardRecognition = Omit<AwardRecognition, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; yearReceived: number | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingProfessionalDevelopment = Omit<ProfessionalDevelopment, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingCommunityInvolvement = Omit<CommunityInvolvement, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingPublication = Omit<Publication, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; datePublished: string | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingConferencePresentation = Omit<ConferencePresentation, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };


// --- Helper Functions (ensureUploadDirExists, safeDeleteFile, uploadFile) ---
// ... (remain the same) ...
async function ensureUploadDirExists(subDir: string, userId: string): Promise<string> {
    const userDirPath = path.join(process.cwd(), 'public', 'uploads', subDir, userId);
    try { await fs.mkdir(userDirPath, { recursive: true }); return userDirPath; }
    catch (error) { console.error(`Error creating upload directory (${subDir}):`, error); throw new Error(`Could not create upload directory for ${subDir}.`); }
}
async function safeDeleteFile(filePath: string | null | undefined) {
    if (!filePath || !filePath.startsWith('/uploads/')) { return; }
    try { const localFilePath = path.join(process.cwd(), 'public', filePath); await fs.unlink(localFilePath); console.log(`Successfully deleted file: ${localFilePath}`); }
    catch (error: any) { if (error.code === 'ENOENT') { console.warn(`File not found during deletion attempt: ${filePath}`); } else { console.error(`Error deleting file ${filePath}:`, error.message); } }
}
async function uploadFile(file: File, userId: string, subDir: string): Promise<string> {
    try {
        const MAX_FILE_SIZE = 5 * 1024 * 1024; const ALLOWED_TYPES = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];
        if (file.size > MAX_FILE_SIZE) { throw new Error(`File size exceeds limit (${file.name}).`); }
        if (!ALLOWED_TYPES.includes(file.type)) { throw new Error(`Invalid file type (${file.name}).`); }
        const uploadDir = await ensureUploadDirExists(subDir, userId); const fileExtension = path.extname(file.name); const uniqueFilename = `${uuidv4()}${fileExtension}`; const localFilePath = path.join(uploadDir, uniqueFilename); const fileBuffer = Buffer.from(await file.arrayBuffer()); await fs.writeFile(localFilePath, fileBuffer); const relativeUrl = `/uploads/${subDir}/${userId}/${uniqueFilename}`; console.log(`File uploaded successfully: ${relativeUrl}`); return relativeUrl;
    } catch (uploadError: any) { console.error(`Error uploading file (${file.name}):`, uploadError); throw new Error(`Failed to upload file ${file.name}: ${uploadError.message}`); }
}


// --- Get Profile Data Action ---
// ... (getMyProfileData remains the same) ...
interface GetUserProfileDataResponse { user: { id: string; name: string | null; email: string | null; role: string | null; } | null; academicQualifications: AcademicQualification[]; professionalLicenses: ProfessionalLicense[]; workExperiences: WorkExperience[]; professionalAffiliations: ProfessionalAffiliation[]; awardsRecognitions: AwardRecognition[]; professionalDevelopments: ProfessionalDevelopment[]; communityInvolvements: CommunityInvolvement[]; publications: Publication[]; conferencePresentations: ConferencePresentation[]; error?: string; }
export async function getMyProfileData(): Promise<GetUserProfileDataResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;
    const defaultResponse: Omit<GetUserProfileDataResponse, 'user' | 'error'> = { academicQualifications: [], professionalLicenses: [], workExperiences: [], professionalAffiliations: [], awardsRecognitions: [], professionalDevelopments: [], communityInvolvements: [], publications: [], conferencePresentations: [], };
    if (!userId) { return { user: null, ...defaultResponse, error: 'Not authenticated' }; }
    try {
        const userWithProfile = await prisma.user.findUnique({
            where: { id: userId },
            include: { academicQualifications: { orderBy: { yearCompleted: 'desc' } }, professionalLicenses: { orderBy: { expiration: 'desc' } }, workExperiences: { orderBy: { createdAt: 'desc' } }, professionalAffiliations: { orderBy: { createdAt: 'desc' } }, awardsRecognitions: { orderBy: { yearReceived: 'desc' } }, professionalDevelopments: { orderBy: { createdAt: 'desc' } }, communityInvolvements: { orderBy: { createdAt: 'desc' } }, publications: { orderBy: { datePublished: 'desc' } }, conferencePresentations: { orderBy: { createdAt: 'desc' } }, },
        });
        if (!userWithProfile) { return { user: null, ...defaultResponse, error: 'User not found' }; }
        return { user: { id: userWithProfile.id, name: userWithProfile.name, email: userWithProfile.email, role: userWithProfile.role }, academicQualifications: userWithProfile.academicQualifications ?? [], professionalLicenses: userWithProfile.professionalLicenses ?? [], workExperiences: userWithProfile.workExperiences ?? [], professionalAffiliations: userWithProfile.professionalAffiliations ?? [], awardsRecognitions: userWithProfile.awardsRecognitions ?? [], professionalDevelopments: userWithProfile.professionalDevelopments ?? [], communityInvolvements: userWithProfile.communityInvolvements ?? [], publications: userWithProfile.publications ?? [], conferencePresentations: userWithProfile.conferencePresentations ?? [], };
    } catch (error) { console.error("Error fetching profile data:", error); return { user: null, ...defaultResponse, error: 'Failed to fetch profile data' }; }
}


// --- Update Profile Action ---
interface UpdateProfileResponse { success: boolean; error?: string; }
interface SelectedItem { id: string; status: ApprovalStatus; [key: string]: any; }
function areDatesEqual(d1: Date | string | null | undefined, d2: Date | string | null | undefined): boolean { /* ... (remains the same) ... */
    if (d1 === d2) return true;
    if (!d1 || !d2) return false;
    try {
        const date1 = new Date(d1); const date2 = new Date(d2);
        if (isNaN(date1.getTime()) || isNaN(date2.getTime())) return false;
        return date1.toISOString().split('T')[0] === date2.toISOString().split('T')[0];
    } catch (e) { return false; }
 }

// Helper to get a display name/title for an item (used in notification message)
function getItemDisplayTitle(item: any, sectionKey: string): string {
    switch (sectionKey) {
        case 'academicQualifications': return item.degree ?? `Qualification ID: ${item.id}`;
        case 'professionalLicenses': return item.examination ?? `License ID: ${item.id}`;
        case 'workExperiences': return item.position ?? `Work Exp ID: ${item.id}`;
        case 'professionalAffiliations': return item.organization ?? `Affiliation ID: ${item.id}`;
        case 'awardsRecognitions': return item.awardName ?? `Award ID: ${item.id}`;
        case 'professionalDevelopments': return item.title ?? `Development ID: ${item.id}`;
        case 'communityInvolvements': return item.engagementTitle ?? `Involvement ID: ${item.id}`;
        case 'publications': return item.researchTitle ?? `Publication ID: ${item.id}`;
        case 'conferencePresentations': return item.paperTitle ?? `Presentation ID: ${item.id}`;
        default: return `Item ID: ${item.id}`;
    }
}


export async function updateMyProfile(formData: FormData): Promise<UpdateProfileResponse> {
    'use server';
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;
    const userName = session?.user?.name ?? session?.user?.email ?? `User ${userId}`; // Get faculty name for notifications
    if (!userId) { return { success: false, error: 'Not authenticated' }; }
    console.log(`--- Starting updateMyProfile for user: ${userId} (${userName}) ---`);

    function parseJsonData<T>(jsonString: string | null, arrayName: string): T[] { /* ... (remains the same) ... */
        if (!jsonString) return [];
        try {
            const isoDateRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|([+-]\d{2}:\d{2}))$/;
            const parsedWithDates = JSON.parse(jsonString, (key, value) => {
                if (typeof value === 'string' && isoDateRegex.test(value)) {
                    const date = new Date(value);
                    if (!isNaN(date.getTime())) { return date; }
                }
                return value;
            });
            if (!Array.isArray(parsedWithDates)) throw new Error(`${arrayName} data is not an array`);
            return parsedWithDates;
        } catch (e: any) {
            console.error(`Error parsing ${arrayName} json:`, e);
            throw new Error(`Invalid ${arrayName} data format received.`);
        }
     }

    const uploadDirs: Record<string, string> = { academicQualifications: 'qualifications', professionalLicenses: 'licenses', workExperiences: 'workexp', professionalAffiliations: 'affiliations', awardsRecognitions: 'awards', professionalDevelopments: 'profdev', communityInvolvements: 'community', publications: 'publications', conferencePresentations: 'presentations' };
    const urlFieldNames: Record<string, string> = { academicQualifications: 'diplomaFileUrl', professionalLicenses: 'licenseFileUrl', workExperiences: 'proofUrl', professionalAffiliations: 'membershipProofUrl', awardsRecognitions: 'certificateUrl', professionalDevelopments: 'certificateFileUrl', communityInvolvements: 'proofUrl', publications: 'pdfUrl', conferencePresentations: 'proofUrl' };
    const requiredFieldsMap: Record<string, string[]> = { academicQualifications: ['degree', 'institution', 'program', 'yearCompleted'], professionalLicenses: ['examination', 'monthYear', 'licenseNumber', 'expiration'], workExperiences: ['institution', 'position', 'inclusiveYears'], professionalAffiliations: ['organization', 'inclusiveYears'], awardsRecognitions: ['awardName', 'awardingBody', 'yearReceived'], professionalDevelopments: ['title', 'organizer', 'dateLocation'], communityInvolvements: ['engagementTitle', 'role', 'locationDate'], publications: ['researchTitle', 'journal', 'datePublished'], conferencePresentations: ['paperTitle', 'eventName', 'dateLocation'] };
    const dateFields: Record<string, string[]> = { professionalLicenses: ['expiration'], publications: ['datePublished'], };

    let filesToDelete: (string | null | undefined)[] = [];
    let incomingData: Record<string, any[]> = {};

    try {
        console.log("Parsing incoming form data...");
        incomingData.academicQualifications = parseJsonData<IncomingAcademicQualification>(formData.get('academicQualifications_json') as string | null, 'Academic Qualifications');
        incomingData.professionalLicenses = parseJsonData<IncomingProfessionalLicense>(formData.get('professionalLicenses_json') as string | null, 'Professional Licenses');
        incomingData.workExperiences = parseJsonData<IncomingWorkExperience>(formData.get('workExperiences_json') as string | null, 'Work Experience');
        incomingData.professionalAffiliations = parseJsonData<IncomingProfessionalAffiliation>(formData.get('professionalAffiliations_json') as string | null, 'Professional Affiliations');
        incomingData.awardsRecognitions = parseJsonData<IncomingAwardRecognition>(formData.get('awardsRecognitions_json') as string | null, 'Awards/Recognitions');
        incomingData.professionalDevelopments = parseJsonData<IncomingProfessionalDevelopment>(formData.get('professionalDevelopments_json') as string | null, 'Professional Development');
        incomingData.communityInvolvements = parseJsonData<IncomingCommunityInvolvement>(formData.get('communityInvolvements_json') as string | null, 'Community Involvement');
        incomingData.publications = parseJsonData<IncomingPublication>(formData.get('publications_json') as string | null, 'Publications');
        incomingData.conferencePresentations = parseJsonData<IncomingConferencePresentation>(formData.get('conferencePresentations_json') as string | null, 'Conference Presentations');
        console.log("Finished parsing form data.");
    } catch (error: any) { return { success: false, error: error.message }; }

    try {
        console.log("Starting database transaction...");
        const result = await prisma.$transaction(async (tx) => {

            // *** ADDED: Get Admin IDs within the transaction ***
            const adminUsers = await tx.user.findMany({
                where: { role: Role.ADMIN },
                select: { id: true }
            });
            const adminIds = adminUsers.map(admin => admin.id);
            // *** END ADDED ***

            async function processSection<TIncoming extends { id: string; _isNew?: boolean; status?: ApprovalStatus }, TPrisma extends { id: string; status: ApprovalStatus }>(
                sectionKey: keyof typeof uploadDirs,
                prismaModel: any
            ) {
                const data = incomingData[sectionKey] as TIncoming[];
                if (!data) { console.warn(`No data found for section ${sectionKey}. Skipping.`); return; }
                console.log(`Processing section: ${sectionKey}`);

                const urlFieldName = urlFieldNames[sectionKey];
                const subDir = uploadDirs[sectionKey];
                const requiredFields = requiredFieldsMap[sectionKey] || [];
                const sectionDateFields = dateFields[sectionKey] || [];

                // Fetch ALL fields from DB for comparison
                const currentItems = await prismaModel.findMany({ where: { userId: userId } });
                const currentItemMap = new Map<string, any>(currentItems.map((item: { id: string }) => [item.id, item]));
                const incomingIds = new Set(data.map(item => item.id));
                const idsToDeleteInternal: string[] = [];

                for (const currentItem of currentItems) {
                    if (!incomingIds.has(currentItem.id)) {
                        idsToDeleteInternal.push(currentItem.id);
                        if (urlFieldName && currentItem[urlFieldName]) { filesToDelete.push(currentItem[urlFieldName]); }
                    }
                }
                if (idsToDeleteInternal.length > 0) { console.log(`Deleting ${sectionKey} records:`, idsToDeleteInternal); await prismaModel.deleteMany({ where: { id: { in: idsToDeleteInternal }, userId: userId } }); }

                for (const incomingItem of data) {
                    const fileKey = `${sectionKey}_file_${incomingItem.id}`;
                    const file = formData.get(fileKey) as File | null;
                    let uploadedFileUrl: string | null | undefined = undefined;
                    let fileChanged = false;

                    if (file) { /* ... (file upload logic remains the same) ... */
                        console.log(`[${sectionKey} - ${incomingItem.id}] File found in FormData: ${file.name}, Size: ${file.size}, Type: ${file.type}`);
                        try {
                            uploadedFileUrl = await uploadFile(file, userId, subDir);
                            fileChanged = true;
                            console.log(`[${sectionKey} - ${incomingItem.id}] File uploaded successfully. URL: ${uploadedFileUrl}`);
                        } catch (uploadError: any) {
                             console.error(`[${sectionKey} - ${incomingItem.id}] CRITICAL: File upload failed! Error: ${uploadError.message}`);
                             uploadedFileUrl = undefined;
                             fileChanged = false;
                        }
                    } else {
                        // console.log(`[${sectionKey} - ${incomingItem.id}] No file found in FormData for key ${fileKey}.`);
                    }

                    const { _isNew, id, status, rejectionReason, ...dataForPrisma } = incomingItem as any;
                    Object.keys(dataForPrisma).forEach(key => { /* ... (data cleaning remains the same) ... */
                        if (['yearCompleted', 'yearReceived'].includes(key) && typeof dataForPrisma[key] === 'string') { const num = parseInt(dataForPrisma[key], 10); dataForPrisma[key] = isNaN(num) ? null : num; }
                        if (typeof dataForPrisma[key] === 'string' && dataForPrisma[key].trim() === '' && !requiredFields.includes(key)) { dataForPrisma[key] = null; }
                        if (sectionDateFields.includes(key)) { if (!(dataForPrisma[key] instanceof Date) && dataForPrisma[key] !== null) { try { const parsedDate = new Date(dataForPrisma[key]); dataForPrisma[key] = !isNaN(parsedDate.getTime()) ? parsedDate : null; } catch { dataForPrisma[key] = null; } } else if (dataForPrisma[key] instanceof Date && isNaN(dataForPrisma[key].getTime())) { dataForPrisma[key] = null; } }
                    });
                    dataForPrisma.userId = userId;

                    let notifyAdmin = false; // Flag to trigger admin notification

                    if (_isNew) {
                        // --- Create Logic ---
                        console.log(`Attempting create for ${sectionKey} - ID: ${id}`);
                        for (const field of requiredFields) { if (dataForPrisma[field] === null || dataForPrisma[field] === undefined || dataForPrisma[field] === '') { throw new Error(`Missing required field "${field}" for new ${sectionKey}.`); } }
                        dataForPrisma.status = 'PENDING';
                        dataForPrisma.rejectionReason = null;
                        if (urlFieldName) {
                            dataForPrisma[urlFieldName] = uploadedFileUrl ?? null;
                            console.log(`[${sectionKey} - ${id}] Setting URL field '${urlFieldName}' for new item to: ${dataForPrisma[urlFieldName]}`);
                        }
                        await prismaModel.create({ data: dataForPrisma });
                        console.log(`Created ${sectionKey} item.`);
                        notifyAdmin = true; // Notify admin for new items

                    } else {
                        // --- Update Logic ---
                        const currentItem = currentItemMap.get(id);
                        if (!currentItem) { console.warn(`${sectionKey} Update: ID ${id} not found. Skipping.`); continue; }

                        const updateData: Partial<any> = {};
                        let needsDbUpdate = false;
                        let significantChange = false;
                        const currentFileUrl = urlFieldName ? currentItem[urlFieldName] : undefined;
                        let newFileUrl = currentFileUrl;

                        // Step 1: Handle File Change
                        if (fileChanged && uploadedFileUrl !== undefined) {
                            newFileUrl = uploadedFileUrl;
                            significantChange = true;
                            needsDbUpdate = true;
                            if (currentFileUrl) { filesToDelete.push(currentFileUrl); }
                        } else if (fileChanged && uploadedFileUrl === undefined) {
                             console.warn(`[${sectionKey} - ${id}] File upload attempted but failed. URL will not be updated.`);
                             newFileUrl = currentFileUrl;
                        }
                        if (urlFieldName && newFileUrl !== currentFileUrl) {
                            updateData[urlFieldName] = newFileUrl;
                        }

                        // Step 2: Compare other fields
                        Object.keys(dataForPrisma).forEach(key => {
                            if (key !== 'userId' && key !== 'createdAt' && key !== 'updatedAt' && key !== 'status' && key !== 'rejectionReason' && key !== urlFieldName) {
                                const incomingValue = dataForPrisma[key];
                                const currentValue = currentItem[key];
                                let fieldChanged = false;
                                if (sectionDateFields.includes(key)) { fieldChanged = !areDatesEqual(incomingValue, currentValue); }
                                else { fieldChanged = incomingValue !== currentValue; }

                                if (fieldChanged) {
                                    updateData[key] = incomingValue;
                                    needsDbUpdate = true;
                                    const keyFieldsForStatusReset = [ ...requiredFields, 'degree', 'program', 'examination', 'title', 'awardName', 'researchTitle', 'paperTitle', 'position' ];
                                    if (keyFieldsForStatusReset.includes(key)) {
                                        significantChange = true;
                                    }
                                }
                            }
                        });

                        // Step 3: Determine Status Reset
                        const currentStatus = currentItem.status;
                        if (significantChange) {
                            if (currentStatus !== 'PENDING') {
                                updateData.status = 'PENDING';
                                updateData.rejectionReason = null;
                                needsDbUpdate = true;
                                notifyAdmin = true; // Notify admin if status resets to PENDING
                                console.log(`Significant change detected for ${sectionKey} ID: ${id}. Resetting status to PENDING.`);
                            }
                        } else if (currentStatus === 'REJECTED' && needsDbUpdate) {
                            updateData.status = 'PENDING';
                            updateData.rejectionReason = null;
                            needsDbUpdate = true;
                            notifyAdmin = true; // Also notify if editing a rejected item
                            console.log(`Minor edit on REJECTED ${sectionKey} ID: ${id}. Setting status to PENDING.`);
                        }

                        // Step 4: Perform DB Update
                        if (needsDbUpdate) {
                            console.log(`>>> Updating DB for ${sectionKey} ID: ${id}`);
                            await prismaModel.update({ where: { id: id, userId: userId }, data: updateData });
                            console.log(`<<< Successfully updated DB for ${sectionKey} ID: ${id}`);
                        } else {
                             console.log(`[${sectionKey} - ${id}] No database update needed.`);
                        }
                    }

                    // *** ADDED: Create Admin Notifications ***
                    if (notifyAdmin && adminIds.length > 0) {
                        const itemTitle = getItemDisplayTitle(incomingItem, sectionKey);
                        const message = `${userName} submitted "${itemTitle}" (${sectionKey}) for approval.`;
                        console.log(`Creating notification for admins: "${message}"`);
                        // Create notification for each admin
                        await tx.notification.createMany({
                            data: adminIds.map(adminId => ({
                                userId: adminId,
                                message: message,
                                link: '/admin/approvals' // Link to the approvals page
                            }))
                        });
                    }
                    // *** END ADDED ***
                }
            } // end processSection

            // Process ALL sections
            await processSection('academicQualifications', tx.academicQualification);
            await processSection('professionalLicenses', tx.professionalLicense);
            await processSection('workExperiences', tx.workExperience);
            await processSection('professionalAffiliations', tx.professionalAffiliation);
            await processSection('awardsRecognitions', tx.awardRecognition);
            await processSection('professionalDevelopments', tx.professionalDevelopment);
            await processSection('communityInvolvements', tx.communityInvolvement);
            await processSection('publications', tx.publication);
            await processSection('conferencePresentations', tx.conferencePresentation);

            return { success: true };
        }); // End transaction
        console.log("Database transaction finished.");

        if (result.success && filesToDelete.length > 0) {
            const uniqueFilesToDelete = [...new Set(filesToDelete.filter(f => f))];
            console.log("Attempting file deletions post-transaction:", uniqueFilesToDelete);
            await Promise.all(uniqueFilesToDelete.map(fileUrl => safeDeleteFile(fileUrl)));
        }

        if (result.success) {
            revalidatePath('/profile'); revalidatePath('/admin/approvals'); revalidatePath('/documents');
            console.log("Profile, Admin Approvals, and Documents page revalidated.");
        }

        console.log(`--- Finished updateMyProfile for user: ${userId} ---`);
        return { success: result.success };

    } catch (error: any) {
        console.error("Error in updateMyProfile transaction or file deletion:", error);
        return { success: false, error: error.message || 'An unexpected error occurred while updating the profile.' };
    }
}
--- END FILE: src\lib\userActions.ts ---

--- START FILE: src\lib\utils.ts ---
[EMPTY FILE]
--- END FILE: src\lib\utils.ts ---

--- START FILE: src\types\index.ts ---
// Action: Modify src/types/index.ts

import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation,
    ApprovalStatus, Specialization // <-- Import the enum & Specialization
} from '@/generated/prisma';
import type { Role as PrismaRole } from '@/generated/prisma'; // Import Role if needed elsewhere
import prisma from '@/lib/prisma';
// Common temporary properties used during editing state
export type TempCommon = {
    _isNew?: boolean; // Flag to indicate if the item was added locally
    id: string;      // Needs ID (can be temporary UUID for new items or real ID for existing)
};

// Specific temporary types for each section
// Add status and rejectionReason, keep _selectedFile
export type TempAcademicQualification = AcademicQualification & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalDevelopment = ProfessionalDevelopment & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalLicense = ProfessionalLicense & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempWorkExperience = WorkExperience & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalAffiliation = ProfessionalAffiliation & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempAwardRecognition = AwardRecognition & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempCommunityInvolvement = CommunityInvolvement & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempPublication = Publication & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempConferencePresentation = ConferencePresentation & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };


// Union type representing any possible item within the editableData state arrays
export type EditableItem =
    | TempAcademicQualification
    | TempProfessionalLicense
    | TempWorkExperience
    | TempProfessionalAffiliation
    | TempAwardRecognition
    | TempProfessionalDevelopment
    | TempCommunityInvolvement
    | TempPublication
    | TempConferencePresentation;

// Type mapping for item types used in admin actions
export type ItemType =
    | 'academicQualification'
    | 'professionalLicense'
    | 'workExperience'
    | 'professionalAffiliation'
    | 'awardRecognition'
    | 'professionalDevelopment'
    | 'communityInvolvement'
    | 'publication'
    | 'conferencePresentation';

// --- Define Evidence Source ---
export interface EvidenceSource {
    source: string; // e.g., "Academic Qualification - Degree"
    evidence: string; // The actual text where the keyword was found
}

// --- Define Faculty Specialization Detail (Used by old keyword scanning, might be obsolete) ---
export interface FacultySpecializationDetail {
    userId: string;
    name: string | null;
    email: string | null;
    // Use the EvidenceSource interface defined above
    specializationDetails: {
        [specializationKeyword: string]: EvidenceSource[];
    };
}

// --- Define Admin Actions Response Type (For old keyword scanning, might be obsolete) ---
export interface GetSpecializationResponse {
    success: boolean;
    data?: FacultySpecializationDetail[]; // Use the centralized type
    error?: string;
}

// --- Type for data returned by the REVISED getFacultySpecializationData action ---
export interface FacultyLinkedSpecialization {
    userId: string;
    name: string | null;
    email: string | null;
    linkedSpecializationNames: string[]; // Array of names of linked specializations
}

// --- Renamed Response type for the REVISED getFacultySpecializationData action ---
export interface GetMatrixDataResponse { // Renamed from GetSpecializationResponse
    success: boolean;
    data?: FacultyLinkedSpecialization[]; // Use the new linked specialization type
    // *** ADDED THIS LINE ***
    allSpecializationNames?: string[]; // Add list of all specialization names
    error?: string;
}

// Helper function to map Prisma model names to ItemType strings
// (Useful for admin actions if needed, but Prisma client uses camelCase keys directly)
export function getModelKeyFromItemType(itemType: ItemType): keyof typeof prisma {
    const map: Record<ItemType, keyof typeof prisma> = {
        academicQualification: 'academicQualification',
        professionalLicense: 'professionalLicense',
        workExperience: 'workExperience',
        professionalAffiliation: 'professionalAffiliation',
        awardRecognition: 'awardRecognition',
        professionalDevelopment: 'professionalDevelopment',
        communityInvolvement: 'communityInvolvement',
        publication: 'publication',
        conferencePresentation: 'conferencePresentation',
    };
    return map[itemType];
}

// --- Keep the response type for the action that gets ALL specializations ---
export interface GetSpecializationsResponse { // This is for getSpecializations()
    success: boolean;
    specializations?: Specialization[]; // Uses the Prisma Specialization type
    error?: string;
}
--- END FILE: src\types\index.ts ---

--- START FILE: src\middleware.ts ---
// Action: Modify src/middleware.ts

import { withAuth } from "next-auth/middleware";
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import type { JWT } from "next-auth/jwt";

// Export the default middleware function configured with withAuth
export default withAuth(
    // `withAuth` augments your `Request` with the user's token.
    // This inner function runs ONLY if the user is authenticated (token exists).
    function middleware(req) {
        const token = req.nextauth.token as JWT & { role?: string }; // Token is guaranteed here
        const { pathname } = req.nextUrl;

        // --- Redirect authenticated users from homepage ---
        if (pathname === '/') {
            const userRole = token.role;
            const targetUrl = userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard';
            console.log(`Authenticated user on '/', redirecting to ${targetUrl}`);
            return NextResponse.redirect(new URL(targetUrl, req.url));
        }

        // --- Role-Based Access Control for /admin ---
        if (pathname.startsWith('/admin')) {
            if (token?.role !== 'ADMIN') {
                console.warn(`Unauthorized access attempt to ${pathname} by user role: ${token?.role}`);
                 return NextResponse.redirect(new URL('/dashboard', req.url));
            }
             return NextResponse.next();
        }

        // --- General Authenticated Access ---
        // For any other authenticated route covered by the matcher (like /dashboard, /profile)
        // allow the request to proceed.
        return NextResponse.next();
    },
    {
        callbacks: {
            authorized: ({ token }) => !!token
        },
        pages: {
            signIn: "/login",
        },
    }
);

// --- Route Matching ---
// *** UPDATED MATCHER ***
// Exclude API, static files, images, favicon, AND public auth pages.
export const config = {
    matcher: [
        /*
         * Match all request paths except for the ones starting with:
         * - api (API routes including /api/auth)
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         * - login (the login page itself)
         * - forgot-password (password reset request page)
         * - reset-password (password reset page)
         * The negative lookahead `(?!...)` correctly excludes these.
         * The pattern `.*` after the lookahead WILL match the root path '/'.
         */
        '/((?!api|_next/static|_next/image|favicon.ico|login|forgot-password|reset-password).*)',

        // Keep explicit protected paths if you prefer strictness, though the pattern covers them.
        '/dashboard/:path*',
        '/profile/:path*',
        '/documents/:path*',
        '/admin/:path*',
    ],
};
--- END FILE: src\middleware.ts ---

--- START FILE: .gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# Local Uploads (Development Only!)
/public/uploads/

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

--- END FILE: .gitignore ---

--- START FILE: create_context.ps1 ---
# Define directories/files/extensions to exclude
$excludeDirs = @("node_modules", ".git", ".next", "generated") # Directories containing these names will be excluded
$excludeFiles = @(".env*", "package-lock.json", "yarn.lock", "create_context.ps1", "project_context.txt") # Specific files/patterns to exclude by name
$excludeExtensions = @(".png", ".jpg", ".jpeg", ".gif", ".webp", ".ico", ".svg", ".woff", ".woff2", ".ttf", ".eot", ".pdf", ".zip", ".exe", ".dll", ".db") # Exclude common binary/generated/database files

# Output file path
$outputFile = ".\project_context.txt"
Write-Host "--- Starting Context Script ---"
Write-Host "Output file target: $outputFile"
$currentDir = $PWD.Path
Write-Host "Running in directory: $currentDir"

# Clear output file or create if not exists
if (Test-Path $outputFile) {
    Clear-Content -Path $outputFile
    Write-Host "Cleared existing output file."
} else {
    New-Item -Path $outputFile -ItemType File -Force | Out-Null
    Write-Host "Created new output file."
}


# Get all files recursively
Write-Host "Searching for files..."
try {
    $allFiles = Get-ChildItem -Path . -Recurse -File -ErrorAction SilentlyContinue
    Write-Host "Found $($allFiles.Count) total items initially."
} catch {
     Write-Error "Failed to list files initially: $($_.Exception.Message)"
     exit 1
}


$processedCount = 0
$excludedCount = 0

# Process each file found
foreach ($item in $allFiles) {
    $filePath = $item.FullName
    # Ensure relative path calculation is robust
    if ($filePath.StartsWith($currentDir)) {
         $relativePath = $item.FullName.Substring($currentDir.Length).TrimStart('\/')
         if ($relativePath -eq "") { $relativePath = $item.Name } # Handle files in root
    } else {
         $relativePath = $item.FullName # Fallback
    }

    # --- Exclusion Checks ---
    $isExcluded = $false
    $exclusionReason = ""

    # Check if path contains any excluded directory names (Improved Check)
    foreach ($dir in $excludeDirs) {
        # Check if any part of the directory path matches the excluded dir name
        if (($item.DirectoryName -split '[\\/]') -contains $dir) {
            $isExcluded = $true
            $exclusionReason = "Directory ($dir)"
            break
        }
    }

    # Check if file name matches excluded patterns (if not already excluded)
    if (-not $isExcluded) {
        foreach ($filePattern in $excludeFiles) {
            if ($item.Name -like $filePattern) {
                $isExcluded = $true
                $exclusionReason = "File Pattern ($filePattern)"
                break
            }
        }
    }

    # Check if file extension matches excluded extensions (if not already excluded)
     if (-not $isExcluded) {
        foreach ($ext in $excludeExtensions) {
             if ($item.Extension -eq $ext) {
                 $isExcluded = $true
                 $exclusionReason = "Extension ($ext)"
                 break
             }
        }
    }

    # --- Processing or Skipping ---
    if ($isExcluded) {
        $excludedCount++
        # Write-Host "Skipping (Excluded: $exclusionReason): $relativePath"
    } else {
        # File is not excluded, try to process it
        Write-Host "Processing: $relativePath"
        $processedCount++
        $fileContentRead = $false
        $content = "[ERROR: Could not read file content]" # Default error message

        try {
            # Add file header to output first
            Add-Content -Path $outputFile -Value "--- START FILE: $relativePath ---"

            # Check if file has content before reading
            if ($item.Length -gt 0) {
                # Attempt 1: Use -LiteralPath and -Encoding UTF8 (Most robust)
                try {
                    $content = Get-Content -LiteralPath $filePath -Encoding UTF8 -ErrorAction Stop | Out-String
                    $fileContentRead = $true
                    # Write-Host "Read using -LiteralPath -Encoding UTF8" # Debugging
                } catch {
                     Write-Warning "WARNING: Failed using -LiteralPath -Encoding UTF8 for '$relativePath'. Error: $($_.Exception.Message)"
                    # Attempt 2: Use -LiteralPath without explicit Encoding
                    try {
                         $content = Get-Content -LiteralPath $filePath -ErrorAction Stop | Out-String
                         $fileContentRead = $true
                         Write-Host "Read using -LiteralPath (no encoding specified)" # Debugging
                    } catch {
                         Write-Warning "WARNING: Failed using -LiteralPath for '$relativePath'. Error: $($_.Exception.Message)"
                         # Attempt 3: Original path without -LiteralPath (fallback)
                         try {
                              $content = Get-Content -Path $filePath -Encoding UTF8 -ErrorAction Stop | Out-String
                              $fileContentRead = $true
                              Write-Host "Read using -Path -Encoding UTF8 (fallback)" # Debugging
                         } catch {
                              Write-Warning "WARNING: Failed using -Path -Encoding UTF8 for '$relativePath'. Error: $($_.Exception.Message)"
                              try {
                                   $content = Get-Content -Path $filePath -ErrorAction Stop | Out-String
                                   $fileContentRead = $true
                                   Write-Host "Read using -Path (no encoding, fallback)" # Debugging
                              } catch {
                                   # Final failure
                                    Write-Error "ERROR: All attempts failed to read file '$relativePath'. Error: $($_.Exception.Message)"
                                    # Keep default error message for $content
                              }
                         }
                    }
                }
            } else {
                # File is empty
                 $content = "[EMPTY FILE]"
                 $fileContentRead = $true # Mark as "read" since we know it's empty
            }

            # Add the content (or error message) to the output file
            Add-Content -Path $outputFile -Value $content

            # Add file footer to output
            Add-Content -Path $outputFile -Value "`n--- END FILE: $relativePath ---`n"

        } catch {
            # Catch any broader error during the Add-Content stages etc.
            $errorMessage = "ERROR processing block for file '$relativePath': $($_.Exception.Message)"
            Write-Error $errorMessage
            # Ensure footer is added even on outer error
            Add-Content -Path $outputFile -Value $errorMessage
            Add-Content -Path $outputFile -Value "`n--- END FILE: $relativePath ---`n"
        }
    }
}

Write-Host "--- Script Finished ---"
Write-Host "Processed $processedCount files."
Write-Host "Excluded $excludedCount files."
Write-Host "Output saved to: $outputFile"

# Optional: Copy to clipboard (Windows) - Uncomment if desired
# Get-Content -Path $outputFile | Set-Clipboard
# if ($?) { Write-Host "Output also copied to clipboard." }
--- END FILE: create_context.ps1 ---

--- START FILE: eslint.config.mjs ---
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

--- END FILE: eslint.config.mjs ---

--- START FILE: generate-tree.cjs ---
const fs = require('fs').promises;
const path = require('path');

// --- Configuration ---
const rootDir = '.'; // Use '.' for the current directory
const outputFile = 'project-tree.txt';
const ignoreList = [
    // Core ignores
    'node_modules',
    '.next',
    '.git',
    // Build/Cache/Output
    'dist',
    'build',
    'out',
    'coverage',
    '.swc',
    // Editor/OS specific
    '.vscode',
    '.idea',
    '.DS_Store',
    'Thumbs.db',
    // Logs & Environment files (often sensitive or noisy)
    '.env',
    '.env.local',
    '.env.development',
    '.env.production',
    '.env.test',
    'npm-debug.log*',
    'yarn-debug.log*',
    'yarn-error.log*',
    '*.log',

    // --- NEWLY ADDED / REFINED IGNORES ---
    'migrations',         // Ignore prisma migrations directory
    'dev.db',             // Ignore local dev database file
    'uploads',            // Ignore user uploads directory within public/
    'generated',          // Ignore generated code directories (like Prisma client in src/generated)
    'package-lock.json',  // Ignore lock files (add others if needed: yarn.lock, pnpm-lock.yaml)
    'yarn.lock',
    'pnpm-lock.yaml',
    'next-env.d.ts',      // Ignore Next.js auto-generated types
    'generate-tree.js',   // Ignore this script itself
    // --- End NEWLY ADDED / REFINED IGNORES ---

    outputFile // Ignore the script's own output file (already present)
];
// --- End Configuration ---

const ignoreSet = new Set(ignoreList);

async function generateTree(dir, prefix = '') {
    let output = '';
    let entries;

    try {
        // Read directory contents, getting file types directly
        entries = await fs.readdir(dir, { withFileTypes: true });
    } catch (err) {
        // Handle potential permission errors gracefully
        console.warn(`\n[Warning] Could not read directory: ${dir} (${err.code || err.message})`);
        return `${prefix}└── [Error reading directory]\n`;
    }

    // Filter out ignored entries
    const filteredEntries = entries.filter(entry => !ignoreSet.has(entry.name));

    // Sort entries: directories first, then files, alphabetically
    filteredEntries.sort((a, b) => {
        if (a.isDirectory() && !b.isDirectory()) return -1;
        if (!a.isDirectory() && b.isDirectory()) return 1;
        return a.name.localeCompare(b.name);
    });

    for (let i = 0; i < filteredEntries.length; i++) {
        const entry = filteredEntries[i];
        const connector = i === filteredEntries.length - 1 ? '└── ' : '├── ';
        const entryPath = path.join(dir, entry.name);

        output += prefix + connector + entry.name + '\n';

        if (entry.isDirectory()) {
            const newPrefix = prefix + (i === filteredEntries.length - 1 ? '    ' : '│   ');
            // Recursively call for subdirectories
            output += await generateTree(entryPath, newPrefix);
        }
        // Files are just listed, no further recursion needed
    }
    return output;
}

async function main() {
    const resolvedRootDir = path.resolve(rootDir);
    console.log(`Generating project tree for: ${resolvedRootDir}`);
    console.log(`Ignoring: ${Array.from(ignoreSet).join(', ')}`);

    // Start the tree output with the root directory name
    let treeOutput = path.basename(resolvedRootDir) + '\n';
    treeOutput += await generateTree(resolvedRootDir); // Pass resolved path

    try {
        await fs.writeFile(outputFile, treeOutput);
        console.log(`\nProject tree successfully saved to: ${outputFile}`);
    } catch (err) {
        console.error(`\n[Error] Failed to write output file: ${outputFile}`, err);
    }
}

main().catch(console.error);
--- END FILE: generate-tree.cjs ---

--- START FILE: next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

--- END FILE: next-env.d.ts ---

--- START FILE: next.config.ts ---
// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  // The 'images' configuration block
  images: {
    // Keep your existing SVG settings if needed
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",

    // Configure allowed external image domains here
    remotePatterns: [
      // Keep existing patterns if you still need them (e.g., for ucarecdn)
      {
        protocol: 'https',
        hostname: 'ucarecdn.com', // Google logo source
        port: '',
        pathname: '/**', // Allow any path on this host
      },

      // --- THIS IS THE NEW PATTERN YOU NEED TO ADD ---
      {
        protocol: 'https',                // Protocol used by the site (usually https)
        hostname: 'www.spcdavao.edu.ph',  // The specific domain name
        port: '',                         // Leave empty for default ports (80/443)
        pathname: '/wp-content/uploads/**', // Allow images specifically from the uploads path
                                          // Using '/**' would allow any path, '/wp-content/uploads/**' is slightly more specific/secure
      },
      // --- END OF NEW PATTERN ---

      // Add any other domains you might need here in the future
    ],
  },
  // Add other Next.js configurations here if you have them (e.g., reactStrictMode)
};

// Export the configuration object
export default nextConfig;
--- END FILE: next.config.ts ---

--- START FILE: package.json ---
{
  "name": "smls-sfms",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "seed": "node prisma/seed.cjs",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.6.0",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^3.0.2",
    "next": "15.3.1",
    "next-auth": "^4.24.11",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "uuid": "^11.1.0",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20.17.32",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "postcss": "^8.5.3",
    "prisma": "^6.6.0",
    "tailwindcss": "^3.4.17",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  }
}

--- END FILE: package.json ---

--- START FILE: postcss.config.mjs ---
// postcss.config.mjs (Using export default for ES Module compatibility)
const config = {
  plugins: {
    tailwindcss: {}, // For v3
    autoprefixer: {}, // For v3
  }
};
export default config; // Use export default
--- END FILE: postcss.config.mjs ---

--- START FILE: tailwind.config.ts ---
// tailwind.config.ts
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      // Add the font family extension
      fontFamily: {
        // Define 'sans' to use the Inter variable, making it the default sans-serif font
        // Tailwind will automatically apply this to the body via preflight/base styles
        sans: ['var(--font-inter)', 'sans-serif'],
      },
    },
  },
  plugins: [],
};
export default config;
--- END FILE: tailwind.config.ts ---

--- START FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "prisma/seed.cjs"],
  "exclude": ["node_modules"]
}

--- END FILE: tsconfig.json ---


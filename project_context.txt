--- Project Context for smls-sfms ---
--- Generated on: 2025-05-17T03:33:01.410Z ---
--- Root Directory: c:\Users\user\smls-sfms ---

--- START FILE: .roo\mcp.json ---
{
  "mcpServers": {}
}
--- END FILE: .roo\mcp.json ---

--- START FILE: prisma\add_dummy_faculty_1.cjs ---
// prisma/add_dummy_faculty_1.cjs
// Adds 'Dr. Adam Apple' with email faculty1@test.com and varied CV data.
// IMPORTANT: Does NOT delete existing data. Files won't actually exist.

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration for Dummy Faculty 1 ---
const facultyEmail = 'faculty1@test.com';
const facultyPassword = 'password123';    // Uniform password
const facultyName = 'Dr. Adam Apple';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add dummy faculty: ${facultyName} (${facultyEmail})`);

  const existingUser = await prisma.user.findUnique({
    where: { email: facultyEmail },
  });

  if (existingUser) {
    console.log(`Faculty user with email ${facultyEmail} already exists. Skipping creation.`);
    await prisma.$disconnect();
    return;
  }

  console.log(`Creating faculty user ${facultyEmail}...`);
  const hashedPassword = await bcrypt.hash(facultyPassword, 10);
  const facultyUser = await prisma.user.create({
    data: {
      name: facultyName,
      email: facultyEmail.toLowerCase().trim(),
      password: hashedPassword,
      role: 'FACULTY',
    },
    select: { id: true, email: true }
  });
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);

  const userId = facultyUser.id;

  // --- Add CV details ---
  try {
    console.log("Adding academic qualifications...");
    await prisma.academicQualification.createMany({
      data: [
        { userId, degree: 'PhD in Fictional Science', institution: 'Testville University', program: 'Advanced Theories', yearCompleted: 2018, diplomaFileUrl: `/uploads/qualifications/${userId}/phd_fictional_apple.pdf`, status: 'APPROVED' },
        { userId, degree: 'MS in Imaginary Studies', institution: 'Placeholder College', program: 'Core Concepts', yearCompleted: 2015, diplomaFileUrl: `/uploads/qualifications/${userId}/ms_imaginary_apple.pdf`, status: 'PENDING' },
        { userId, degree: 'BS in Applied Logic', institution: 'Logic Institute', program: 'Critical Thinking', yearCompleted: 2012, diplomaFileUrl: `/uploads/qualifications/${userId}/bs_logic_apple.pdf`, status: 'APPROVED' },
      ]
    });

    console.log("Adding professional licenses...");
    await prisma.professionalLicense.createMany({
      data: [
        { userId, examination: 'Certified Idea Implementer (CII)', monthYear: 'July 2019', licenseNumber: `CII-AA-${Math.floor(100000 + Math.random() * 900000)}`, expiration: new Date('2029-07-31'), licenseFileUrl: `/uploads/licenses/${userId}/cii_apple.pdf`, status: 'APPROVED' },
        { userId, examination: 'Registered Test Data Analyst (RTDA)', monthYear: 'Jan 2016', licenseNumber: `RTDA-AA-${Math.floor(10000 + Math.random() * 90000)}`, expiration: new Date('2026-01-31'), licenseFileUrl: `/uploads/licenses/${userId}/rtda_apple.png`, status: 'APPROVED' },
      ]
    });

    console.log("Adding work experiences...");
    await prisma.workExperience.createMany({
      data: [
        { userId, institution: 'Innovate Solutions Ltd.', position: 'Lead Thinker', natureOfWork: 'Developing conceptual frameworks and strategic plans.', inclusiveYears: '2020-Present', proofUrl: `/uploads/workexp/${userId}/innovate_coe_apple.pdf`, status: 'APPROVED' },
        { userId, institution: 'Old School Corp.', position: 'Junior Analyst', natureOfWork: 'Data collection and report generation.', inclusiveYears: '2018-2020', proofUrl: `/uploads/workexp/${userId}/oldschool_coe_apple.jpg`, status: 'REJECTED', rejectionReason: "Proof of employment unclear." },
        { userId, institution: 'Data Insights Group', position: 'Research Assistant', natureOfWork: 'Assisted in market research projects.', inclusiveYears: '2015-2018', proofUrl: `/uploads/workexp/${userId}/datainsights_coe_apple.pdf`, status: 'PENDING' },
      ]
    });

    console.log("Adding professional affiliations...");
    await prisma.professionalAffiliation.createMany({
      data: [
        { userId, organization: 'Global Thinkers Association (GTA)', position: 'Member', inclusiveYears: '2019-Present', membershipProofUrl: `/uploads/affiliations/${userId}/gta_apple.pdf`, status: 'APPROVED' },
        { userId, organization: 'Institute of Fictional Sciences (IFS)', position: 'Associate', inclusiveYears: '2017-Present', membershipProofUrl: null, status: 'APPROVED' },
      ]
    });

    console.log("Adding awards/recognitions...");
    await prisma.awardRecognition.createMany({
      data: [
        { userId, awardName: 'Top Innovator Award', awardingBody: 'Innovate Solutions Ltd.', yearReceived: 2022, certificateUrl: `/uploads/awards/${userId}/top_innovator_apple.pdf`, status: 'APPROVED' },
      ]
    });

    console.log("Adding professional developments...");
    await prisma.professionalDevelopment.createMany({
      data: [
        { userId, title: 'Advanced Conceptualization Workshop', organizer: 'ThinkTank International', dateLocation: 'Nov 2023, Online', certificateFileUrl: `/uploads/profdev/${userId}/conceptualization_apple.pdf`, status: 'APPROVED' },
        { userId, title: 'Data Analysis Bootcamp', organizer: 'StatWizards Academy', dateLocation: 'June 2021, Virtual', certificateFileUrl: `/uploads/profdev/${userId}/data_bootcamp_apple.png`, status: 'PENDING' },
      ]
    });

    // --- Linking to Specializations (Example) ---
    // Ensure these specializations exist in your DB.
    const specsToLink = ['Physics', 'Hematology']; // You can change these as needed
    for (const specName of specsToLink) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
            console.log(`Linking to '${specName}' specialization...`);
            await prisma.user.update({
                where: { id: userId },
                data: { specializations: { connect: { id: spec.id } } }
            });
        } else {
            console.warn(`Specialization '${specName}' not found. Skipping linking for this user.`);
        }
    }

    console.log(`Successfully added CV details for ${facultyEmail}.`);

  } catch (error) {
    console.error(`Error adding CV details for ${facultyEmail} (User created but CV data failed):`, error);
    process.exit(1);
  } finally {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  }
}

main()
  .catch(async (e) => {
    console.error("Script execution failed:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
--- END FILE: prisma\add_dummy_faculty_1.cjs ---

--- START FILE: prisma\add_dummy_faculty_2.cjs ---
// prisma/add_dummy_faculty_2.cjs
// Adds 'Dr. Brenda Berry' with email faculty2@test.com

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');
const prisma = new PrismaClient();

// --- Configuration ---
const facultyEmail = 'faculty2@test.com';
const facultyPassword = 'password123';
const facultyName = 'Dr. Brenda Berry';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add dummy faculty: ${facultyName} (${facultyEmail})`);
  const existingUser = await prisma.user.findUnique({ where: { email: facultyEmail } });
  if (existingUser) {
    console.log(`User ${facultyEmail} already exists. Skipping.`);
    await prisma.$disconnect();
    return;
  }

  const hashedPassword = await bcrypt.hash(facultyPassword, 10);
  const facultyUser = await prisma.user.create({
    data: { name: facultyName, email: facultyEmail.toLowerCase().trim(), password: hashedPassword, role: 'FACULTY' },
    select: { id: true, email: true }
  });
  console.log(`User ${facultyUser.email} created (ID: ${facultyUser.id}).`);
  const userId = facultyUser.id;

  try {
    await prisma.academicQualification.createMany({
      data: [
        { userId, degree: 'MS Clinical Chemistry', institution: 'Science National University', program: 'Advanced Diagnostics', yearCompleted: 2019, diplomaFileUrl: `/uploads/qualifications/${userId}/ms_clinchem_berry.pdf`, status: 'APPROVED' },
        { userId, degree: 'BS Medical Laboratory Science', institution: 'Tech Institute of Health', program: 'MLS Generalist', yearCompleted: 2016, diplomaFileUrl: `/uploads/qualifications/${userId}/bsmls_berry.pdf`, status: 'APPROVED' },
      ]
    });
    await prisma.professionalLicense.createMany({
      data: [
        { userId, examination: 'Registered Medical Technologist (RMT)', monthYear: 'Aug 2016', licenseNumber: `RMT-BB-${Math.floor(100000 + Math.random() * 900000)}`, expiration: new Date('2027-08-15'), licenseFileUrl: `/uploads/licenses/${userId}/rmt_berry.pdf`, status: 'APPROVED' },
        { userId, examination: 'Clinical Chemistry Specialist (ASCP)', monthYear: 'Nov 2020', licenseNumber: `CC-BB-${Math.floor(10000 + Math.random() * 90000)}`, expiration: new Date('2026-11-30'), licenseFileUrl: `/uploads/licenses/${userId}/cc_ascp_berry.png`, status: 'PENDING' },
      ]
    });
    await prisma.workExperience.createMany({
      data: [
        { userId, institution: 'City General Hospital Lab', position: 'Clinical Chemist', natureOfWork: 'Routine and special chemistry testing, instrument maintenance.', inclusiveYears: '2017-Present', proofUrl: `/uploads/workexp/${userId}/cgh_coe_berry.pdf`, status: 'APPROVED' },
      ]
    });
     await prisma.professionalDevelopment.createMany({
      data: [
        { userId, title: 'Advanced Techniques in Clinical Enzymology', organizer: 'ChemEx Society', dateLocation: 'May 2023, Online', certificateFileUrl: `/uploads/profdev/${userId}/enzymology_berry.pdf`, status: 'APPROVED' },
      ]
    });

    const specsToLink = ['Clinical Chemistry', 'Hematology'];
    for (const specName of specsToLink) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
            console.log(`Linking ${facultyName} to '${specName}'...`);
            await prisma.user.update({ where: { id: userId }, data: { specializations: { connect: { id: spec.id } } } });
        } else { console.warn(`Specialization '${specName}' not found. Skipping.`); }
    }
    console.log(`Successfully added CV details for ${facultyEmail}.`);
  } catch (error) {
    console.error(`Error adding CV details for ${facultyEmail}:`, error); process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}
main().catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1); });
--- END FILE: prisma\add_dummy_faculty_2.cjs ---

--- START FILE: prisma\add_dummy_faculty_3.cjs ---
// prisma/add_dummy_faculty_3.cjs
// Adds 'Prof. Charles "Charlie" Davis' with email faculty3@test.com

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');
const prisma = new PrismaClient();

// --- Configuration ---
const facultyEmail = 'faculty3@test.com';
const facultyPassword = 'password123';
const facultyName = 'Prof. Charles "Charlie" Davis';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add dummy faculty: ${facultyName} (${facultyEmail})`);
  const existingUser = await prisma.user.findUnique({ where: { email: facultyEmail } });
  if (existingUser) {
    console.log(`User ${facultyEmail} already exists. Skipping.`);
    await prisma.$disconnect();
    return;
  }

  const hashedPassword = await bcrypt.hash(facultyPassword, 10);
  const facultyUser = await prisma.user.create({
    data: { name: facultyName, email: facultyEmail.toLowerCase().trim(), password: hashedPassword, role: 'FACULTY' },
    select: { id: true, email: true }
  });
  console.log(`User ${facultyUser.email} created (ID: ${facultyUser.id}).`);
  const userId = facultyUser.id;

  try {
    await prisma.academicQualification.createMany({
      data: [
        { userId, degree: 'MSc Microbiology & Immunology', institution: 'State Research University', program: 'Pathogen Research', yearCompleted: 2014, diplomaFileUrl: `/uploads/qualifications/${userId}/msc_microimm_davis.pdf`, status: 'APPROVED' },
        { userId, degree: 'BSc Biology', institution: 'Community College of Science', program: 'General Biology', yearCompleted: 2011, diplomaFileUrl: `/uploads/qualifications/${userId}/bsc_bio_davis.pdf`, status: 'REJECTED', rejectionReason: "Transcript required, not just diploma." },
      ]
    });
    await prisma.professionalLicense.createMany({
      data: [
        { userId, examination: 'Registered Microbiologist (RM)', monthYear: 'Mar 2015', licenseNumber: `RM-CD-${Math.floor(100000 + Math.random() * 900000)}`, expiration: new Date('2026-03-31'), licenseFileUrl: `/uploads/licenses/${userId}/rm_davis.pdf`, status: 'APPROVED' },
      ]
    });
    await prisma.workExperience.createMany({
      data: [
        { userId, institution: 'University Teaching Hospital', position: 'Microbiology Lab Supervisor', natureOfWork: 'Overseeing diagnostic microbiology, staff training, quality assurance.', inclusiveYears: '2016-Present', proofUrl: `/uploads/workexp/${userId}/uth_coe_davis.pdf`, status: 'APPROVED' },
        { userId, institution: 'PharmaCorp Diagnostics', position: 'Junior Microbiologist', natureOfWork: 'Culture and sensitivity testing.', inclusiveYears: '2014-2016', proofUrl: `/uploads/workexp/${userId}/pharma_coe_davis.jpg`, status: 'APPROVED' },
      ]
    });
    await prisma.professionalAffiliation.createMany({
      data: [
        { userId, organization: 'Society for Applied Microbiology (SAM)', position: 'Active Member', inclusiveYears: '2015-Present', membershipProofUrl: null, status: 'PENDING' },
      ]
    });
    await prisma.publication.createMany({
      data: [
        { userId, researchTitle: 'Emerging Antibiotic Resistance Patterns in Urban Hospitals', journal: 'Journal of Infectious Diseases', datePublished: new Date('2021-05-20'), doiLink: `10.1093/infdis/${userId.substring(0,4)}210520`, pdfUrl: `/uploads/publications/${userId}/jid_resistance_davis.pdf`, status: 'APPROVED' },
      ]
    });

    const specsToLink = ['Microbiology', 'Immunology', 'Research Methodology'];
    for (const specName of specsToLink) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
            console.log(`Linking ${facultyName} to '${specName}'...`);
            await prisma.user.update({ where: { id: userId }, data: { specializations: { connect: { id: spec.id } } } });
        } else { console.warn(`Specialization '${specName}' not found. Skipping.`); }
    }
    console.log(`Successfully added CV details for ${facultyEmail}.`);
  } catch (error) {
    console.error(`Error adding CV details for ${facultyEmail}:`, error); process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}
main().catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1); });
--- END FILE: prisma\add_dummy_faculty_3.cjs ---

--- START FILE: prisma\add_dummy_faculty_4.cjs ---
// prisma/add_dummy_faculty_4.cjs
// Adds 'Ms. Diana Evans' with email faculty4@test.com

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');
const prisma = new PrismaClient();

// --- Configuration ---
const facultyEmail = 'faculty4@test.com';
const facultyPassword = 'password123';
const facultyName = 'Ms. Diana Evans';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add dummy faculty: ${facultyName} (${facultyEmail})`);
  const existingUser = await prisma.user.findUnique({ where: { email: facultyEmail } });
  if (existingUser) {
    console.log(`User ${facultyEmail} already exists. Skipping.`);
    await prisma.$disconnect();
    return;
  }

  const hashedPassword = await bcrypt.hash(facultyPassword, 10);
  const facultyUser = await prisma.user.create({
    data: { name: facultyName, email: facultyEmail.toLowerCase().trim(), password: hashedPassword, role: 'FACULTY' },
    select: { id: true, email: true }
  });
  console.log(`User ${facultyUser.email} created (ID: ${facultyUser.id}).`);
  const userId = facultyUser.id;

  try {
    await prisma.academicQualification.createMany({
      data: [
        { userId, degree: 'MPH - Master of Public Health', institution: 'National Institute of Public Health', program: 'Epidemiology', yearCompleted: 2020, diplomaFileUrl: `/uploads/qualifications/${userId}/mph_evans.pdf`, status: 'APPROVED' },
        { userId, degree: 'BS Nursing', institution: 'City College of Nursing', program: 'General Nursing', yearCompleted: 2017, diplomaFileUrl: `/uploads/qualifications/${userId}/bsn_evans.pdf`, status: 'APPROVED' },
      ]
    });
     await prisma.professionalLicense.createMany({
      data: [
        { userId, examination: 'Registered Nurse (RN)', monthYear: 'May 2017', licenseNumber: `RN-DE-${Math.floor(100000 + Math.random() * 900000)}`, expiration: new Date('2028-05-31'), licenseFileUrl: `/uploads/licenses/${userId}/rn_evans.pdf`, status: 'APPROVED' },
      ]
    });
    await prisma.workExperience.createMany({
      data: [
        { userId, institution: 'County Health Department', position: 'Public Health Analyst', natureOfWork: 'Disease surveillance, health education program development.', inclusiveYears: '2020-Present', proofUrl: `/uploads/workexp/${userId}/county_coe_evans.pdf`, status: 'PENDING' },
      ]
    });
    await prisma.communityInvolvement.createMany({
      data: [
        { userId, engagementTitle: 'Community Health Fair Organizer', role: 'Lead Organizer', locationDate: 'Downtown Community Center, Annually since 2021', proofUrl: `/uploads/community/${userId}/healthfair_evans.pdf`, status: 'APPROVED' },
      ]
    });
    await prisma.conferencePresentation.createMany({
      data: [
        { userId, paperTitle: 'Impact of Health Literacy on Vaccination Rates', eventName: 'National Public Health Conference', dateLocation: 'April 2023, Atlanta, GA', proofUrl: `/uploads/presentations/${userId}/nphc_evans.pdf`, status: 'APPROVED' },
      ]
    });

    const specsToLink = ['Public Health', 'Research Methodology']; // Example
    for (const specName of specsToLink) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
            console.log(`Linking ${facultyName} to '${specName}'...`);
            await prisma.user.update({ where: { id: userId }, data: { specializations: { connect: { id: spec.id } } } });
        } else { console.warn(`Specialization '${specName}' not found. Skipping.`); }
    }
    console.log(`Successfully added CV details for ${facultyEmail}.`);
  } catch (error) {
    console.error(`Error adding CV details for ${facultyEmail}:`, error); process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}
main().catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1); });
--- END FILE: prisma\add_dummy_faculty_4.cjs ---

--- START FILE: prisma\add_dummy_faculty_5.cjs ---
// prisma/add_dummy_faculty_5.cjs
// Adds 'Mr. Edward "Ed" Foster' with email faculty5@test.com

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');
const prisma = new PrismaClient();

// --- Configuration ---
const facultyEmail = 'faculty5@test.com';
const facultyPassword = 'password123';
const facultyName = 'Mr. Edward "Ed" Foster';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add dummy faculty: ${facultyName} (${facultyEmail})`);
  const existingUser = await prisma.user.findUnique({ where: { email: facultyEmail } });
  if (existingUser) {
    console.log(`User ${facultyEmail} already exists. Skipping.`);
    await prisma.$disconnect();
    return;
  }

  const hashedPassword = await bcrypt.hash(facultyPassword, 10);
  const facultyUser = await prisma.user.create({
    data: { name: facultyName, email: facultyEmail.toLowerCase().trim(), password: hashedPassword, role: 'FACULTY' },
    select: { id: true, email: true }
  });
  console.log(`User ${facultyUser.email} created (ID: ${facultyUser.id}).`);
  const userId = facultyUser.id;

  try {
    await prisma.academicQualification.createMany({
      data: [
        { userId, degree: 'MBA Healthcare Management', institution: 'Business School of Excellence', program: 'Healthcare Administration', yearCompleted: 2017, diplomaFileUrl: `/uploads/qualifications/${userId}/mba_foster.pdf`, status: 'APPROVED' },
        { userId, degree: 'BSc Health Sciences', institution: 'University of Applied Health', program: 'Health Admin Track', yearCompleted: 2014, diplomaFileUrl: `/uploads/qualifications/${userId}/bs_healthsci_foster.pdf`, status: 'APPROVED' },
      ]
    });
    await prisma.workExperience.createMany({
      data: [
        { userId, institution: 'Regional Medical Center', position: 'Laboratory Manager', natureOfWork: 'Operational management, budgeting, staffing, compliance for clinical labs.', inclusiveYears: '2018-Present', proofUrl: `/uploads/workexp/${userId}/rmc_coe_foster.pdf`, status: 'APPROVED' },
        { userId, institution: 'Metro Labs Inc.', position: 'Assistant Lab Supervisor', natureOfWork: 'Assisted in daily lab operations and quality control.', inclusiveYears: '2015-2018', proofUrl: `/uploads/workexp/${userId}/metro_coe_foster.jpg`, status: 'REJECTED', rejectionReason: "Dates on COE do not match submitted years." },
      ]
    });
    await prisma.professionalDevelopment.createMany({
      data: [
        { userId, title: 'Advanced Laboratory Leadership Program', organizer: 'Healthcare Leaders Institute', dateLocation: 'July 2022, Chicago, IL', certificateFileUrl: `/uploads/profdev/${userId}/lab_leadership_foster.pdf`, status: 'APPROVED' },
        { userId, title: 'Financial Management for Healthcare', organizer: 'BusinessPro Seminars', dateLocation: 'Jan 2020, Online', certificateFileUrl: null, status: 'PENDING' },
      ]
    });
    await prisma.awardRecognition.createMany({
      data: [
        { userId, awardName: 'Manager of the Year', awardingBody: 'Regional Medical Center', yearReceived: 2021, certificateUrl: `/uploads/awards/${userId}/manager_award_foster.pdf`, status: 'APPROVED' },
      ]
    });

    const specsToLink = ['Laboratory Management', 'Medical Ethics', 'Anatomic Pathology']; // Example
    for (const specName of specsToLink) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
            console.log(`Linking ${facultyName} to '${specName}'...`);
            await prisma.user.update({ where: { id: userId }, data: { specializations: { connect: { id: spec.id } } } });
        } else { console.warn(`Specialization '${specName}' not found. Skipping.`); }
    }
    console.log(`Successfully added CV details for ${facultyEmail}.`);
  } catch (error) {
    console.error(`Error adding CV details for ${facultyEmail}:`, error); process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}
main().catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1); });
--- END FILE: prisma\add_dummy_faculty_5.cjs ---

--- START FILE: prisma\add_faculty_hematology.cjs ---
// prisma/add_faculty_hematology.cjs
// Adds 'Dr. Heidi Hematology' with placeholder file URLs.
// IMPORTANT: Does NOT delete existing data. Files won't actually exist.

const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration ---
const facultyEmail = 'faculty1@test.com';
const facultyPassword = 'password123';
const facultyName = 'Dr. Heidi Hematology';
// --- End Configuration ---

async function main() {
  console.log(`Starting script to add faculty: ${facultyEmail}`);

  const existingUser = await prisma.user.findUnique({
    where: { email: facultyEmail },
  });

  if (existingUser) {
    console.log(`Faculty user with email ${facultyEmail} already exists. Skipping creation.`);
    return;
  }

  console.log(`Creating faculty user ${facultyEmail}...`);
  const facultyUser = await createFacultyUser();
  if (!facultyUser) { return; }
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);

  // --- Add CV details (Pass userId for dummy URLs) ---
  try {
      console.log("Adding academic qualifications...");
      await addAcademicQualifications(facultyUser.id); // Pass ID
      console.log("Adding professional licenses...");
      await addProfessionalLicenses(facultyUser.id); // Pass ID
      console.log("Adding work experiences...");
      await addWorkExperiences(facultyUser.id); // Pass ID
      console.log("Adding professional affiliations...");
      await addProfessionalAffiliations(facultyUser.id); // Pass ID
      console.log("Adding awards/recognitions...");
      await addAwardsRecognitions(facultyUser.id); // Pass ID
      console.log("Adding professional developments...");
      await addProfessionalDevelopments(facultyUser.id); // Pass ID
      console.log("Skipping community involvements for this user.");
      console.log("Skipping publications for this user.");
      console.log("Adding conference presentations...");
      await addConferencePresentations(facultyUser.id); // Pass ID

      console.log(`Successfully added CV details for ${facultyEmail}.`);

  } catch(error) {
      console.error(`Error adding CV details for ${facultyEmail} (User created but CV data failed):`, error);
      process.exit(1);
  }

  console.log(`Script finished for adding ${facultyEmail}.`);
}

// --- Helper Functions ---

async function createFacultyUser() {
    // ... (createFacultyUser function remains the same) ...
    try {
        const hashedPassword = await bcrypt.hash(facultyPassword, 10);
        console.log(`Password hashed for ${facultyEmail}.`);

        return await prisma.user.create({
            data: {
            name: facultyName,
            email: facultyEmail.toLowerCase().trim(),
            password: hashedPassword,
            role: 'FACULTY',
            },
            select: { id: true, email: true }
        });
    } catch (error) {
        console.error(`Error during faculty user creation (${facultyEmail}):`, error);
        if (error.code === 'P2002') {
            console.error(`Error: Email ${facultyEmail} already exists (constraint violation).`);
        }
        return null;
    }
}

// --- Modified Helper functions to include dummy URLs ---

async function addAcademicQualifications(userId) { // Accept userId
  await prisma.academicQualification.createMany({
    data: [
      {
        userId,
        degree: 'MS Medical Technology',
        institution: 'University of Santo Tomas',
        program: 'Specialization in Hematology',
        yearCompleted: 2016,
        // Example placeholder URL
        diplomaFileUrl: `/uploads/qualifications/${userId}/dummy-ms-diploma.pdf`,
        status: 'APPROVED'
      },
      {
        userId,
        degree: 'BS Medical Technology',
        institution: 'San Pedro College',
        program: 'Medical Technology',
        yearCompleted: 2013,
        // Example placeholder URL
        diplomaFileUrl: `/uploads/qualifications/${userId}/dummy-bs-diploma.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalLicenses(userId) { // Accept userId
  await prisma.professionalLicense.createMany({
    data: [
      {
        userId,
        examination: 'Medical Technologist Licensure',
        monthYear: 'August 2013',
        licenseNumber: '0369121',
        expiration: new Date('2027-08-20'),
        // Example placeholder URL
        licenseFileUrl: `/uploads/licenses/${userId}/dummy-rmt-license.png`,
        status: 'APPROVED'
      },
      {
        userId,
        examination: 'Blood Bank Specialist (ASCP)',
        monthYear: 'November 2019',
        licenseNumber: 'SBB-HH-002',
        expiration: new Date('2026-11-30'),
        // Example placeholder URL
        licenseFileUrl: `/uploads/licenses/${userId}/dummy-sbb-cert.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addWorkExperiences(userId) { // Accept userId
   await prisma.workExperience.createMany({
    data: [
      {
        userId,
        institution: 'San Pedro College',
        position: 'Instructor',
        natureOfWork: 'Teaching Hematology, Immunohematology & Serology',
        inclusiveYears: '2017-Present',
        // Example placeholder URL
        proofUrl: `/uploads/workexp/${userId}/dummy-spc-coe.pdf`,
        status: 'APPROVED'
      },
      {
        userId,
        institution: 'Southern Philippines Medical Center - Blood Bank',
        position: 'Medical Technologist II',
        natureOfWork: 'Blood banking procedures, component preparation, compatibility testing',
        inclusiveYears: '2014-2017',
        // Example placeholder URL
        proofUrl: `/uploads/workexp/${userId}/dummy-spmc-coe.jpg`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalAffiliations(userId) { // Accept userId
  await prisma.professionalAffiliation.createMany({
    data: [
      {
        userId,
        organization: 'Philippine Association of Medical Technologists (PAMET)',
        position: 'Member, Committee on Hematology',
        inclusiveYears: '2013-Present',
        // Example placeholder URL
        membershipProofUrl: `/uploads/affiliations/${userId}/dummy-pamet-id.png`,
        status: 'APPROVED'
      },
      {
        userId,
        organization: 'Philippine Blood Coordinating Council (PBCC)',
        position: 'Affiliate Member',
        inclusiveYears: '2018-Present',
        // Example placeholder URL (optional, could be null)
        membershipProofUrl: `/uploads/affiliations/${userId}/dummy-pbcc-cert.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addAwardsRecognitions(userId) { // Accept userId
  await prisma.awardRecognition.createMany({
    data: [
      {
        userId,
        awardName: 'Excellence in Teaching - Junior Faculty',
        awardingBody: 'San Pedro College - Academic Council',
        yearReceived: 2020,
        // Example placeholder URL
        certificateUrl: `/uploads/awards/${userId}/dummy-teaching-award.pdf`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalDevelopments(userId) { // Accept userId
   await prisma.professionalDevelopment.createMany({
    data: [
      {
        userId,
        title: 'Advanced Concepts in Immunohematology',
        organizer: 'PBCC National Convention',
        dateLocation: 'May 2023, Iloilo City',
        // Example placeholder URL
        certificateFileUrl: `/uploads/profdev/${userId}/dummy-pbcc-cert.pdf`,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Flow Cytometry Principles and Applications',
        organizer: 'Hematology Experts Inc.',
        dateLocation: 'September 2022, Online',
        // Example placeholder URL
        certificateFileUrl: `/uploads/profdev/${userId}/dummy-flowcyto-cert.png`,
        status: 'APPROVED'
      }
    ]
  });
}

async function addCommunityInvolvements(userId) { // Accept userId
  // Skipping for this user
  console.log("Skipping community involvements for this user.");
}

async function addPublications(userId) { // Accept userId
  // Skipping for this user
  console.log("Skipping publications for this user.");
}

async function addConferencePresentations(userId) { // Accept userId
  await prisma.conferencePresentation.createMany({
    data: [
      {
        userId,
        paperTitle: 'Case Study: Rare Blood Group Antigen Identification',
        eventName: 'PAMET Southern Mindanao Regional Conference',
        dateLocation: 'July 2023, General Santos City',
        // Example placeholder URL
        proofUrl: `/uploads/presentations/${userId}/dummy-pamet-poster-proof.pdf`,
        status: 'PENDING'
      }
    ]
  });
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\add_faculty_hematology.cjs ---

--- START FILE: prisma\add_faculty.cjs ---
// prisma/add_faculty.cjs
// Adds ONE faculty user ('Prof. Ken Neutron') with details.
// IMPORTANT: Does NOT delete existing data.

// Use the direct path that worked before
const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration for this specific faculty ---
const facultyEmail = 'faculty2@test.com';
const facultyPassword = 'password123'; // Choose a password
const facultyName = 'Prof. Ken Neutron';
// --- End Configuration ---


async function main() {
  console.log(`Starting script to add faculty: ${facultyEmail}`);

  // 1. Check if this specific faculty user already exists
  const existingUser = await prisma.user.findUnique({
    where: { email: facultyEmail },
  });

  if (existingUser) {
    console.log(`Faculty user with email ${facultyEmail} already exists. Skipping creation.`);
    return; // Exit if this user exists
  }

  // --- Create the Faculty User ---
  console.log(`Creating faculty user ${facultyEmail}...`);
  const facultyUser = await createFacultyUser();
  if (!facultyUser) {
      // Error handled within createFacultyUser
      return;
  }
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);


  // --- Add CV details ---
  // Wrap additions in try...catch in case user creation succeeded but CV fails
  try {
      console.log("Adding academic qualifications...");
      await addAcademicQualifications(facultyUser.id);
      console.log("Adding professional licenses...");
      await addProfessionalLicenses(facultyUser.id);
      console.log("Adding work experiences...");
      await addWorkExperiences(facultyUser.id);
      console.log("Adding professional affiliations...");
      await addProfessionalAffiliations(facultyUser.id);
      console.log("Adding awards/recognitions...");
      await addAwardsRecognitions(facultyUser.id);
      console.log("Adding professional developments...");
      await addProfessionalDevelopments(facultyUser.id);
      console.log("Adding community involvements...");
      await addCommunityInvolvements(facultyUser.id);
      console.log("Adding publications...");
      await addPublications(facultyUser.id);
      console.log("Adding conference presentations...");
      await addConferencePresentations(facultyUser.id);

      console.log(`Successfully added CV details for ${facultyEmail}.`);

  } catch(error) {
      console.error(`Error adding CV details for ${facultyEmail} (User was created but CV data failed):`, error);
      // Decide if you want to delete the user if CV fails, or leave them partially created
      // await prisma.user.delete({ where: { id: facultyUser.id }});
      // console.log(`Cleaned up partially created user ${facultyEmail}.`);
      process.exit(1);
  }

  console.log(`Script finished for adding ${facultyEmail}.`);
}


// --- Helper Functions (Copied from previous seed, NO clearExistingData) ---

async function createFacultyUser() {
  try {
      const hashedPassword = await bcrypt.hash(facultyPassword, 10);
      console.log(`Password hashed for ${facultyEmail}.`);

      return await prisma.user.create({
        data: {
          name: facultyName,
          email: facultyEmail.toLowerCase().trim(),
          password: hashedPassword,
          role: 'FACULTY', // Use string literal
        },
        select: { id: true, email: true } // Select only needed fields
      });
  } catch (error) {
      console.error(`Error during faculty user creation (${facultyEmail}):`, error);
      // Handle potential unique constraint violation gracefully if check missed somehow
      if (error.code === 'P2002') {
          console.error(`Error: Email ${facultyEmail} already exists (constraint violation).`);
      }
      return null; // Indicate failure
  }
}

async function addAcademicQualifications(userId) {
  await prisma.academicQualification.createMany({
    data: [
      {
        userId,
        degree: 'MS Physics',
        institution: 'National Institute of Physics',
        program: 'Applied Physics',
        yearCompleted: 2014,
        diplomaFileUrl: null,
        status: 'APPROVED' // Use string literal
      },
      {
        userId,
        degree: 'BS Medical Technology',
        institution: 'San Pedro College',
        program: 'Medical Technology',
        yearCompleted: 2010,
        diplomaFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalLicenses(userId) {
  await prisma.professionalLicense.createMany({
    data: [
      {
        userId,
        examination: 'Medical Technologist Licensure',
        monthYear: 'March 2011',
        licenseNumber: '0246810', // Ensure this is unique if needed
        expiration: new Date('2025-03-15'),
        licenseFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        examination: 'Radiation Safety Officer Training',
        monthYear: 'July 2018',
        licenseNumber: 'RSO-KN-001', // Ensure this is unique if needed
        expiration: new Date('2026-07-31'),
        licenseFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addWorkExperiences(userId) {
   await prisma.workExperience.createMany({
    data: [
      {
        userId,
        institution: 'San Pedro College',
        position: 'Instructor / Lab Safety Officer',
        natureOfWork: 'Teaching Physics for Health Sciences, Managing Lab Safety Protocols',
        inclusiveYears: '2015-Present',
        proofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        institution: 'BioInstrumentation Inc.',
        position: 'Field Service Engineer',
        natureOfWork: 'Calibration and Maintenance of Laboratory Equipment',
        inclusiveYears: '2011-2015',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalAffiliations(userId) {
  await prisma.professionalAffiliation.createMany({
    data: [
      {
        userId,
        organization: 'Philippine Association of Medical Technologists (PAMET)',
        position: 'Member',
        inclusiveYears: '2011-Present',
        membershipProofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        organization: 'Samahang Pisika ng Pilipinas (SPP)',
        position: 'Associate Member',
        inclusiveYears: '2016-Present',
        membershipProofUrl: null,
        status: 'PENDING'
      }
    ]
  });
}

async function addAwardsRecognitions(userId) {
  await prisma.awardRecognition.createMany({
    data: [
      {
        userId,
        awardName: 'Laboratory Safety Excellence Award',
        awardingBody: 'SPC Safety Committee',
        yearReceived: 2021,
        certificateUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalDevelopments(userId) {
   await prisma.professionalDevelopment.createMany({
    data: [
      {
        userId,
        title: 'Training on Calibration of Spectrophotometers',
        organizer: 'Precision Instruments Ltd.',
        dateLocation: 'August 2022, Online',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Seminar on Occupational Safety and Health in Laboratories',
        organizer: 'DOLE / OSHC',
        dateLocation: 'April 2023, Davao City',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Modern Physics Applications in Medicine',
        organizer: 'SPP Annual Convention',
        dateLocation: 'October 2023, Cebu City',
        certificateFileUrl: null,
        status: 'REJECTED',
        rejectionReason: 'Certificate unclear.'
      }
    ]
  });
}

async function addCommunityInvolvements(userId) {
  await prisma.communityInvolvement.createMany({
    data: [
      {
        userId,
        engagementTitle: 'Career Talk: Medical Technology',
        role: 'Speaker',
        locationDate: 'Davao City National High School, Feb 2023',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addPublications(userId) {
  // No publications for this user in this example
  console.log("Skipping publications for this user.");
}

async function addConferencePresentations(userId) {
  await prisma.conferencePresentation.createMany({
    data: [
      {
        userId,
        paperTitle: 'Implementing Enhanced Safety Protocols in a University MedTech Laboratory',
        eventName: 'PAMET Davao Chapter Annual Meeting - Poster Session',
        dateLocation: 'November 2022, Davao City',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\add_faculty.cjs ---

--- START FILE: prisma\add_missing_specializations.cjs ---
// prisma/add_missing_specializations.cjs
// Adds specializations that might be missing for dummy faculty linking.
// IMPORTANT: Does NOT delete existing data.

const { PrismaClient } = require('../src/generated/prisma/index.js');
const prisma = new PrismaClient();

const specializationsToAdd = [
  { name: 'Clinical Chemistry', description: 'Specialization in chemical processes and substances in the human body.' },
  { name: 'Microbiology', description: 'Study of microscopic organisms, such as bacteria, viruses, archaea, fungi and protozoa.' },
  { name: 'Immunology', description: 'Branch of biology and medicine that covers the study of immune systems.' },
  { name: 'Research Methodology', description: 'Expertise in designing and conducting research studies.' },
  { name: 'Public Health', description: 'Focus on the health of populations as a whole.' },
  { name: 'Laboratory Management', description: 'Skills in managing clinical or research laboratory operations.' },
  { name: 'Medical Ethics', description: 'Understanding and application of ethical principles in medicine.' },
  { name: 'Anatomic Pathology', description: 'Diagnosis of disease based on the macroscopic, microscopic, biochemical, immunologic and molecular examination of organs and tissues.' },
  // Add any other specializations you might have used or plan to use here
  // For example, from the first dummy script if you didn't add them manually:
  { name: 'Physics', description: 'The natural science of matter, its fundamental constituents, its motion and behavior through space and time.' },
  { name: 'Hematology', description: 'The study of blood, blood-forming organs, and blood diseases.' },
  { name: 'Molecular Biology', description: 'The study of biology at a molecular level, including the structure and function of genes and gene products.'}
];

async function main() {
  console.log('Starting script to add missing specializations...');

  for (const specData of specializationsToAdd) {
    const existingSpec = await prisma.specialization.findUnique({
      where: { name: specData.name },
    });

    if (existingSpec) {
      console.log(`Specialization "${specData.name}" already exists. Skipping.`);
    } else {
      try {
        await prisma.specialization.create({
          data: {
            name: specData.name,
            description: specData.description,
          },
        });
        console.log(`Successfully created specialization: "${specData.name}"`);
      } catch (error) {
        // This might catch a race condition if run in parallel, though unlikely here.
        // Or if the unique constraint is case-insensitive on your DB (not default for SQLite).
        if (error.code === 'P2002') {
             console.warn(`Specialization "${specData.name}" likely created by another process or already exists (case-insensitive match?). Skipping.`);
        } else {
            console.error(`Error creating specialization "${specData.name}":`, error);
        }
      }
    }
  }

  console.log('Finished adding specializations.');
}

main()
  .catch(async (e) => {
    console.error('Script execution failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
--- END FILE: prisma\add_missing_specializations.cjs ---

--- START FILE: prisma\create_admin.cjs ---
// prisma/create_admin.cjs
// Creates ONLY an admin user. Does NOT delete existing data.

// Use the direct path that worked before
const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

// --- Configuration ---
// CHANGE THESE VALUES AS NEEDED
const adminEmail = 'admin@test.com';
const adminPassword = 'password123'; // Choose a secure password!
const adminName = 'SMLS Admin'; // Optional: Set a name
// --- End Configuration ---

async function main() {
  console.log(`Attempting to create admin user: ${adminEmail}`);

  // 1. Check if admin already exists
  const existingAdmin = await prisma.user.findUnique({
    where: { email: adminEmail },
  });

  if (existingAdmin) {
    console.log(`Admin user with email ${adminEmail} already exists. Skipping creation.`);
    return; // Exit if admin exists
  }

  // 2. Hash the password
  const saltRounds = 10;
  const hashedPassword = await bcrypt.hash(adminPassword, saltRounds);
  console.log(`Password hashed.`);

  // 3. Create the admin user
  try {
    const newAdmin = await prisma.user.create({
      data: {
        name: adminName,
        email: adminEmail.toLowerCase().trim(), // Store lowercase, trimmed email
        password: hashedPassword,
        role: 'ADMIN', // Use the string literal 'ADMIN'
        // emailVerified: new Date(), // Optional: Mark as verified immediately if desired
      },
      select: { // Only select necessary fields
        id: true,
        email: true,
        role: true,
      }
    });
    console.log(`Successfully created ADMIN user: ${newAdmin.email} (ID: ${newAdmin.id})`);

  } catch (error) {
    console.error(`Error creating admin user ${adminEmail}:`, error);
    process.exit(1); // Exit with error on failure
  }
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\create_admin.cjs ---

--- START FILE: prisma\delete_all_faculty_accounts.cjs ---
// prisma/delete_all_faculty_accounts.cjs
// Deletes ALL users with the role 'FACULTY' and their associated data.
// USE WITH CAUTION. ENSURE YOU WANT TO DO THIS.

const { PrismaClient } = require('../src/generated/prisma/index.js');
const prisma = new PrismaClient();

async function main() {
  console.log("WARNING: This script will delete ALL users with the role 'FACULTY' and all their associated data.");
  console.log("This includes academic qualifications, licenses, work experiences, etc., due to cascading deletes.");
  console.log("Admin accounts will NOT be affected.");
  console.log("---------------------------------------------------------------------------------------------------");

  // Add a small delay and a prompt to allow cancellation
  // For a real prompt, you'd use a library like 'inquirer', but for a simple script, a timeout is a basic safeguard.
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });

  await new Promise(resolve => {
    readline.question('Type "DELETE ALL FACULTY" to confirm, or anything else to cancel: ', (answer) => {
      if (answer === "DELETE ALL FACULTY") {
        console.log("Confirmation received. Proceeding with deletion...");
        resolve();
      } else {
        console.log("Deletion cancelled by user.");
        process.exit(0);
      }
      readline.close();
    });
  });


  console.log("Attempting to delete ALL users with role FACULTY...");
  const facultyUsers = await prisma.user.findMany({
    where: { role: 'FACULTY' },
    select: { id: true, email: true, name: true } // Select more info for logging
  });

  if (facultyUsers.length === 0) {
    console.log("No faculty users found to delete.");
    await prisma.$disconnect();
    return;
  }

  console.log(`Found ${facultyUsers.length} faculty users to delete:`);
  facultyUsers.forEach(user => console.log(`- ${user.name || 'Unnamed'} (${user.email || 'No Email'}) - ID: ${user.id}`));

  try {
    // This will also delete all their related CV data due to onDelete: Cascade
    // and unlink them from specializations.
    const deleteResult = await prisma.user.deleteMany({
      where: {
        role: 'FACULTY',
      },
    });
    console.log(`Successfully deleted ${deleteResult.count} faculty users.`);
  } catch (error) {
    console.error("An error occurred during deletion:", error);
    process.exit(1); // Exit with error if deletion fails
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch(async (e) => {
    console.error("Script execution failed:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
--- END FILE: prisma\delete_all_faculty_accounts.cjs ---

--- START FILE: prisma\delete_user.cjs ---
// prisma/delete_user.js
// Use the direct path that worked for seeding
const { PrismaClient } = require('../src/generated/prisma/index.js');
const prisma = new PrismaClient();

async function main() {
  // --- Get Email from Command Line Argument ---
  // process.argv contains command line arguments.
  // argv[0] is node executable path
  // argv[1] is the script path
  // argv[2] will be the first argument we pass (the email)
  const emailToDelete = process.argv[2];

  if (!emailToDelete) {
    console.error("ERROR: Please provide the email address of the user to delete as a command line argument.");
    console.log("Example: node prisma/delete_user.js user@example.com");
    process.exit(1); // Exit with an error code
  }

  console.log(`Attempting to delete user with email: ${emailToDelete}`);

  try {
    // Find the user first to confirm existence (optional but good practice)
    const user = await prisma.user.findUnique({
      where: { email: emailToDelete },
    });

    if (!user) {
      console.log(`User with email ${emailToDelete} not found.`);
      return; // Exit gracefully if user doesn't exist
    }

    console.log(`Found user ${user.name || user.email} (ID: ${user.id}). Proceeding with deletion...`);

    // --- Delete the User (Cascade will handle related data) ---
    const deleteResult = await prisma.user.delete({
      where: {
        email: emailToDelete,
      },
    });

    console.log(`Successfully deleted user with email: ${emailToDelete}`);
    console.log("Associated CV data should also be deleted due to 'onDelete: Cascade'.");

  } catch (e) {
    console.error(`Error deleting user ${emailToDelete}:`, e);
    process.exit(1); // Exit with an error code if deletion fails
  }
}

// --- Main execution ---
main()
  .catch((e) => {
    // Catch any unexpected errors during main execution
    console.error("Script execution failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\delete_user.cjs ---

--- START FILE: prisma\schema.prisma ---
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Keep custom output path
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  FACULTY
  ADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// --- Specialization Model ---
model Specialization {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  faculty   User[]     @relation("FacultySpecializations")
  coursesRequiringThis Course[] @relation("CourseSpecializations")
}

// --- Course Model ---
model Course {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requiredSpecializations Specialization[] @relation("CourseSpecializations")
}

// --- SOCIAL MEDIA LINK MODEL (Defined before User model) ---
model SocialMediaLink {
  id         String   @id @default(cuid())
  platform   String   // e.g., "LinkedIn", "Facebook", "Personal Website", "GitHub", "ResearchGate"
  url        String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId]) // Add an index on userId for better query performance
}
// --- END SOCIAL MEDIA LINK MODEL ---

// --- User model ---
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(FACULTY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- PERSONAL INFORMATION FIELDS ---
  profileImageUrl String?
  dateOfBirth     DateTime?
  civilStatus     String?
  nationality     String?
  contactNumber   String?
  address         String?
  employeeId      String?    @unique
  bio             String?    // String is sufficient for long text in SQLite

  // --- RELATION TO SOCIAL MEDIA LINKS ---
  socialMediaLinks SocialMediaLink[] // Now references the defined model above

  // --- EXISTING RELATIONS ---
  specializations Specialization[] @relation("FacultySpecializations")

  academicQualifications AcademicQualification[]
  professionalLicenses   ProfessionalLicense[]
  workExperiences        WorkExperience[]
  professionalAffiliations ProfessionalAffiliation[]
  awardsRecognitions     AwardRecognition[]
  professionalDevelopments ProfessionalDevelopment[]
  communityInvolvements  CommunityInvolvement[]
  publications           Publication[]
  conferencePresentations ConferencePresentation[]

  notifications          Notification[]
  passwordResetTokens    PasswordResetToken[]
}

// --- CV Related Models ---
model AcademicQualification {
  id            String   @id @default(cuid())
  degree        String
  institution   String
  program       String
  yearCompleted Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diplomaFileUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalLicense {
  id            String   @id @default(cuid())
  examination   String
  monthYear     String
  licenseNumber String   @unique
  expiration    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseFileUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model WorkExperience {
  id             String   @id @default(cuid())
  institution    String
  position       String
  natureOfWork   String?
  inclusiveYears String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl       String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalAffiliation {
  id                String   @id @default(cuid())
  organization      String
  position          String?
  inclusiveYears    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipProofUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model AwardRecognition {
  id             String   @id @default(cuid())
  awardName      String
  awardingBody   String
  yearReceived   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ProfessionalDevelopment {
  id                String   @id @default(cuid())
  title             String
  organizer         String
  dateLocation      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateFileUrl String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}



model CommunityInvolvement {
  id              String   @id @default(cuid())
  engagementTitle String
  role            String
  locationDate    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model Publication {
  id            String   @id @default(cuid())
  researchTitle String
  journal       String
  datePublished DateTime
  doiLink       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfUrl        String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

model ConferencePresentation {
  id            String   @id @default(cuid())
  paperTitle    String
  eventName     String
  dateLocation  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl      String?
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

// Password Reset Token Model
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([token])
  @@index([userId])
}
--- END FILE: prisma\schema.prisma ---

--- START FILE: prisma\seed_courses.cjs ---
// prisma/seed_courses.cjs
// Adds sample courses and links them to existing specializations.
// IMPORTANT: Run this AFTER 'add_missing_specializations.cjs' or ensure specializations exist.

const { PrismaClient } = require('../src/generated/prisma/index.js');
const prisma = new PrismaClient();

// Define sample courses and the names of specializations they require.
// Ensure these specialization names EXACTLY match what's in your Specialization table.
const coursesToSeed = [
  {
    name: 'Clinical Hematology I',
    code: 'MLS301',
    description: 'Fundamentals of hematology, including blood cell formation, function, and common disorders. Focus on manual techniques.',
    requiredSpecializationNames: ['Hematology', 'Laboratory Management'] // Example
  },
  {
    name: 'Clinical Chemistry I',
    code: 'MLS302',
    description: 'Principles of clinical chemistry, analysis of carbohydrates, lipids, proteins, and enzymes.',
    requiredSpecializationNames: ['Clinical Chemistry', 'Laboratory Management']
  },
  {
    name: 'Diagnostic Microbiology I',
    code: 'MLS303',
    description: 'Introduction to pathogenic microorganisms, sterilization, disinfection, and basic culture techniques.',
    requiredSpecializationNames: ['Microbiology', 'Immunology']
  },
  {
    name: 'Immunology & Serology',
    code: 'MLS304',
    description: 'Study of the immune system, antigen-antibody reactions, and serological techniques for disease diagnosis.',
    requiredSpecializationNames: ['Immunology', 'Molecular Biology']
  },
  {
    name: 'Research Methods for Health Sciences',
    code: 'RES401',
    description: 'Introduction to research design, data collection, statistical analysis, and ethical considerations in health research.',
    requiredSpecializationNames: ['Research Methodology', 'Medical Ethics']
  },
  {
    name: 'Public Health & Epidemiology',
    code: 'PH201',
    description: 'Principles of public health, disease patterns, and epidemiological investigation.',
    requiredSpecializationNames: ['Public Health', 'Research Methodology']
  },
  {
    name: 'Advanced Molecular Diagnostics',
    code: 'MLS501',
    description: 'Advanced techniques in molecular biology for diagnostic purposes, including PCR, sequencing, and microarrays.',
    requiredSpecializationNames: ['Molecular Biology', 'Clinical Chemistry']
  }
];

async function main() {
  console.log('Starting script to seed courses and link specializations...');

  for (const courseData of coursesToSeed) {
    const { requiredSpecializationNames, ...courseDetails } = courseData;

    // Check if course already exists by name or code (if code is unique)
    let existingCourse = await prisma.course.findUnique({
      where: { name: courseDetails.name },
    });
    if (!existingCourse && courseDetails.code) {
        existingCourse = await prisma.course.findUnique({
            where: { code: courseDetails.code }
        });
    }


    if (existingCourse) {
      console.log(`Course "${courseDetails.name}" already exists. Checking/updating specialization links...`);
      // If course exists, you might want to update its specializations if they differ.
      // For simplicity in this seed, we'll just ensure links exist.
      const specializationIdsToConnect = [];
      for (const specName of requiredSpecializationNames) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
          specializationIdsToConnect.push({ id: spec.id });
        } else {
          console.warn(`  - Specialization "${specName}" not found for course "${courseDetails.name}". Skipping link.`);
        }
      }
      if (specializationIdsToConnect.length > 0) {
        await prisma.course.update({
            where: { id: existingCourse.id },
            data: {
                requiredSpecializations: {
                    // 'set' will replace all existing links with the new set.
                    // Use 'connect' if you only want to add without removing others,
                    // but for a seed, 'set' is often cleaner to ensure defined state.
                    set: specializationIdsToConnect
                }
            }
        });
        console.log(`  Updated specialization links for "${courseDetails.name}".`);
      }

    } else {
      // Course does not exist, create it and link specializations
      console.log(`Creating course: "${courseDetails.name}"...`);
      const specializationIdsToConnect = [];
      for (const specName of requiredSpecializationNames) {
        const spec = await prisma.specialization.findUnique({ where: { name: specName } });
        if (spec) {
          specializationIdsToConnect.push({ id: spec.id });
        } else {
          console.warn(`  - Specialization "${specName}" not found for new course "${courseDetails.name}". Link will be skipped.`);
        }
      }

      try {
        await prisma.course.create({
          data: {
            ...courseDetails,
            requiredSpecializations: {
              connect: specializationIdsToConnect,
            },
          },
        });
        console.log(`  Successfully created course "${courseDetails.name}" and linked specializations.`);
      } catch (createError) {
         console.error(`  Error creating course "${courseDetails.name}":`, createError);
         if (createError.code === 'P2002') { // Unique constraint failed
            console.error(`  A course with this name or code likely already exists (unique constraint violation).`);
         }
      }
    }
  }

  console.log('Finished seeding courses.');
}

main()
  .catch(async (e) => {
    console.error('Course seeding script failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
--- END FILE: prisma\seed_courses.cjs ---

--- START FILE: prisma\seed.cjs ---
// prisma/seed.js
// Creates 'Prof. Ken Neutron' - focusing on Physics, Instrumentation, Safety

// Use the direct path that worked before
const { PrismaClient } = require('../src/generated/prisma/index.js');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function main() {
  console.log("Starting seed script for Prof. Ken Neutron...");

  // Clear existing data first
  console.log("Clearing existing data...");
  await clearExistingData();
  console.log("Existing data cleared.");

  // Create the new faculty user
  console.log("Creating faculty user Prof. Ken Neutron...");
  const facultyUser = await createFacultyUser();
  console.log(`Faculty user ${facultyUser.email} created (ID: ${facultyUser.id}).`);

  // Add CV details
  console.log("Adding academic qualifications...");
  await addAcademicQualifications(facultyUser.id);
  console.log("Adding professional licenses...");
  await addProfessionalLicenses(facultyUser.id);
  console.log("Adding work experiences...");
  await addWorkExperiences(facultyUser.id);
  console.log("Adding professional affiliations...");
  await addProfessionalAffiliations(facultyUser.id);
  console.log("Adding awards/recognitions...");
  await addAwardsRecognitions(facultyUser.id);
  console.log("Adding professional developments...");
  await addProfessionalDevelopments(facultyUser.id);
  console.log("Adding community involvements...");
  await addCommunityInvolvements(facultyUser.id);
  console.log("Adding publications...");
  await addPublications(facultyUser.id);
  console.log("Adding conference presentations...");
  await addConferencePresentations(facultyUser.id);

  console.log(`Seeding finished for Prof. Ken Neutron.`);
}

async function clearExistingData() {
  // Delete all existing records in reverse order of dependencies
  await prisma.conferencePresentation.deleteMany({});
  await prisma.publication.deleteMany({});
  await prisma.communityInvolvement.deleteMany({});
  await prisma.professionalDevelopment.deleteMany({});
  await prisma.awardRecognition.deleteMany({});
  await prisma.professionalAffiliation.deleteMany({});
  await prisma.workExperience.deleteMany({});
  await prisma.professionalLicense.deleteMany({});
  await prisma.academicQualification.deleteMany({});
  await prisma.user.deleteMany({});
}

async function createFacultyUser() {
  const hashedPassword = await bcrypt.hash('neutronPass456', 10); // Different password

  return prisma.user.create({
    data: {
      name: 'Prof. Ken Neutron', // Different name
      email: 'ken.neutron@spcdavao.edu.ph', // Different email
      password: hashedPassword,
      role: 'FACULTY', // Use string literal
    }
  });
}

async function addAcademicQualifications(userId) {
  await prisma.academicQualification.createMany({
    data: [
      {
        userId,
        degree: 'MS Physics',
        institution: 'National Institute of Physics',
        program: 'Applied Physics',
        yearCompleted: 2014,
        diplomaFileUrl: null,
        status: 'APPROVED' // Use string literal
      },
      {
        userId,
        degree: 'BS Medical Technology',
        institution: 'San Pedro College',
        program: 'Medical Technology',
        yearCompleted: 2010,
        diplomaFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalLicenses(userId) {
  await prisma.professionalLicense.createMany({
    data: [
      {
        userId,
        examination: 'Medical Technologist Licensure',
        monthYear: 'March 2011',
        licenseNumber: '0246810',
        expiration: new Date('2025-03-15'),
        licenseFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        examination: 'Radiation Safety Officer Training', // Different type of cert/license
        monthYear: 'July 2018',
        licenseNumber: 'RSO-KN-001',
        expiration: new Date('2026-07-31'), // Example expiry
        licenseFileUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addWorkExperiences(userId) {
  await prisma.workExperience.createMany({
    data: [
      {
        userId,
        institution: 'San Pedro College',
        position: 'Instructor / Lab Safety Officer',
        natureOfWork: 'Teaching Physics for Health Sciences, Managing Lab Safety Protocols',
        inclusiveYears: '2015-Present',
        proofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        institution: 'BioInstrumentation Inc.',
        position: 'Field Service Engineer',
        natureOfWork: 'Calibration and Maintenance of Laboratory Equipment',
        inclusiveYears: '2011-2015',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalAffiliations(userId) {
  await prisma.professionalAffiliation.createMany({
    data: [
      {
        userId,
        organization: 'Philippine Association of Medical Technologists (PAMET)',
        position: 'Member',
        inclusiveYears: '2011-Present',
        membershipProofUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        organization: 'Samahang Pisika ng Pilipinas (SPP)', // Physics Association
        position: 'Associate Member',
        inclusiveYears: '2016-Present',
        membershipProofUrl: null,
        status: 'PENDING' // Example pending
      }
    ]
  });
}

async function addAwardsRecognitions(userId) {
  // Maybe fewer awards for this profile
  await prisma.awardRecognition.createMany({
    data: [
      {
        userId,
        awardName: 'Laboratory Safety Excellence Award',
        awardingBody: 'SPC Safety Committee',
        yearReceived: 2021,
        certificateUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addProfessionalDevelopments(userId) {
  await prisma.professionalDevelopment.createMany({
    data: [
      {
        userId,
        title: 'Training on Calibration of Spectrophotometers',
        organizer: 'Precision Instruments Ltd.',
        dateLocation: 'August 2022, Online',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Seminar on Occupational Safety and Health in Laboratories',
        organizer: 'DOLE / OSHC',
        dateLocation: 'April 2023, Davao City',
        certificateFileUrl: null,
        status: 'APPROVED'
      },
      {
        userId,
        title: 'Modern Physics Applications in Medicine',
        organizer: 'SPP Annual Convention',
        dateLocation: 'October 2023, Cebu City',
        certificateFileUrl: null,
        status: 'REJECTED', // Example rejected
        rejectionReason: 'Certificate unclear.'
      }
    ]
  });
}

async function addCommunityInvolvements(userId) {
  // Maybe less community involvement for this profile
  await prisma.communityInvolvement.createMany({
    data: [
      {
        userId,
        engagementTitle: 'Career Talk: Medical Technology',
        role: 'Speaker',
        locationDate: 'Davao City National High School, Feb 2023',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

async function addPublications(userId) {
  // Maybe no publications for this profile yet
  // You can leave this function call out or pass an empty array if desired
  // await prisma.publication.createMany({ data: [] });
  console.log("Skipping publications for this user.");
}

async function addConferencePresentations(userId) {
  await prisma.conferencePresentation.createMany({
    data: [
      {
        userId,
        paperTitle: 'Implementing Enhanced Safety Protocols in a University MedTech Laboratory', // Poster presentation maybe
        eventName: 'PAMET Davao Chapter Annual Meeting - Poster Session',
        dateLocation: 'November 2022, Davao City',
        proofUrl: null,
        status: 'APPROVED'
      }
    ]
  });
}

// --- Main execution ---
main()
  .catch((e) => {
    console.error("Seeding script failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    console.log("Disconnecting Prisma Client...");
    await prisma.$disconnect();
    console.log("Prisma Client disconnected.");
  });
--- END FILE: prisma\seed.cjs ---

--- START FILE: src\app\(auth)\forgot-password\page.tsx ---
// This is the CORRECT code for: src/app/(auth)/forgot-password/page.tsx

'use client';

import React, { useState, FormEvent, useTransition } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { EnvelopeIcon, ArrowLeftIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
// Import the server action
import { requestPasswordReset } from '@/lib/actions/authActions';

export default function ForgotPasswordPage() {
    const [email, setEmail] = useState('');
    const [isPending, startTransition] = useTransition();
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);
        setSuccessMessage(null);

        const formData = new FormData(event.currentTarget);

        startTransition(async () => {
            const response = await requestPasswordReset(formData);

            if (response.success) {
                setSuccessMessage(response.message);
                setEmail(''); // Clear email field on success
            } else {
                setError(response.message || "An unexpected error occurred.");
            }
        });
    };

    return (
        // Use a similar background and layout as the login page
        // End Main Container
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">
            <div className="w-full max-w-md">
                 {/* Gradient border effect */}
                 <div className="rounded-3xl bg-gradient-to-r from-sky-400 to-blue-500 p-1 shadow-2xl">
                     {/* Inner white card */}
                    <div className="rounded-[22px] bg-white p-8 sm:p-10">

                        {/* *** THIS IS THE CORRECT HEADING FOR FORGOT-PASSWORD *** */}
                        <h1 className="pb-2 text-center text-3xl font-bold text-gray-800">
                            Forgot Password?
                        </h1>
                        <p className="pb-6 text-center text-sm text-gray-500">
                            Enter your email to receive reset instructions.
                        </p>
                        {/* *** END CORRECT HEADING *** */}

                        <form onSubmit={handleSubmit} className="space-y-5">
                            {/* Success Message */}
                            {successMessage && (
                                <div className="rounded border border-green-300 bg-green-50 p-3 text-center text-sm font-medium text-green-700 flex items-center gap-2" role="alert">
                                    <CheckCircleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {successMessage}
                                </div>
                            )}
                            {/* Error Message */}
                            {error && (
                                <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700 flex items-center gap-2" role="alert">
                                     <ExclamationTriangleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {error}
                                </div>
                            )}

                            {/* Email Input */}
                            <div>
                                <label htmlFor="email" className="mb-1.5 block text-sm font-medium text-gray-600">Email Address</label>
                                <div className="relative">
                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                        <EnvelopeIcon className="h-5 w-5 text-gray-400" />
                                    </span>
                                    <input
                                        id="email" name="email" type="email" placeholder="you@example.com" required
                                        disabled={isPending || !!successMessage}
                                        value={email} onChange={(e) => setEmail(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 px-3 py-2.5 pl-10 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50"
                                    />
                                </div>
                            </div>

                            {/* Submit Button */}
                            <button
                                type="submit"
                                disabled={isPending || !!successMessage}
                                className="mt-6 w-full rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md transition duration-300 ease-in-out hover:from-sky-600 hover:to-blue-700 disabled:opacity-60 disabled:cursor-not-allowed">
                                {isPending ? 'SENDING...' : 'Send Reset Instructions'}
                            </button>
                        </form>

                        {/* Back to Login Link */}
                       <div className="mt-6 text-center text-sm">
                            <Link
                                href="/login"
                                className="inline-flex items-center gap-1 font-medium text-sky-600 hover:text-sky-700 hover:underline"
                                legacyBehavior>
                                <ArrowLeftIcon className="h-4 w-4"/>
                                Back to Login
                            </Link>
                       </div>

                    </div> {/* End Inner Card */}
                </div> {/* End Gradient Border */}
            </div> {/* End Form Container */}
        </div>
    );
}
--- END FILE: src\app\(auth)\forgot-password\page.tsx ---

--- START FILE: src\app\(auth)\login\page.tsx ---
// Action: Modify src/app/(auth)/login/page.tsx

'use client';
import React, { useState, FormEvent } from 'react';
import { signIn, getSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import Link from 'next/link'; // Ensure Link is imported
import Image from 'next/image';

export default function LoginPage() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const router = useRouter();

    // Handler for credential-based form submission (remains the same)
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);
        setIsLoading(true);
        try {
            const result = await signIn('credentials', {
                redirect: false,
                email,
                password,
            });

            if (result?.error) {
                setIsLoading(false);
                setError("Invalid email or password. Please try again.");
                console.error("SignIn Error:", result.error);
            } else if (result?.ok) {
                const session = await getSession();
                const userRole = (session?.user as any)?.role;
                console.log("Login successful, Role:", userRole);
                // Redirect based on role
                router.push(userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard');
                // Use router.replace if you don't want the login page in history
                // router.replace(userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard');
            } else {
                setIsLoading(false);
                setError("Login failed due to an unknown error. Please try again.");
                console.error("SignIn Unknown State:", result);
            }
        } catch (err) {
            setIsLoading(false);
            setError("An unexpected error occurred. Please check your connection and try again.");
            console.error("Login Catch Error:", err);
        }
    };

    // Placeholder handler for Google Sign-In button (remains the same)
    const handleGoogleSignIn = () => {
       alert("Google Sign-In is not configured yet.");
    }

    return (
        // Main container: Apply gradient background
        // End Main Container
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">
            {/* Wrapper for the three-column layout on larger screens */}
            <div className="flex w-full max-w-6xl items-center justify-center lg:justify-between">

                 {/* Left Column (SPC Logo): Hidden on screens smaller than 'lg' */}
                 <div className="hidden lg:flex lg:w-1/4 items-center justify-center p-4">
                     <Image
                        src="/spc-logo.png"
                        alt="San Pedro College Logo"
                        width={250}
                        height={300}
                        className="object-contain"
                    />
                 </div>

                 {/* Center Column (Login Form Card) */}
                 <div className="w-full max-w-md lg:w-1/2 lg:max-w-md lg:px-8 flex justify-center">
                     {/* Container for the card */}
                     <div className="w-full">
                         {/* Gradient border effect - Using softer blues */}
                         <div className="rounded-3xl bg-gradient-to-r from-spc-blue-light to-spc-blue-DEFAULT p-1 shadow-2xl animate-fade-in-scale"> {/* Changed gradient, increased shadow */}
                             {/* Inner white card - Kept white for contrast */}
                             <div className="rounded-[22px] bg-white p-8 sm:p-10">
 
                                 <h1 className="cursor-default pb-6 text-center text-4xl font-bold text-spc-blue-darker"> {/* Slightly lighter text */}
                                     Log in
                                 </h1>

                                <form onSubmit={handleSubmit} className="space-y-5">
                                    {error && (
                                        <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700" role="alert">
                                            {error}
                                        </div>
                                    )}
                                    {/* Email Input */}
                                    <div>
                                        <label htmlFor="email" className="mb-1.5 block text-sm font-medium text-gray-600">Email</label> {/* Lighter label */}
                                        <input
                                            id="email" name="email" type="email" placeholder="Email" required disabled={isLoading}
                                            value={email} onChange={(e) => setEmail(e.target.value)}
                                            className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-spc-blue-DEFAULT focus:ring-1 focus:ring-spc-blue-DEFAULT disabled:opacity-50" // Adjusted text color
                                        />
                                    </div>
                                    {/* Password Input */}
                                    <div>
                                        <label htmlFor="password" className="mb-1.5 block text-sm font-medium text-gray-600">Password</label> {/* Lighter label */}
                                        <input
                                            id="password" name="password" type="password" placeholder="Password" required disabled={isLoading}
                                            value={password} onChange={(e) => setPassword(e.target.value)}
                                            className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-spc-blue-DEFAULT focus:ring-1 focus:ring-spc-blue-DEFAULT disabled:opacity-50" // Adjusted text color
                                        />
                                    </div>
                                    {/* Forget Password Link - *** UPDATED href *** */}
                                    <div className="text-right">
                                        <Link href="/forgot-password" className="text-sm text-spc-blue-light hover:text-spc-blue-DEFAULT hover:underline"> Forget your password? </Link>
                                    </div>
                                    {/* Submit Button - Matching softer gradient */}
                                    <button
                                        type="submit"
                                        disabled={isLoading}
                                        className="mt-6 w-full rounded-lg bg-gradient-to-r from-spc-blue-light to-spc-blue-DEFAULT px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md
                                                   transition-all duration-200 ease-out  /* Base transition */
                                                   hover:from-spc-blue-DEFAULT hover:to-spc-blue-darker hover:shadow-lg hover:scale-[1.02] /* Hover effects */
                                                   active:scale-[0.98] active:brightness-90 /* Active/press effects */
                                                   disabled:opacity-60 disabled:cursor-not-allowed"
                                    >
                                        {isLoading ? 'LOGGING IN...' : 'LOG IN'}
                                    </button>
                                </form>
                                {/* Sign Up - Adjusted color */}
                               <div className="mt-5 text-center text-sm">
                                    <span className="text-gray-500">Don't have an account?{' '}</span> {/* Lighter text */}
                                    <Link href="#" className="font-semibold text-spc-blue-light hover:text-spc-blue-DEFAULT hover:underline"> Sign Up </Link>
                               </div>
                                {/* Separator - Adjusted color */}
                               <div className="my-6 flex items-center">
                                    <hr className="flex-grow border-t border-gray-300" /> {/* Slightly darker line */}
                                    <span className="px-2 text-xs font-medium text-gray-500 uppercase">OR CONTINUE WITH</span> {/* Darker text */}
                                    <hr className="flex-grow border-t border-gray-300" />
                               </div>
                                {/* Google Button - Kept neutral */}
                               <div className="flex justify-center">
                                    <button
                                        onClick={handleGoogleSignIn} disabled={isLoading} title="Sign in with Google"
                                        className="m-1 inline-flex items-center justify-center rounded-lg border border-gray-300 bg-white p-2 shadow-sm transition duration-300 ease-in-out hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-400 disabled:opacity-60">
                                        <Image src="https://ucarecdn.com/8f25a2ba-bdcf-4ff1-b596-088f330416ef/" alt="Google" width={22} height={22} />
                                    </button>
                               </div>
                                {/* Terms - Adjusted color and link color */}
                                <div className="mt-6 text-center text-xs text-gray-500"> {/* Lighter text */}
                                    <p> By signing in, you agree to our{' '} <Link className="font-medium text-spc-blue-light hover:text-spc-blue-DEFAULT hover:underline" href="#">Terms</Link> {' '}and{' '} <Link className="font-medium text-spc-blue-light hover:text-spc-blue-DEFAULT hover:underline" href="#">Privacy Policy</Link>. </p>
                                </div>
                            </div> {/* End Inner Card */}
                        </div> {/* End Gradient Border */}
                    </div> {/* End Form Container */}
                 </div> {/* End Center Column */}

                 {/* Right Column (SMLS Logo): Hidden on screens smaller than 'lg' */}
                 <div className="hidden lg:flex lg:w-1/4 items-center justify-center p-4 relative">
                     {/* ... optional background ... */}
                     <div className="relative z-10">
                        <Image
                            src="/smls-logo.png"
                            alt="School of Medical Laboratory Science Logo"
                            width={200}
                            height={200}
                            className="object-contain"
                        />
                     </div>
                 </div>

             </div> {/* End Three-column Wrapper */}
        </div>
    );
}
--- END FILE: src\app\(auth)\login\page.tsx ---

--- START FILE: src\app\(auth)\reset-password\page.tsx ---
// src/app/(auth)/reset-password/page.tsx

'use client';

import React, { useState, FormEvent, useEffect, Suspense, useTransition } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSearchParams, useRouter } from 'next/navigation';
// Import necessary icons
import { KeyIcon, LockClosedIcon, ArrowLeftIcon, CheckCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
// Import the server action
import { performPasswordReset } from '@/lib/actions/authActions';

// Wrap the main component logic in a separate component to use Suspense
function ResetPasswordForm() {
    const searchParams = useSearchParams();
    const router = useRouter();
    const token = searchParams.get('token');

    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [isPending, startTransition] = useTransition(); // Use useTransition
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);

    useEffect(() => {
        if (!token) {
            setError("Invalid or missing password reset token. Please request a new link.");
            // Optionally redirect after a delay if token is missing
            // setTimeout(() => router.push('/forgot-password'), 3000);
        }
    }, [token, router]);

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);
        setSuccessMessage(null);

        // Basic client-side validation
        if (!token) {
            setError("Invalid or missing password reset token.");
            return;
        }
        if (password.length < 8) {
            setError("Password must be at least 8 characters long.");
            return;
        }
        if (password !== confirmPassword) {
            setError("Passwords do not match.");
            return;
        }

        const formData = new FormData(event.currentTarget);
        // Ensure the token from URL is included if not already in a hidden field
        if (!formData.has('token') && token) {
            formData.set('token', token);
        }

        startTransition(async () => {
            const response = await performPasswordReset(formData);

            if (response.success) {
                setSuccessMessage(response.message);
                setPassword(''); // Clear fields on success
                setConfirmPassword('');
                // Redirect to login after a short delay
                setTimeout(() => router.push('/login'), 3000);
            } else {
                setError(response.message || "An unexpected error occurred.");
            }
        });
    };

    return (
        // Use a similar background and layout
        // End Main Container
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">
            <div className="w-full max-w-md">
                {/* Gradient border effect */}
                <div className="rounded-3xl bg-gradient-to-r from-sky-400 to-blue-500 p-1 shadow-2xl">
                    {/* Inner white card */}
                    <div className="rounded-[22px] bg-white p-8 sm:p-10">
                        <h1 className="pb-2 text-center text-3xl font-bold text-gray-800">
                            Reset Password
                        </h1>
                        <p className="pb-6 text-center text-sm text-gray-500">
                            Enter your new password below.
                        </p>

                        <form onSubmit={handleSubmit} className="space-y-5">
                            {/* Success Message */}
                            {successMessage && (
                                <div className="rounded border border-green-300 bg-green-50 p-3 text-center text-sm font-medium text-green-700 flex items-center gap-2" role="alert">
                                    <CheckCircleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {successMessage}
                                    <Link href="/login" className="font-bold underline ml-auto">Login Now</Link>
                                </div>
                            )}
                            {/* Error Message */}
                            {error && (
                                <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700 flex items-center gap-2" role="alert">
                                     <ExclamationTriangleIcon className="h-5 w-5 flex-shrink-0"/>
                                    {error}
                                </div>
                            )}

                            {/* Hidden Token Field (Good practice) */}
                            <input type="hidden" name="token" value={token || ''} />

                            {/* New Password Input */}
                            <div>
                                <label htmlFor="password" className="mb-1.5 block text-sm font-medium text-gray-600">New Password</label>
                                <div className="relative">
                                    <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                        <LockClosedIcon className="h-5 w-5 text-gray-400" />
                                    </span>
                                    <input
                                        id="password" name="password" type="password" placeholder="Enter new password (min. 8 chars)" required
                                        disabled={isPending || !!successMessage || !token} // Disable if loading, success, or no token
                                        value={password} onChange={(e) => setPassword(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 px-3 py-2.5 pl-10 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50"
                                        minLength={8}
                                    />
                                </div>
                            </div>

                            {/* Confirm Password Input */}
                            <div>
                                <label htmlFor="confirmPassword" className="mb-1.5 block text-sm font-medium text-gray-600">Confirm New Password</label>
                                <div className="relative">
                                     <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                        <LockClosedIcon className="h-5 w-5 text-gray-400" />
                                    </span>
                                    <input
                                        id="confirmPassword" name="confirmPassword" type="password" placeholder="Confirm new password" required
                                        disabled={isPending || !!successMessage || !token} // Disable if loading, success, or no token
                                        value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)}
                                        className="w-full rounded-lg border border-gray-300 px-3 py-2.5 pl-10 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50"
                                        minLength={8}
                                    />
                                </div>
                            </div>

                            {/* Submit Button */}
                            <button
                                type="submit"
                                disabled={isPending || !!successMessage || !token} // Disable if loading, success, or no token
                                className="mt-6 w-full rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md transition duration-300 ease-in-out hover:from-sky-600 hover:to-blue-700 disabled:opacity-60 disabled:cursor-not-allowed">
                                {isPending ? 'RESETTING...' : 'Reset Password'}
                            </button>
                        </form>

                        {/* Back to Login Link (Conditional) */}
                        {!successMessage && (
                            <div className="mt-6 text-center text-sm">
                                <Link
                                    href="/login"
                                    className="inline-flex items-center gap-1 font-medium text-sky-600 hover:text-sky-700 hover:underline"
                                    legacyBehavior>
                                    <ArrowLeftIcon className="h-4 w-4"/>
                                    Back to Login
                                </Link>
                            </div>
                        )}

                    </div> {/* End Inner Card */}
                </div> {/* End Gradient Border */}
            </div> {/* End Form Container */}
        </div>
    );
}

// Export the page component wrapped in Suspense
export default function ResetPasswordPage() {
    // You might want a more informative fallback for a better user experience
    const fallbackContent = (
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">
             <div className="text-gray-600">Loading reset page...</div>
        </div>
    );

    return (
        <Suspense fallback={fallbackContent}>
            <ResetPasswordForm />
        </Suspense>
    );
}
--- END FILE: src\app\(auth)\reset-password\page.tsx ---

--- START FILE: src\app\(auth)\layout.tsx ---
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

--- END FILE: src\app\(auth)\layout.tsx ---

--- START FILE: src\app\(protected)\(faculty)\dashboard\page.tsx ---
// src/app/(protected)/(faculty)/dashboard/page.tsx
'use client';

import Link from 'next/link';
import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { getMyProfileData } from '@/lib/userActions';
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, ApprovalStatus
} from '@/generated/prisma';

import {
    UserCircleIcon,
    DocumentTextIcon,
    ArrowRightIcon,
    ClockIcon,
    ExclamationTriangleIcon,
    CheckCircleIcon,
    SparklesIcon, // For a fresh dashboard feel
} from '@heroicons/react/24/outline';
import { XCircleIcon } from '@heroicons/react/24/solid'; // Using solid for more impact on status

type ItemWithStatus = {
    id: string;
    status: ApprovalStatus;
    degree?: string;
    examination?: string;
    position?: string;
    awardName?: string;
    title?: string;
    engagementTitle?: string;
    researchTitle?: string;
    paperTitle?: string;
};

function getItemDisplayName(item: ItemWithStatus): string {
     return item.degree ?? item.examination ?? item.title ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? `Item ID: ${item.id}`;
}

export default function FacultyDashboardPage() {
    const { data: session, status } = useSession();
    const [dashboardData, setDashboardData] = useState<{
        pendingItems: ItemWithStatus[];
        approvedCount: number;
        pendingCount: number;
        rejectedCount: number;
    } | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (status === 'authenticated') {
            setIsLoading(true); setError(null);
            getMyProfileData()
                .then(data => {
                    if ('error' in data) {
                        setError(data.error || 'Failed to load profile data.'); setDashboardData(null);
                    } else if (!data.user) {
                        setError('Failed to load user details from profile data.'); setDashboardData(null);
                    } else {
                        let pending: ItemWithStatus[] = []; let approved = 0; let rejected = 0;
                        const allItems = [
                            ...(data.academicQualifications ?? []), ...(data.professionalLicenses ?? []),
                            ...(data.workExperiences ?? []), ...(data.professionalAffiliations ?? []),
                            ...(data.awardsRecognitions ?? []), ...(data.professionalDevelopments ?? []),
                            ...(data.communityInvolvements ?? []), ...(data.publications ?? []),
                            ...(data.conferencePresentations ?? []),
                        ];
                        allItems.forEach(item => {
                            if (item.status === 'PENDING') pending.push(item as ItemWithStatus);
                            else if (item.status === 'APPROVED') approved++;
                            else if (item.status === 'REJECTED') rejected++;
                        });
                        setDashboardData({ pendingItems: pending, approvedCount: approved, pendingCount: pending.length, rejectedCount: rejected });
                    }
                })
                .catch(err => { setError("An error occurred."); setDashboardData(null); })
                .finally(() => setIsLoading(false));
        } else if (status === 'unauthenticated') {
            setIsLoading(false); setError("Access Denied. Please log in.");
        }
    }, [status]);

    if (isLoading || status === 'loading') {
        return (
            <div className="flex min-h-[calc(100vh-4rem)] items-center justify-center p-6 bg-spc-blue-lighter">
                <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-6 w-6 text-spc-blue-main" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                    <span>Loading your dashboard...</span>
                </div>
            </div>
        );
    }

    if (error || status === 'unauthenticated') {
         return (
             <div className="flex min-h-[calc(100vh-4rem)] flex-col items-center justify-center p-6 text-center bg-red-50">
                 <ExclamationTriangleIcon className="h-12 w-12 text-red-400 mb-4" />
                 <p className="mb-4 text-xl font-semibold text-red-700">Access Denied or Error</p>
                 <p className="mb-6 text-red-600">{error || "You must be signed in to view this page."}</p>
                 <Link href="/login" legacyBehavior>
                     <button className="inline-flex items-center gap-2 rounded-lg bg-red-600 px-5 py-2.5 text-sm font-semibold text-white shadow-md transition hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transform hover:scale-105"> Go to Login <ArrowRightIcon className="h-4 w-4" /> </button>
                 </Link>
             </div>
         );
    }

    const greetingName = session?.user?.name ? session.user.name.split(' ')[0] : (session?.user?.email ?? 'Faculty Member');

    return (
        <div className="min-h-[calc(100vh-4rem)] bg-spc-blue-lighter p-4 sm:p-6 lg:p-8">
            <div className="mx-auto max-w-7xl">
                {/* Header Section */}
                <div className="mb-10">
                    <h1 className="text-3xl font-bold tracking-tight text-spc-blue-darker flex items-center gap-2">
                        <SparklesIcon className="h-8 w-8 text-smls-gold" /> {/* Added a touch of gold */}
                        Welcome back, {greetingName}!
                    </h1>
                    <p className="mt-2 text-sm text-slate-600">
                        Your central hub for managing your professional profile and documents.
                    </p>
                </div>

                <div className="grid grid-cols-1 gap-6 lg:grid-cols-3 lg:gap-8">
                    {/* Left Column - Pending Items & Quick Links */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Pending Approvals Card */}
                        {dashboardData && dashboardData.pendingCount > 0 && (
                            <div className="rounded-xl border border-amber-300 bg-amber-50 shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl">
                                <div className="flex items-center gap-3 border-b border-amber-200 bg-amber-100 px-5 py-4">
                                    <ClockIcon className="h-7 w-7 text-amber-600" />
                                    <h2 className="text-lg font-semibold text-amber-800">
                                        Items Pending Approval ({dashboardData.pendingCount})
                                    </h2>
                                </div>
                                <div className="p-5">
                                    {dashboardData.pendingItems.length > 0 ? (
                                        <ul className="space-y-3">
                                            {dashboardData.pendingItems.slice(0, 5).map(item => (
                                                <li key={item.id} className="text-sm text-amber-900 flex justify-between items-center py-1.5 border-b border-amber-100 last:border-b-0">
                                                    <span className="font-medium">{getItemDisplayName(item)}</span>
                                                    <Link href="/profile" className="text-xs text-spc-blue-main hover:underline font-semibold">
                                                        View in Profile →
                                                    </Link>
                                                </li>
                                            ))}
                                            {dashboardData.pendingItems.length > 5 && (
                                                <li className="text-center text-xs text-gray-500 pt-3">
                                                    <Link href="/profile" className="hover:underline font-medium" legacyBehavior>
                                                        + {dashboardData.pendingItems.length - 5} more pending...
                                                    </Link>
                                                </li>
                                            )}
                                        </ul>
                                    ) : (
                                        <p className="text-sm text-amber-700 italic">No items currently pending.</p>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Quick Links Grid */}
                        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2">
                             {/* Profile Card */}
                             <Link
                                 href="/profile"
                                 className="group flex flex-col justify-between rounded-xl border border-gray-200/80 bg-white p-6 shadow-lg transition-all duration-300 ease-in-out hover:shadow-2xl hover:border-spc-blue-main/50 hover:-translate-y-1"
                             >
                                <div>
                                    <div className="mb-3 flex items-center gap-3">
                                        <div className="p-2.5 rounded-lg bg-spc-blue-lighter text-spc-blue-main ring-1 ring-spc-blue-light/30">
                                            <UserCircleIcon className="h-7 w-7" />
                                        </div>
                                        <h2 className="text-xl font-semibold text-spc-blue-darker group-hover:text-spc-blue-main">
                                            My Profile
                                        </h2>
                                    </div>
                                    <p className="text-sm text-slate-600 leading-relaxed">
                                        View, update, and manage your CV, qualifications, and personal details.
                                    </p>
                                </div>
                                <div className="mt-5 flex items-center justify-end text-sm font-semibold text-spc-blue-main group-hover:underline">
                                    Go to Profile
                                    <ArrowRightIcon className="ml-1.5 h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
                                </div>
                            </Link>

                            {/* Documents Card */}
                            <Link
                                href="/documents"
                                className="group flex flex-col justify-between rounded-xl border border-gray-200/80 bg-white p-6 shadow-lg transition-all duration-300 ease-in-out hover:shadow-2xl hover:border-green-500/50 hover:-translate-y-1"
                            >
                                <div>
                                    <div className="mb-3 flex items-center gap-3">
                                        <div className="p-2.5 rounded-lg bg-green-50 text-green-600 ring-1 ring-green-200/50">
                                            <DocumentTextIcon className="h-7 w-7" />
                                        </div>
                                        <h2 className="text-xl font-semibold text-spc-blue-darker group-hover:text-green-600">
                                            My Documents
                                        </h2>
                                    </div>
                                    <p className="text-sm text-slate-600 leading-relaxed">
                                        Access all your uploaded supporting documents and credentials in one place.
                                    </p>
                                </div>
                                <div className="mt-5 flex items-center justify-end text-sm font-semibold text-green-600 group-hover:underline">
                                    View Documents
                                    <ArrowRightIcon className="ml-1.5 h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
                                </div>
                            </Link>
                        </div>
                    </div>

                    {/* Right Column (Sidebar) - Profile Summary */}
                    <div className="space-y-6">
                         <div className="rounded-xl border border-gray-200/80 bg-white p-6 shadow-lg">
                             <h2 className="text-lg font-semibold text-spc-blue-darker mb-4 border-b border-gray-100 pb-2">Profile Summary</h2>
                             {dashboardData ? (
                                <div className="space-y-3 text-sm">
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-2"><CheckCircleIcon className="h-5 w-5 text-green-500"/> Approved Items:</span>
                                        <span className="font-semibold text-gray-800 bg-green-100 text-green-700 px-2 py-0.5 rounded-full">{dashboardData.approvedCount}</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-2"><ClockIcon className="h-5 w-5 text-amber-500"/> Pending Items:</span>
                                        <span className="font-semibold text-amber-700 bg-amber-100 px-2 py-0.5 rounded-full">{dashboardData.pendingCount}</span>
                                    </div>
                                     <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-2"><XCircleIcon className="h-5 w-5 text-red-500"/> Rejected Items:</span>
                                        <span className="font-semibold text-red-600 bg-red-100 px-2 py-0.5 rounded-full">{dashboardData.rejectedCount}</span>
                                    </div>
                                </div>
                             ) : (
                                 <p className="text-sm text-gray-500 italic">Summary data is loading...</p>
                             )}
                         </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\dashboard\page.tsx ---

--- START FILE: src\app\(protected)\(faculty)\documents\page.tsx ---
// src/app/(protected)/(faculty)/documents/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link'; // Keep Link if needed for other navigation
import { getMyProfileData } from '@/lib/userActions'; // Action to fetch all profile data
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation
} from '@/generated/prisma'; // Import specific types from Prisma
import type { UserProfilePageData } from '@/types'; // Import UserProfilePageData from your types file
import {
    DocumentTextIcon, PaperClipIcon, ExclamationTriangleIcon,
    AcademicCapIcon, BriefcaseIcon, IdentificationIcon, StarIcon, SparklesIcon, UsersIcon,
    PresentationChartBarIcon, BookOpenIcon // Add relevant icons
} from '@heroicons/react/24/outline';

// Define a type for the processed document list item
interface DocumentListItem {
    id: string; // ID of the parent CV item
    itemType: string; // User-friendly type name (e.g., "Academic Qualification")
    itemName: string; // Name of the parent CV item (e.g., degree, title)
    fileUrl: string; // URL of the document
    fileName: string; // Extracted file name
    icon: React.ElementType; // Icon associated with the item type
}

// Define union type for all possible CV items
type CvItem = AcademicQualification | ProfessionalLicense | WorkExperience |
    ProfessionalAffiliation | AwardRecognition | ProfessionalDevelopment |
    CommunityInvolvement | Publication | ConferencePresentation;

// Helper to get a display name for different item types (similar to dashboard)
function getItemName(item: CvItem): string {
    if ('degree' in item && item.degree) return item.degree;
    if ('examination' in item && item.examination) return item.examination;
    if ('title' in item && item.title) return item.title;
    if ('awardName' in item && item.awardName) return item.awardName;
    if ('engagementTitle' in item && item.engagementTitle) return item.engagementTitle;
    if ('researchTitle' in item && item.researchTitle) return item.researchTitle;
    if ('paperTitle' in item && item.paperTitle) return item.paperTitle;
    if ('position' in item && item.position) return item.position;
    if ('organization' in item && item.organization) return item.organization;
    return `Item ID: ${item.id}`;
}

// Helper to get the file URL and type info based on the CV item type
function getFileInfo(item: CvItem, itemTypeName: string): { url: string | null | undefined, type: string, icon: React.ElementType } {
    // Use type assertions since we know the type based on itemTypeName
    switch (itemTypeName) {
        case 'Academic Qualification':
            return { url: (item as AcademicQualification).diplomaFileUrl, type: itemTypeName, icon: AcademicCapIcon };
        case 'Professional License':
            return { url: (item as ProfessionalLicense).licenseFileUrl, type: itemTypeName, icon: IdentificationIcon };
        case 'Work Experience':
            return { url: (item as WorkExperience).proofUrl, type: itemTypeName, icon: BriefcaseIcon };
        case 'Professional Affiliation':
            return { url: (item as ProfessionalAffiliation).membershipProofUrl, type: itemTypeName, icon: UsersIcon };
        case 'Award/Recognition':
            return { url: (item as AwardRecognition).certificateUrl, type: itemTypeName, icon: StarIcon };
        case 'Professional Development':
            return { url: (item as ProfessionalDevelopment).certificateFileUrl, type: itemTypeName, icon: SparklesIcon };
        case 'Community Involvement':
            return { url: (item as CommunityInvolvement).proofUrl, type: itemTypeName, icon: UsersIcon };
        case 'Publication':
            return { url: (item as Publication).pdfUrl, type: itemTypeName, icon: BookOpenIcon };
        case 'Conference Presentation':
            return { url: (item as ConferencePresentation).proofUrl, type: itemTypeName, icon: PresentationChartBarIcon };
        default:
            return { url: null, type: 'Unknown', icon: DocumentTextIcon };
    }
}

// Helper to extract filename from URL
function getFileNameFromUrl(url: string | null | undefined): string {
    if (!url) return 'N/A';
    try {
        // Basic split, might need refinement for complex URLs
        const parts = url.split('/');
        const encodedName = parts[parts.length - 1];
        // Decode URI component to handle spaces etc. (%20)
        return decodeURIComponent(encodedName);
    } catch (e) {
        console.error("Error extracting filename:", e);
        return 'invalid_url';
    }
}


export default function DocumentsPage() {
    const { status: sessionStatus } = useSession();
    const [documentsList, setDocumentsList] = useState<DocumentListItem[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (sessionStatus === 'authenticated') {
            setIsLoading(true);
            setError(null);
            getMyProfileData()
                .then(data => {
                    // Type guard to check if data is an error object
                    if ('error' in data) {
                        setError(data.error || 'Failed to load profile data for documents.');
                        setDocumentsList([]);
                    } else if (!data.user) { // Now 'data' is UserProfilePageData, check if its 'user' property is null
                        setError('User details not found in profile data.');
                        setDocumentsList([]);
                    } else {
                        // 'data' is UserProfilePageData and data.user is not null. Safe to access all properties.
                        const processedDocs: DocumentListItem[] = [];
                        const sections = [
                            { data: data.academicQualifications, name: 'Academic Qualification' },
                            { data: data.professionalLicenses, name: 'Professional License' },
                            { data: data.workExperiences, name: 'Work Experience' },
                            { data: data.professionalAffiliations, name: 'Professional Affiliation' },
                            { data: data.awardsRecognitions, name: 'Award/Recognition' },
                            { data: data.professionalDevelopments, name: 'Professional Development' },
                            { data: data.communityInvolvements, name: 'Community Involvement' },
                            { data: data.publications, name: 'Publication' },
                            { data: data.conferencePresentations, name: 'Conference Presentation' },
                        ];

                        sections.forEach(section => {
                            (section.data ?? []).forEach((item: CvItem) => {
                                const fileInfo = getFileInfo(item, section.name);
                                if (fileInfo.url) {
                                    processedDocs.push({
                                        id: item.id,
                                        itemType: fileInfo.type,
                                        itemName: getItemName(item),
                                        fileUrl: fileInfo.url,
                                        fileName: getFileNameFromUrl(fileInfo.url),
                                        icon: fileInfo.icon,
                                    });
                                }
                            });
                        });

                        // Optional: Sort documents, e.g., by type then name
                        processedDocs.sort((a, b) => {
                            if (a.itemType !== b.itemType) {
                                return a.itemType.localeCompare(b.itemType);
                            }
                            return a.itemName.localeCompare(b.itemName);
                        });

                        setDocumentsList(processedDocs);
                    }
                })
                .catch(err => {
                    console.error("Documents page fetch error:", err);
                    setError("An error occurred while loading documents.");
                    setDocumentsList([]);
                })
                .finally(() => {
                    setIsLoading(false);
                });
        } else if (sessionStatus === 'unauthenticated') {
            setIsLoading(false);
            setError("Access Denied. Please log in.");
        }
    }, [sessionStatus]); // Re-run effect when session status changes

    // --- Loading State ---
    if (isLoading || sessionStatus === 'loading') {
        return (
            <div className="p-6 flex items-center justify-center min-h-[calc(100vh-8rem)]"> {/* Adjusted height */}
                 <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading documents...</span>
                </div>
            </div>
        );
    }

    // --- Error or Unauthenticated State ---
    if (error || sessionStatus === 'unauthenticated') {
         return (
             <div className="p-6 text-center bg-red-50 min-h-[calc(100vh-8rem)] flex flex-col items-center justify-center">
                 <ExclamationTriangleIcon className="h-10 w-10 text-red-400 mb-3" />
                 <p className="mb-4 text-lg font-semibold text-red-700">Access Denied or Error</p>
                 <p className="mb-5 text-red-600">{error || "You must be signed in to view this page."}</p>
                 <Link href="/login" legacyBehavior>
                     <button className="inline-flex items-center gap-2 rounded-md bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                         Go to Login
                     </button>
                 </Link>
             </div>
         );
    }

    // --- Display Document List ---
    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen">
            <h1 className="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
                <DocumentTextIcon className="h-7 w-7 text-green-600" />
                My Uploaded Documents
            </h1>

            {documentsList.length === 0 ? (
                <div className="bg-white p-6 rounded-lg shadow border border-gray-200 text-center text-gray-500 italic">
                    You have not uploaded any documents via your profile yet. Documents added to your CV sections will appear here.
                </div>
            ) : (
                <div className="bg-white shadow overflow-hidden rounded-lg border border-gray-200">
                    <ul role="list" className="divide-y divide-gray-200">
                        {documentsList.map((doc) => {
                            const IconComponent = doc.icon; // Get the icon component
                            return (
                                <li key={`${doc.id}-${doc.fileName}`} className="px-4 py-4 sm:px-6 hover:bg-gray-50 transition duration-150 ease-in-out">
                                    <div className="flex items-center justify-between gap-4">
                                        {/* Icon, Type and Item Name */}
                                        <div className="flex items-center gap-3 flex-1 min-w-0">
                                            <span className="inline-block rounded-md p-1.5 bg-gray-100 text-gray-600 flex-shrink-0">
                                                <IconComponent className="h-5 w-5" aria-hidden="true" />
                                            </span>
                                            <div className="flex-1 min-w-0">
                                                <p className="text-sm font-medium text-gray-800 truncate" title={doc.itemName}>
                                                    {doc.itemName}
                                                </p>
                                                <p className="text-xs text-gray-500">
                                                    Type: {doc.itemType}
                                                </p>
                                            </div>
                                        </div>
                                        {/* Link to Document */}
                                        <div className="ml-4 flex-shrink-0">
                                            <a
                                                href={doc.fileUrl}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="inline-flex items-center gap-1 rounded-md bg-blue-50 px-2.5 py-1 text-xs font-semibold text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1"
                                                title={`View ${doc.fileName}`}
                                            >
                                                <PaperClipIcon className="h-3.5 w-3.5" aria-hidden="true" />
                                                View File
                                            </a>
                                        </div>
                                    </div>
                                </li>
                            );
                        })}
                    </ul>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\documents\page.tsx ---

--- START FILE: src\app\(protected)\(faculty)\profile\page.tsx ---
// src/app/(protected)/(faculty)/profile/page.tsx
'use client';

import React from 'react'; // Ensure React is imported if not already via other means
import { useProfileDataManagement } from '@/hooks/useProfileDataManagement';
import UserProfileInfoCard from '@/components/profile/UserProfileInfoCard';
import CvSection from '@/components/profile/CvSection';
import { categoryMetadata } from '@/lib/profileUtils';
import type { CategoryKey, EditableCvItem, ProfileUser, TempSocialMediaLink } from '@/types';
import { InformationCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

export default function ProfilePage() {
    const {
        profileData,
        user, // This comes from editableData.user, which is derived from profileData.user
        academicQualifications,
        professionalLicenses,
        workExperiences,
        professionalAffiliations,
        awardsRecognitions,
        professionalDevelopments,
        communityInvolvements,
        publications,
        conferencePresentations,
        socialMediaLinks, // This comes from editableData.socialMediaLinks
        isLoading,
        pageError,
        editError,
        editSuccess,
        isEditingPage,
        editingItemId,
        isSaving,
        changedItemIds,
        handleEditToggle,
        handleSaveChanges,
        handleUserDetailChange,
        handleUserDateChange,
        selectedProfileImageFile,
        profileImagePreview,
        handleProfileImageSelect,
        handleAddSocialMediaLink,
        handleSocialMediaLinkChange,
        handleDeleteSocialMediaLink,
        handleAddItemLocally,
        handleDeleteItemLocally,
        handleStartEditingCvItem,
        handleCancelCvItemEdit,
        handleSaveCvItemEdit,
        handleCvItemInputChange,
        handleCvItemFileChange,
        visibleCategories,
        showCategoryDropdown,
        setShowCategoryDropdown,
        handleAddCategoryToView,
    } = useProfileDataManagement();

    // For clarity, let's refer to the direct data from the hook for these checks
    const rawProfileData = profileData; 

    console.log(
        "ProfilePage RENDER: isLoading:", isLoading, 
        "pageError:", pageError, 
        "rawProfileData exists:", !!rawProfileData, 
        "rawProfileData.user exists:", !!rawProfileData?.user
    );

    if (isLoading && !rawProfileData) {
        console.log("ProfilePage RENDER: Showing initial loading screen.");
        return (
            <div className="p-6 animate-pulse text-center text-gray-500 min-h-screen flex items-center justify-center bg-spc-blue-lighter">
                Loading profile data...
            </div>
        );
    }

    if (pageError && !rawProfileData) {
        console.log("ProfilePage RENDER: Showing pageError because rawProfileData is null.");
        return (
            <div className="p-6 text-center text-red-600 bg-red-50 border border-red-200 rounded-md min-h-screen flex flex-col items-center justify-center">
                <ExclamationTriangleIcon className="h-12 w-12 text-red-400 mb-4" />
                <h2 className="text-xl font-semibold mb-2">Error Loading Profile</h2>
                <p>{pageError}</p>
            </div>
        );
    }

    // This is the condition that likely shows your "Could not load" message
    if (!rawProfileData || !rawProfileData.user) {
         console.log("ProfilePage RENDER: Showing 'Could not load profile data' screen.");
         // Log the state that led to this condition
         console.log({
            isLoading_at_CouldNotLoad: isLoading, 
            pageError_at_CouldNotLoad: pageError, 
            rawProfileData_is_null: rawProfileData === null,
            rawProfileData_user_is_null: rawProfileData ? rawProfileData.user === null : 'N/A (rawProfileData is null)'
        });
         return (
            <div className="p-6 text-center text-gray-500 min-h-screen flex items-center justify-center bg-spc-blue-lighter">
                Could not load profile data. Please try again later or contact support.
                {pageError && <p className="text-red-500 mt-2 text-xs">Details: {pageError}</p>}
            </div>
        );
    }

    // If we reach here, rawProfileData and rawProfileData.user are valid
    const cvSectionsData = {
        academicQualifications, professionalLicenses, workExperiences,
        professionalAffiliations, awardsRecognitions, professionalDevelopments,
        communityInvolvements, publications, conferencePresentations,
    };

    // The 'user' and 'socialMediaLinks' destructured from useProfileDataManagement
    // are typically from 'editableData'. For display consistency before editing,
    // it's often better to use the direct 'rawProfileData.user' and 'rawProfileData.user.socialMediaLinks'.
    // However, UserProfileInfoCard expects 'user' and 'socialMediaLinks' from the hook's return.
    // Let's ensure userForCard uses the most reliable source.
    const userForCard = rawProfileData.user; // Use directly from the fetched profile data
    const socialMediaLinksForCard = rawProfileData.user.socialMediaLinks || [];


    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen">
            {editSuccess && <div className="mb-4 rounded-md bg-green-100 p-3 text-sm font-medium text-green-700 border border-green-200">{editSuccess}</div>}
            {editError && <div className="mb-4 rounded-md bg-red-100 p-3 text-sm font-medium text-red-700 border border-red-200">{editError}</div>}
            {pageError && rawProfileData && <div className="mb-4 rounded-md bg-red-100 p-3 text-sm font-medium text-red-700 border border-red-200">{pageError}</div>} {/* Show pageError even if profileData loaded but then an error occurred */}

            {isEditingPage && editingItemId !== null && (
                 <p className="mb-4 text-xs text-yellow-700 bg-yellow-50 p-2 rounded border border-yellow-200 w-full flex items-center gap-1">
                    <InformationCircleIcon className='h-4 w-4 flex-shrink-0'/>
                    Finish editing the current CV item before saving all profile changes.
                 </p>
            )}

            <div className="flex flex-col md:flex-row md:gap-6 lg:gap-8">
                <UserProfileInfoCard
                    user={userForCard} // This should now be reliable
                    isEditingPage={isEditingPage}
                    isPending={isSaving}
                    editingAnyCvItem={editingItemId !== null}
                    onUserDetailChange={handleUserDetailChange}
                    onUserDateChange={handleUserDateChange}
                    socialMediaLinks={socialMediaLinksForCard} // This also uses rawProfileData
                    onAddSocialMediaLink={handleAddSocialMediaLink}
                    onSocialMediaLinkChange={handleSocialMediaLinkChange}
                    onDeleteSocialMediaLink={handleDeleteSocialMediaLink}
                    profileImagePreview={profileImagePreview}
                    selectedProfileImageFile={selectedProfileImageFile}
                    onProfileImageSelect={handleProfileImageSelect}
                    onEditToggle={handleEditToggle}
                    onSaveChanges={handleSaveChanges}
                    showCategoryDropdown={showCategoryDropdown}
                    setShowCategoryDropdown={setShowCategoryDropdown}
                    visibleCategories={visibleCategories}
                    onAddCategory={handleAddCategoryToView}
                />

                <div className="w-full md:w-2/3 lg:w-3/4 xl:w-4/5">
                    <div className="mb-6 text-center md:text-left">
                         <h2 className="text-xl sm:text-2xl font-semibold text-spc-blue-darker flex items-center justify-center md:justify-start gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="h-6 w-6 text-spc-blue-darker">
                                <path d="M11.25 4.533A9.707 9.707 0 0 0 6 3a9.735 9.735 0 0 0-3.25.555.75.75 0 0 0-.5.707V15a.75.75 0 0 0 .5.707A9.735 9.735 0 0 0 6 16.265a9.735 9.735 0 0 0 3.25-.555.75.75 0 0 0 .5-.707V5.24a.75.75 0 0 0-.5-.707Zm0 0V15.57a.75.75 0 0 0 .5.707c.836.343 1.724.52 2.625.523H18a.75.75 0 0 0 .75-.75V3.75a.75.75 0 0 0-.75-.75h-3.625c.055 0 .109.003.164.008a9.735 9.735 0 0 1 2.625.52V15h-3.625A9.707 9.707 0 0 1 12 15.57V4.533Z" />
                            </svg>
                            Curriculum Vitae Details
                        </h2>
                    </div>

                    {visibleCategories.size === 0 && !isLoading && !isEditingPage && (
                        <div className="rounded-lg border-2 border-dashed border-gray-300 bg-white p-12 text-center text-gray-500 shadow">
                            <p className="mb-2 text-lg font-medium">Your professional profile is looking a bit empty!</p>
                            <p className="text-sm">Click "Edit Profile" then "Add CV Section" to start building your digital CV.</p>
                        </div>
                    )}
                    {visibleCategories.size === 0 && isEditingPage && (
                         <div className="rounded-lg border-2 border-dashed border-gray-300 bg-white p-12 text-center text-gray-500 shadow">
                            <p className="mb-2 text-lg font-medium">Add your first CV section!</p>
                            <p className="text-sm">Use the "Add CV Section" button in the profile panel to begin.</p>
                        </div>
                    )}

                    <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
                        {Array.from(visibleCategories).map(categoryKey => {
                            const categoryMeta = categoryMetadata[categoryKey];
                            // Use rawProfileData for displaying CV items directly if not editing,
                            // or editableData (which is already destructured like academicQualifications) when editing.
                            // For simplicity, we assume the CvSection component can handle either
                            // the raw Prisma types or the Temp types from editableData.
                            // The current setup uses destructured editableData (e.g., `academicQualifications`).
                            const items = (cvSectionsData[categoryKey as keyof typeof cvSectionsData] as EditableCvItem[] | undefined) || [];

                            return (
                                <CvSection
                                    key={categoryKey}
                                    categoryKey={categoryKey}
                                    title={categoryMeta.title}
                                    Icon={categoryMeta.icon}
                                    items={items}
                                    isEditingPage={isEditingPage}
                                    editingItemId={editingItemId}
                                    isPending={isSaving}
                                    changedItemIds={changedItemIds}
                                    onAddItem={() => handleAddItemLocally(categoryKey)}
                                    onStartEditItem={(itemId) => handleStartEditingCvItem(categoryKey, itemId)}
                                    onCancelEditItem={(itemId) => handleCancelCvItemEdit(categoryKey, itemId)}
                                    onSaveItemEdit={(itemId) => handleSaveCvItemEdit(itemId)}
                                    onDeleteItem={(itemId) => handleDeleteItemLocally(categoryKey, itemId)}
                                    onItemInputChange={(itemId, fieldName, value) => handleCvItemInputChange(categoryKey, itemId, fieldName as string, value)}
                                    onItemFileChange={(itemId, file) => handleCvItemFileChange(categoryKey, itemId, file)}
                                />
                            );
                        })}
                    </div>
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\profile\page.tsx ---

--- START FILE: src\app\(protected)\admin\approvals\page.tsx ---
// src/app/(protected)/admin/approvals/page.tsx
'use client';

import React, { useState, useEffect, useTransition } from 'react';
import { getPendingSubmissions, approveSubmission, rejectSubmission } from '@/lib/actions/approvalActions';
import type { ItemType } from '@/types';
import {
    CheckCircleIcon, XCircleIcon, PaperClipIcon, UserCircleIcon, ClockIcon,
    ExclamationTriangleIcon, XMarkIcon, DocumentMagnifyingGlassIcon // New icon for title
} from '@heroicons/react/24/outline';

interface PendingItem {
    id: string;
    itemType: ItemType;
    createdAt: string | Date;
    user: { id: string; name: string | null; email: string | null };
    title?: string;
    degree?: string;
    examination?: string;
    position?: string;
    awardName?: string;
    engagementTitle?: string;
    researchTitle?: string;
    paperTitle?: string;
    diplomaFileUrl?: string | null;
    certificateFileUrl?: string | null;
    licenseFileUrl?: string | null;
    proofUrl?: string | null;
    membershipProofUrl?: string | null;
    certificateUrl?: string | null;
    pdfUrl?: string | null;
    institution?: string;
    organizer?: string;
}

function getItemDisplayTitle(item: PendingItem): string {
    return item.title ?? item.degree ?? item.examination ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? `Item ID: ${item.id}`;
}

function getItemDocumentUrl(item: PendingItem): string | null | undefined {
    switch (item.itemType) {
        case 'academicQualification': return item.diplomaFileUrl;
        case 'professionalDevelopment': return item.certificateFileUrl;
        case 'professionalLicense': return item.licenseFileUrl;
        case 'awardRecognition': return item.certificateUrl;
        case 'publication': return item.pdfUrl;
        case 'workExperience':
        case 'communityInvolvement':
        case 'conferencePresentation':
        case 'professionalAffiliation':
             return item.proofUrl ?? item.membershipProofUrl;
        default: return null;
    }
}

const formatDate = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleString(undefined, { dateStyle: 'medium', timeStyle: 'short' }); } // Changed dateStyle
    catch (e) { return 'Invalid Date'; }
};

export default function AdminApprovalsPage() {
    const [pendingItems, setPendingItems] = useState<PendingItem[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition();
    const [actionError, setActionError] = useState<string | null>(null);
    const [rejectionReason, setRejectionReason] = useState<{ [itemId: string]: string }>({});
    const [showRejectReasonInput, setShowRejectReasonInput] = useState<string | null>(null);
    const [isApproveConfirmModalOpen, setIsApproveConfirmModalOpen] = useState(false);
    const [itemToApprove, setItemToApprove] = useState<PendingItem | null>(null);

    const fetchItems = async () => {
        setIsLoading(true); setError(null);
        const result = await getPendingSubmissions();
        if (result.success) setPendingItems(result.pendingItems || []);
        else setError(result.error || 'Failed to load pending items.');
        setIsLoading(false);
    };

    useEffect(() => { fetchItems(); }, []);

    const openApproveConfirmationModal = (item: PendingItem) => {
        setItemToApprove(item); setActionError(null); setIsApproveConfirmModalOpen(true);
    };

    const handleConfirmApprove = () => {
        if (!itemToApprove || isPending) return;
        setActionError(null);
        startTransition(async () => {
            const result = await approveSubmission(itemToApprove.id, itemToApprove.itemType);
            if (!result.success) setActionError(`Failed to approve ${itemToApprove.itemType}: ${result.error}`);
            else { setIsApproveConfirmModalOpen(false); setItemToApprove(null); await fetchItems(); }
        });
    };

    const handleReject = (itemId: string, itemType: ItemType) => {
        setActionError(null);
        const reason = rejectionReason[itemId]?.trim();
        if (!reason) { setActionError(`Rejection reason is required for item ${itemId}.`); setShowRejectReasonInput(itemId); return; }
        startTransition(async () => {
            const result = await rejectSubmission(itemId, itemType, reason);
            if (!result.success) setActionError(`Failed to reject ${itemType}: ${result.error}`);
            else { setRejectionReason(prev => ({ ...prev, [itemId]: '' })); setShowRejectReasonInput(null); await fetchItems(); }
        });
    };

    const handleReasonChange = (itemId: string, value: string) => setRejectionReason(prev => ({ ...prev, [itemId]: value }));
    const toggleRejectInput = (itemId: string) => {
        setShowRejectReasonInput(prev => prev === itemId ? null : itemId);
        setActionError(null);
    };

    // Button Styles - centralized for consistency
    const baseButtonClasses = "inline-flex items-center justify-center gap-2 rounded-lg px-4 py-2 text-sm font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-spc-blue-lighter disabled:opacity-60 disabled:cursor-not-allowed transition-all duration-150 ease-in-out transform hover:scale-105";
    const approveButtonClasses = `${baseButtonClasses} bg-green-600 text-white hover:bg-green-700 focus:ring-green-500`;
    const rejectButtonBaseClasses = `${baseButtonClasses} text-white`;
    const activeRejectButtonClasses = `${rejectButtonBaseClasses} bg-red-600 hover:bg-red-700 focus:ring-red-500`;
    const inactiveRejectButtonClasses = `${rejectButtonBaseClasses} bg-rose-500 hover:bg-rose-600 focus:ring-rose-500`; // Slightly different red for default "Reject"

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen">
            <div className="mb-8 flex items-center gap-3">
                <DocumentMagnifyingGlassIcon className="h-8 w-8 text-spc-blue-main" />
                <h1 className="text-2xl sm:text-3xl font-bold text-spc-blue-darker">Pending Approvals</h1>
            </div>

            {isLoading && (
                <div className="flex items-center justify-center py-10 gap-3 text-gray-500">
                    <svg className="animate-spin h-6 w-6 text-spc-blue-main" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                    <span>Loading pending items...</span>
                </div>
            )}
            {error && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md shadow-md flex items-center gap-3 mb-6" role="alert">
                    <ExclamationTriangleIcon className="h-6 w-6 text-red-500 flex-shrink-0" />
                    <div><p className="font-bold">Error</p><p>{error}</p></div>
                </div>
            )}
            {actionError && !isApproveConfirmModalOpen && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 rounded-md shadow-sm flex items-center gap-2 mb-4 text-sm" role="alert">
                    <ExclamationTriangleIcon className="h-5 w-5 text-red-500" /> {actionError}
                </div>
            )}

            {!isLoading && !error && pendingItems.length === 0 && (
                 <div className="text-center py-16 bg-white rounded-xl shadow-lg border border-gray-200">
                    <CheckCircleIcon className="h-20 w-20 text-green-300 mx-auto mb-5" />
                    <p className="text-xl font-semibold text-gray-600">All Clear!</p>
                    <p className="text-sm text-gray-400 mt-1">No items currently pending approval.</p>
                </div>
            )}

            {pendingItems.length > 0 && (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {pendingItems.map((item) => {
                        const docUrl = getItemDocumentUrl(item);
                        const displayTitle = getItemDisplayTitle(item);
                        const isRejectingThis = showRejectReasonInput === item.id;

                        return (
                            <div key={item.id} className="bg-white rounded-xl shadow-lg border border-gray-200/80 flex flex-col overflow-hidden hover:shadow-2xl transition-shadow duration-300">
                                {/* Card Header - Item Type */}
                                <div className="p-4 bg-gradient-to-r from-spc-blue-light to-spc-blue-main text-white">
                                    <p className="text-sm font-semibold uppercase tracking-wider">{item.itemType.replace(/([A-Z])/g, ' $1').trim()}</p>
                                </div>

                                <div className="p-5 flex-grow flex flex-col justify-between">
                                    <div>
                                        <h2 className="text-lg font-bold text-spc-blue-darker mb-1.5 break-words">{displayTitle}</h2>
                                        <div className="mb-3 text-xs text-gray-500 space-y-1">
                                            <p className="flex items-center gap-1.5">
                                                <UserCircleIcon className="h-4 w-4 text-gray-400" />
                                                <span className="font-medium text-gray-600">{item.user.name ?? item.user.email ?? 'Unknown User'}</span>
                                            </p>
                                            <p className="flex items-center gap-1.5">
                                                <ClockIcon className="h-4 w-4 text-gray-400" />
                                                <span>Submitted: {formatDate(item.createdAt)}</span>
                                            </p>
                                        </div>
                                        {docUrl ? (
                                            <a
                                                href={docUrl} target="_blank" rel="noopener noreferrer"
                                                className="inline-flex items-center gap-1.5 text-sm text-spc-blue-main hover:text-spc-blue-darker hover:underline font-medium transition-colors duration-150"
                                            >
                                                <PaperClipIcon className="h-4 w-4" /> View Document
                                            </a>
                                        ) : (
                                            <p className="text-xs text-gray-400 italic mt-1">No document attached.</p>
                                        )}
                                    </div>

                                    {/* Action Buttons Area */}
                                    <div className="mt-5 pt-4 border-t border-gray-100">
                                        <div className="flex flex-col sm:flex-row gap-2.5">
                                            <button
                                                onClick={() => openApproveConfirmationModal(item)}
                                                disabled={isPending || isRejectingThis}
                                                className={`${approveButtonClasses} w-full sm:w-auto`}
                                            >
                                                <CheckCircleIcon className="h-5 w-5" /> Approve
                                            </button>
                                            <button
                                                onClick={() => toggleRejectInput(item.id)}
                                                disabled={isPending}
                                                className={`${isRejectingThis ? activeRejectButtonClasses : inactiveRejectButtonClasses} w-full sm:w-auto`}
                                            >
                                                <XCircleIcon className="h-5 w-5" /> {isRejectingThis ? 'Cancel' : 'Reject'}
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                {/* Rejection Reason Input Area (Conditional) */}
                                {isRejectingThis && (
                                    <div className="p-4 border-t border-dashed border-gray-200 bg-rose-50">
                                        <label htmlFor={`reason-${item.id}`} className="block text-sm font-medium text-gray-700 mb-1.5">
                                            Reason for Rejection*
                                        </label>
                                        <textarea
                                            id={`reason-${item.id}`} rows={2}
                                            value={rejectionReason[item.id] || ''}
                                            onChange={(e) => handleReasonChange(item.id, e.target.value)}
                                            className="block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm disabled:opacity-50"
                                            placeholder="Provide a clear reason..."
                                            disabled={isPending}
                                        />
                                        <button
                                            onClick={() => handleReject(item.id, item.itemType)}
                                            disabled={isPending || !rejectionReason[item.id]?.trim()}
                                            className={`${activeRejectButtonClasses} mt-2.5 w-full`}
                                        >
                                            Confirm Rejection
                                        </button>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            )}

            {/* Approve Confirmation Modal (styling adjusted to match general aesthetic) */}
            {isApproveConfirmModalOpen && itemToApprove && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm p-4 animate-fade-in-scale">
                    <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg transform transition-all flex flex-col max-h-[90vh]">
                        <div className="flex justify-between items-center p-5 border-b border-gray-200">
                            <h2 className="text-xl font-semibold text-spc-blue-darker flex items-center gap-2" id="approve-confirm-modal-title">
                                <CheckCircleIcon className="h-6 w-6 text-green-500" />
                                Confirm Approval
                            </h2>
                            <button onClick={() => { if (!isPending) setIsApproveConfirmModalOpen(false); }} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50 transition-colors" aria-label="Close confirmation"> <XMarkIcon className="h-5 w-5" /> </button>
                        </div>
                        <div className="p-5 sm:p-6 overflow-y-auto flex-grow space-y-4">
                            <p className="text-sm text-gray-700"> Please review the details below and confirm approval: </p>
                            <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 space-y-2.5">
                                <div> <span className="text-xs font-medium text-gray-500 uppercase">Item Type:</span> <p className="text-sm text-gray-800">{itemToApprove.itemType.replace(/([A-Z])/g, ' $1').trim()}</p> </div>
                                <div> <span className="text-xs font-medium text-gray-500 uppercase">Title/Identifier:</span> <p className="text-sm font-semibold text-spc-blue-darker">{getItemDisplayTitle(itemToApprove)}</p> </div>
                                <div> <span className="text-xs font-medium text-gray-500 uppercase">Submitted By:</span> <p className="text-sm text-gray-800">{itemToApprove.user.name ?? itemToApprove.user.email ?? 'Unknown User'}</p> </div>
                                <div> <span className="text-xs font-medium text-gray-500 uppercase">Submitted On:</span> <p className="text-sm text-gray-800">{formatDate(itemToApprove.createdAt)}</p> </div>
                                {getItemDocumentUrl(itemToApprove) && ( <div> <span className="text-xs font-medium text-gray-500 uppercase">Document:</span> <a href={getItemDocumentUrl(itemToApprove)!} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1.5 text-sm text-spc-blue-main hover:text-spc-blue-darker hover:underline mt-0.5 font-medium"> <PaperClipIcon className="h-4 w-4" /> View Attached Document </a> </div> )}
                            </div>
                            {actionError && ( <div className="bg-red-50 border-l-4 border-red-400 text-red-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"> <ExclamationTriangleIcon className="h-5 w-5" /> {actionError} </div> )}
                        </div>
                        <div className="flex justify-end gap-3 p-5 border-t border-gray-200 bg-gray-50">
                            <button type="button" onClick={() => { if (!isPending) setIsApproveConfirmModalOpen(false); }} disabled={isPending} className={`${baseButtonClasses} bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-gray-400`}> Cancel </button>
                            <button type="button" onClick={handleConfirmApprove} disabled={isPending} className={approveButtonClasses} > {isPending ? ( <><svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Approving...</> ) : ( 'Confirm Approve' )} </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\approvals\page.tsx ---

--- START FILE: src\app\(protected)\admin\courses\page.tsx ---
// src/app/(protected)/admin/courses/page.tsx
'use client';

import React, { useState, useEffect, useMemo, useTransition, FormEvent, useRef } from 'react';
import { getCourses, createCourse, updateCourse, deleteCourse } from '@/lib/courseActions';
import { getSpecializations } from '@/lib/actions/specializationActions';
import type { Course, Specialization } from '@/generated/prisma/client';
import {
    BookOpenIcon, PlusIcon, PencilIcon, TrashIcon, XMarkIcon,
    ExclamationTriangleIcon, TagIcon, CheckCircleIcon,
    MagnifyingGlassIcon // Added for Search
} from '@heroicons/react/24/outline';

type CourseWithSpecs = Course & {
    requiredSpecializations?: Pick<Specialization, 'id' | 'name'>[];
};

export default function AdminCoursesPage() {
    const [courses, setCourses] = useState<CourseWithSpecs[]>([]);
    const [allSpecializations, setAllSpecializations] = useState<Specialization[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalMode, setModalMode] = useState<'add' | 'edit'>('add');
    const [currentCourse, setCurrentCourse] = useState<CourseWithSpecs | null>(null);
    const [modalError, setModalError] = useState<string | null>(null);
    const [modalSuccess, setModalSuccess] = useState<string | null>(null);
    const formRef = useRef<HTMLFormElement>(null);
    const [selectedSpecIds, setSelectedSpecIds] = useState<Set<string>>(new Set());
    const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);
    const [deletingCourse, setDeletingCourse] = useState<CourseWithSpecs | null>(null);

    // --- State for Search Functionality ---
    const [searchTerm, setSearchTerm] = useState('');
    // Note: 'modalError' is used for both add/edit modal, and general 'error' for list fetching.
    // If delete fails, its error is currently set to the main 'error' state. We can make a specific 'deleteModalError' if needed.

    const fetchPageData = async () => {
        if(!isPending) setIsLoading(true); // Only set loading if not already in a CUD transition
        setError(null);
        // Clear modal-specific success/error states on main data refresh
        setModalError(null); setModalSuccess(null);
        try {
            const [coursesRes, specsRes] = await Promise.all([getCourses(), getSpecializations()]);
            if (coursesRes.success && coursesRes.courses) setCourses(coursesRes.courses);
            else { setError(coursesRes.error || 'Failed to load courses.'); setCourses([]); }
            if (specsRes.success && specsRes.specializations) setAllSpecializations(specsRes.specializations);
            else { setError(prev => prev ? `${prev}, ${specsRes.error || 'FS'}` : (specsRes.error || 'FS')); setAllSpecializations([]); }
        } catch (err) { setError('An unexpected error occurred.'); setCourses([]); setAllSpecializations([]); }
        finally { if(!isPending) setIsLoading(false); }
    };

    useEffect(() => { fetchPageData(); }, []);

    const openModal = (mode: 'add' | 'edit', course?: CourseWithSpecs) => {
        setModalMode(mode); setCurrentCourse(course || null);
        setSelectedSpecIds(course ? new Set(course.requiredSpecializations?.map(s => s.id) || []) : new Set());
        setModalError(null); setModalSuccess(null);
        formRef.current?.reset();
        if (mode === 'edit' && course && formRef.current) {
            (formRef.current.elements.namedItem('name') as HTMLInputElement).value = course.name;
            (formRef.current.elements.namedItem('code') as HTMLInputElement).value = course.code || '';
            (formRef.current.elements.namedItem('description') as HTMLInputElement).value = course.description || '';
        }
        setIsModalOpen(true);
    };
    const closeModal = () => { if (isPending) return; setIsModalOpen(false); setCurrentCourse(null); setModalError(null); setModalSuccess(null); setSelectedSpecIds(new Set()); };
    const handleSpecSelectionChange = (specId: string) => { setSelectedSpecIds(prev => { const newSet = new Set(prev); if (newSet.has(specId)) newSet.delete(specId); else newSet.add(specId); return newSet; }); };

    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault(); setModalError(null); setModalSuccess(null);
        const formData = new FormData(event.currentTarget);
        formData.append('specializationIds', JSON.stringify(Array.from(selectedSpecIds)));
        startTransition(async () => {
            setIsLoading(true); // Show loading indicator for list refresh
            let result;
            if (modalMode === 'add') result = await createCourse(formData);
            else if (currentCourse) result = await updateCourse(currentCourse.id, formData);
            else { setModalError("Action error."); setIsLoading(false); return; }

            if (result.success) {
                setModalSuccess(`Course ${modalMode === 'add' ? 'added' : 'updated'} successfully!`);
                fetchPageData();
                if (modalMode === 'add') { formRef.current?.reset(); setSelectedSpecIds(new Set()); }
                else { setTimeout(() => closeModal(), 1500); } // Close edit modal after success
            } else {
                setModalError(result.error || `Failed to ${modalMode} course.`);
                setIsLoading(false);
            }
        });
    };

    const openDeleteConfirm = (course: CourseWithSpecs) => { setDeletingCourse(course); setError(null); setIsDeleteConfirmOpen(true); };
    const closeDeleteConfirm = () => { if (isPending) return; setIsDeleteConfirmOpen(false); setDeletingCourse(null); };
    const handleDelete = async () => {
        if (!deletingCourse) return;
        setError(null); // Clear main page error before delete attempt
        startTransition(async () => {
            setIsLoading(true);
            const result = await deleteCourse(deletingCourse.id);
            if (result.success) {
                // Use modalSuccess for delete confirmation, not main 'error'
                setModalSuccess('Course deleted successfully!'); // Show success on main page
                fetchPageData();
                closeDeleteConfirm();
            } else {
                // If delete fails, show error on main page.
                setError(result.error || 'Failed to delete course.');
                setIsLoading(false);
                closeDeleteConfirm();
            }
        });
    };

    // --- Filtered Courses List based on Search Term ---
    const filteredCourses = useMemo(() => {
        if (!searchTerm.trim()) {
            return courses; // Return all if search is empty
        }
        const lowercasedSearchTerm = searchTerm.toLowerCase();
        return courses.filter(course =>
            (course.name.toLowerCase().includes(lowercasedSearchTerm)) ||
            (course.code?.toLowerCase().includes(lowercasedSearchTerm))
        );
    }, [courses, searchTerm]);

    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(event.target.value);
    };

    const inputClass = "block w-full rounded-lg border-gray-300 shadow-sm focus:border-spc-blue-main focus:ring-1 focus:ring-spc-blue-main sm:text-sm disabled:opacity-70 bg-white py-2.5 px-3.5";
    const labelClass = "block text-sm font-medium text-gray-700 mb-1.5";
    const modalButtonBase = "inline-flex items-center justify-center gap-2 rounded-lg px-4 py-2.5 text-sm font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-spc-blue-lighter disabled:opacity-60 transition-all duration-150 ease-in-out transform hover:scale-105";

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen">
            {/* Header: Title, Search, and Add Button */}
            <div className="mb-8 space-y-4 sm:space-y-0 sm:flex sm:justify-between sm:items-center sm:gap-4">
                <h1 className="text-2xl sm:text-3xl font-bold text-spc-blue-darker flex items-center gap-3 flex-shrink-0">
                    <BookOpenIcon className="h-8 w-8 text-spc-blue-main" />
                    Manage Courses
                </h1>
                <div className="flex flex-col sm:flex-row sm:items-center gap-3 w-full sm:w-auto">
                    {/* Search Input */}
                    <div className="relative w-full sm:w-auto sm:flex-grow max-w-md">
                        <label htmlFor="course-search" className="sr-only">Search Courses</label>
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3.5">
                            <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                        </div>
                        <input
                            type="search"
                            name="course-search"
                            id="course-search"
                            value={searchTerm}
                            onChange={handleSearchChange}
                            className="block w-full rounded-lg border border-gray-300 bg-white py-2.5 pl-10 pr-3 text-sm placeholder-gray-400 shadow-sm focus:border-spc-blue-main focus:ring-1 focus:ring-spc-blue-main"
                            placeholder="Search by name or code..."
                        />
                    </div>
                    <button
                        onClick={() => openModal('add')}
                        disabled={isPending}
                        className={`${modalButtonBase} bg-spc-blue-main text-white hover:bg-spc-blue-darker focus:ring-spc-blue-light w-full sm:w-auto flex-shrink-0`}
                    >
                        <PlusIcon className="h-5 w-5" />
                        Add New Course
                    </button>
                </div>
            </div>

            {isLoading && (
                <div className="flex items-center justify-center py-10 gap-3 text-gray-500">
                    <svg className="animate-spin h-6 w-6 text-spc-blue-main" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                    <span>{isPending ? 'Processing...' : 'Loading courses...'}</span>
                </div>
            )}
            {error && !isLoading && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md shadow-md flex items-center gap-3 mb-6" role="alert">
                    <ExclamationTriangleIcon className="h-6 w-6 text-red-500 flex-shrink-0" />
                    <div><p className="font-bold">Error</p><p>{error}</p></div>
                </div>
            )}
            {modalSuccess && !isModalOpen && !isDeleteConfirmOpen && ( // Show delete success on main page
                <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-3 rounded-md shadow-sm flex items-center gap-2 text-sm" role="alert">
                    <CheckCircleIcon className="h-5 w-5"/> {modalSuccess}
                </div>
            )}

            {!isLoading && !error && (
                 <div className="bg-white shadow-xl overflow-hidden rounded-xl border border-gray-200/80">
                    {filteredCourses.length === 0 ? ( // Use filteredCourses here
                        <div className="p-10 text-center text-gray-500">
                            <BookOpenIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                            <p className="text-xl font-semibold">
                                {searchTerm ? 'No courses match your search.' : 'No courses defined yet.'}
                            </p>
                            <p className="text-sm text-gray-400 mt-1">
                                {searchTerm ? 'Try a different search term.' : 'Click "Add New Course" to create one.'}
                            </p>
                        </div>
                    ) : (
                        <ul role="list" className="divide-y divide-gray-200">
                            {filteredCourses.map((course) => ( // Use filteredCourses here
                                <li key={course.id} className="px-5 py-4 sm:px-6 group hover:bg-sky-50/50 transition-colors duration-150">
                                    <div className="flex items-center justify-between gap-x-4 gap-y-2"> {/* Adjusted gap */}
                                        <div className="flex-1 min-w-0">
                                            {/* Course Name with Highlight */}
                                            <div className="flex items-baseline gap-x-2 mb-1.5"> {/* Container for name and code */}
                                                <span className="inline-block bg-spc-blue-main text-white text-sm font-semibold px-3 py-1 rounded-md shadow group-hover:bg-spc-blue-darker transition-colors">
                                                    {course.name}
                                                </span>
                                                {course.code && (
                                                    <span className="text-xs text-gray-400 font-normal self-end pb-0.5">
                                                        ({course.code})
                                                    </span>
                                                )}
                                            </div>
                                            
                                            {course.description && (
                                                <p className="mt-1 text-xs text-gray-500 group-hover:text-gray-600 leading-relaxed">
                                                    {course.description}
                                                </p>
                                            )}
                                            {course.requiredSpecializations && course.requiredSpecializations.length > 0 && (
                                                <div className="mt-2 flex flex-wrap gap-1.5">
                                                    <span className="text-xs font-medium text-gray-400 mr-1 self-center">Requires:</span>
                                                    {course.requiredSpecializations.map((spec) => (
                                                        <span key={spec.id} className="text-xs inline-flex items-center rounded-full bg-spc-blue-lighter px-2.5 py-1 font-medium text-spc-blue-darker ring-1 ring-inset ring-spc-blue-main/20">
                                                            <TagIcon className="h-3 w-3 mr-1 text-spc-blue-main/70"/>{spec.name}
                                                        </span>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                        <div className="ml-4 flex-shrink-0 space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                            <button onClick={() => openModal('edit', course)} disabled={isPending} className="p-2 rounded-full text-spc-blue-main hover:bg-spc-blue-lighter focus:outline-none focus:ring-2 focus:ring-spc-blue-light focus:ring-offset-1 disabled:opacity-50 transition-colors" title={`Edit ${course.name}`}> <PencilIcon className="h-4 w-4" /> </button>
                                            <button onClick={() => openDeleteConfirm(course)} disabled={isPending} className="p-2 rounded-full text-red-500 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-1 disabled:opacity-50 transition-colors" title={`Delete ${course.name}`}> <TrashIcon className="h-4 w-4" /> </button>
                                        </div>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            )}

            {(isModalOpen || isDeleteConfirmOpen) && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-md p-4 animate-fade-in-scale">
                    <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg transform transition-all flex flex-col max-h-[90vh]">
                        {isModalOpen && ( /* Add/Edit Modal Content */
                            <>
                                <div className="flex justify-between items-center p-5 border-b border-gray-200">
                                    <h2 className="text-xl font-semibold text-spc-blue-darker flex items-center gap-2" id="course-modal-title">
                                        {modalMode === 'add' ? <PlusIcon className="h-6 w-6 text-spc-blue-main"/> : <PencilIcon className="h-6 w-6 text-spc-blue-main"/>}
                                        {modalMode === 'add' ? 'Add New Course' : `Edit Course: ${currentCourse?.name}`}
                                    </h2>
                                    <button onClick={closeModal} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50" aria-label="Close modal"><XMarkIcon className="h-5 w-5" /></button>
                                </div>
                                <form ref={formRef} onSubmit={handleSubmit} className="p-5 space-y-4 overflow-y-auto">
                                    <div> <label htmlFor="course-name" className={labelClass}>Course Name*</label> <input type="text" id="course-name" name="name" defaultValue={currentCourse?.name || ''} className={inputClass} required disabled={isPending} placeholder="e.g., Clinical Hematology I"/> </div>
                                    <div> <label htmlFor="course-code" className={labelClass}>Course Code (Optional)</label> <input type="text" id="course-code" name="code" defaultValue={currentCourse?.code || ''} className={inputClass} disabled={isPending} placeholder="e.g., MLS301"/> </div>
                                    <div> <label htmlFor="course-description" className={labelClass}>Description (Optional)</label> <textarea id="course-description" name="description" rows={3} defaultValue={currentCourse?.description || ''} className={inputClass} disabled={isPending} placeholder="Briefly describe the course..."></textarea> </div>
                                    <div>
                                        <label className={labelClass}>Required Specializations (Optional)</label>
                                        <div className="mt-1.5 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-3 gap-y-2 max-h-48 overflow-y-auto p-3 border border-gray-200 rounded-lg bg-gray-50/50">
                                            {allSpecializations.length > 0 ? allSpecializations.map(spec => (
                                                <div key={spec.id} className="flex items-center">
                                                    <input id={`spec-${spec.id}`} type="checkbox" checked={selectedSpecIds.has(spec.id)} onChange={() => handleSpecSelectionChange(spec.id)} className="h-4 w-4 rounded border-gray-300 text-spc-blue-main focus:ring-spc-blue-light disabled:opacity-70" disabled={isPending} />
                                                    <label htmlFor={`spec-${spec.id}`} className="ml-2 text-sm text-gray-700 select-none">{spec.name}</label>
                                                </div>
                                            )) : <p className="text-xs text-gray-500 italic col-span-full">No specializations defined to link.</p>}
                                        </div>
                                    </div>
                                    {modalError && <div className="bg-red-50 border-l-4 border-red-400 text-red-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><ExclamationTriangleIcon className="h-5 w-5" /> {modalError}</div>}
                                    {modalSuccess && <div className="bg-green-50 border-l-4 border-green-400 text-green-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><CheckCircleIcon className="h-5 w-5"/> {modalSuccess}</div>}
                                    <div className="flex justify-end gap-3 pt-5 border-t border-gray-200">
                                        <button type="button" onClick={closeModal} disabled={isPending} className={`${modalButtonBase} bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300 focus:ring-gray-400`}>Cancel</button>
                                        <button type="submit" disabled={isPending} className={`${modalButtonBase} ${modalMode === 'add' ? 'bg-spc-blue-main text-white hover:bg-spc-blue-darker focus:ring-spc-blue-light' : 'bg-teal-600 text-white hover:bg-teal-700 focus:ring-teal-500'}`}>{isPending ? 'Saving...' : (modalMode === 'add' ? <><PlusIcon className="h-4 w-4 mr-1"/>Add Course</> : 'Save Changes')}</button>
                                    </div>
                                </form>
                            </>
                        )}
                        {isDeleteConfirmOpen && deletingCourse && ( /* Delete Modal Content */
                            <>
                                <div className="flex justify-between items-center p-5 border-b border-gray-200">
                                    <h2 className="text-xl font-semibold text-red-700 flex items-center gap-2" id="delete-modal-title"><ExclamationTriangleIcon className="h-6 w-6"/> Confirm Deletion</h2>
                                    <button onClick={closeDeleteConfirm} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50" aria-label="Close modal"><XMarkIcon className="h-5 w-5" /></button>
                                </div>
                                <div className="p-5 space-y-4">
                                    <p className="text-sm text-gray-700"> Are you sure you want to permanently delete the course: <br /> <strong className="text-spc-blue-darker text-md">{deletingCourse.name}</strong>? </p>
                                    <p className="text-xs text-red-600 bg-red-50 p-2.5 rounded-md border border-red-200"> This action cannot be undone. </p>
                                    {/* Delete modal error is shown on main page for now, but can be moved here */}
                                </div>
                                <div className="flex justify-end gap-3 p-5 border-t border-gray-200 bg-gray-50/50 rounded-b-xl">
                                    <button type="button" onClick={closeDeleteConfirm} disabled={isPending} className={`${modalButtonBase} bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300 focus:ring-gray-400`}>Cancel</button>
                                    <button type="button" onClick={handleDelete} disabled={isPending} className={`${modalButtonBase} bg-red-600 text-white hover:bg-red-700 focus:ring-red-500`}>{isPending ? 'Deleting...' : <><TrashIcon className="h-4 w-4 mr-1"/>Delete Course</>}</button>
                                </div>
                            </>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\courses\page.tsx ---

--- START FILE: src\app\(protected)\admin\dashboard\page.tsx ---
// src/app/(protected)/admin/dashboard/page.tsx
'use client';

import React, { useState, useEffect } from 'react'; // Added React for Fragment
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import {
    UserGroupIcon,
    DocumentCheckIcon,
    TableCellsIcon,
    ArrowRightIcon,
    BookOpenIcon,
} from '@heroicons/react/24/outline';
import { getAdminDashboardStats } from '@/lib/actions/dashboardActions';
import AestheticClock from '@/components/ui/AestheticClock';

interface DashboardCardProps {
    title: string;
    description: string;
    link: string;
    icon: React.ElementType;
    headerBgClass: string;
}

const DashboardCard: React.FC<DashboardCardProps> = ({
    title,
    description,
    link,
    icon: Icon,
    headerBgClass,
}) => {
    // Split title into words to style the first letter of each
    const titleWords = title.split(' ');

    return (
        <Link
            href={link}
            className={`group flex flex-col rounded-xl overflow-hidden bg-white shadow-lg
                      transition-all duration-300 ease-in-out
                      hover:shadow-2xl hover:-translate-y-1.5 border border-transparent hover:border-spc-blue-light/50`}
        >
            <div className={`p-5 ${headerBgClass} flex items-center justify-between`}>
                <div className="flex items-center gap-3">
                    <span className={`inline-block rounded-md p-2 bg-white/20 backdrop-blur-sm`}>
                        <Icon className={`h-6 w-6 text-white`} />
                    </span>
                    {/* Updated h2 for stylized title */}
                    <h2 className={`text-lg font-semibold text-white flex items-baseline`}> {/* items-baseline helps align text of different sizes */}
                        {titleWords.map((word, index) => (
                            <React.Fragment key={index}>
                                <span className="text-4xl font-bold leading-none align-middle mr-[-0.08em]"> {/* Increased size, bold, adjusted leading & margin */}
                                    {word.charAt(0)}
                                </span>
                                <span className="align-middle">{word.substring(1)}</span>
                                {index < titleWords.length - 1 && <span className="mx-1.5"> </span>} {/* Space between words */}
                            </React.Fragment>
                        ))}
                    </h2>
                </div>
                <ArrowRightIcon className="h-5 w-5 text-white/70 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:text-white group-hover:translate-x-1" />
            </div>
            <div className="p-5 flex-grow">
                <p className="text-sm text-slate-600">{description}</p>
            </div>
        </Link>
    );
};


export default function AdminDashboardPage() {
    const { data: session, status } = useSession();
    const userRole = (session?.user as any)?.role;

    const [stats, setStats] = useState<{ totalFaculty: number; pendingApprovals: number } | null>(null);
    const [isLoadingStats, setIsLoadingStats] = useState(true);
    const [statsError, setStatsError] = useState<string | null>(null);

    useEffect(() => {
        setIsLoadingStats(true);
        setStatsError(null);
        getAdminDashboardStats()
            .then(response => {
                if (response.success && response.stats) {
                    setStats(response.stats);
                } else {
                    setStatsError(response.error || 'Failed to load dashboard statistics.');
                    setStats(null);
                }
            })
            .catch(err => {
                console.error("Dashboard stats fetch error:", err);
                setStatsError('An unexpected error occurred while fetching statistics.');
                setStats(null);
            })
            .finally(() => {
                setIsLoadingStats(false);
            });
    }, []);

    if (status === 'loading') {
        return (
            <div className="flex min-h-[calc(100vh-4rem)] items-center justify-center bg-spc-blue-lighter p-6">
                 <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-spc-blue-main" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading admin dashboard...</span>
                </div>
            </div>
        );
     }
    if (status === 'unauthenticated' || userRole !== 'ADMIN') {
        return (
            <div className="flex min-h-screen items-center justify-center bg-red-50 p-6">
                <p className="text-center text-red-700">
                    Access Denied. <br /> You do not have permission to view this page.
                </p>
            </div>
        );
    }

    return (
        <div className="min-h-[calc(100vh-4rem)] bg-spc-blue-lighter p-6 md:p-8 lg:p-10">
            <header className="mb-10 flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
                <div>
                    <h1 className="text-3xl font-bold tracking-tight text-spc-blue-darker">
                        Administrator Dashboard
                    </h1>
                    <p className="mt-2 text-sm text-slate-600">
                        Welcome,{' '}
                        <span className="font-medium text-spc-blue-DEFAULT">
                            {session?.user?.name ?? session?.user?.email}
                        </span>
                        ! This is the central hub for managing faculty and system settings.
                    </p>
                </div>
                <div className="mt-4 sm:mt-0">
                    <AestheticClock />
                </div>
            </header>

            <div className="mb-10 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
                <div className="rounded-lg bg-white p-5 shadow-lg hover:shadow-xl transition-shadow duration-300 border-t-4 border-spc-blue-main">
                    <div className="flex items-center gap-3">
                        <div className="flex-shrink-0 rounded-full bg-spc-blue-lighter p-2.5 text-spc-blue-main">
                            <UserGroupIcon className="h-5 w-5" />
                        </div>
                        <div>
                            <p className="text-sm font-medium text-slate-500">Total Faculty</p>
                            <p className="text-xl font-semibold text-spc-blue-darker">
                                {isLoadingStats ? '...' : statsError ? 'Error' : stats?.totalFaculty ?? 0}
                            </p>
                        </div>
                    </div>
                </div>
                 <div className="rounded-lg bg-white p-5 shadow-lg hover:shadow-xl transition-shadow duration-300 border-t-4 border-amber-500">
                    <div className="flex items-center gap-3">
                        <div className="flex-shrink-0 rounded-full bg-amber-100 p-2.5 text-amber-700">
                            <DocumentCheckIcon className="h-5 w-5" />
                        </div>
                        <div>
                            <p className="text-sm font-medium text-slate-500">Pending Approvals</p>
                            <p className="text-xl font-semibold text-amber-700">
                                {isLoadingStats ? '...' : statsError ? 'Error' : stats?.pendingApprovals ?? 0}
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                <DashboardCard
                    title="Manage Faculty"
                    description="View, add, and manage faculty profiles and details."
                    link="/admin/faculty"
                    icon={UserGroupIcon}
                    headerBgClass="bg-spc-blue-main"
                />
                <DashboardCard
                    title="Document Approvals"
                    description="Review and approve/reject pending document submissions."
                    link="/admin/approvals"
                    icon={DocumentCheckIcon}
                    headerBgClass="bg-amber-600"
                />
                <DashboardCard
                    title="Specialization Matrix"
                    description="View faculty skills, expertise, and generate reports."
                    link="/admin/matrix"
                    icon={TableCellsIcon}
                    headerBgClass="bg-purple-600"
                />
                 <DashboardCard
                    title="Manage Courses"
                    description="Define and manage academic courses and their requirements."
                    link="/admin/courses"
                    icon={BookOpenIcon}
                    headerBgClass="bg-teal-600"
                />
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\dashboard\page.tsx ---

--- START FILE: src\app\(protected)\admin\faculty\[facultyId]\page.tsx ---
// src/app/(protected)/admin/faculty/[facultyId]/page.tsx
'use client';

import React, { useState, useEffect, useTransition, useCallback, useRef, FormEvent } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image'; // Added for profile image
import { CakeIcon } from '@heroicons/react/24/solid';
// Import necessary actions
import {
    getFacultyProfileById,
    linkSpecializationToFaculty,
    unlinkSpecializationFromFaculty,
    deleteFacultyUser,
    updateFacultyName
} from '@/lib/actions/facultyActions';
import { getSpecializations } from '@/lib/actions/specializationActions';
import type {
    User, Role, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, Specialization,
    Course, SocialMediaLink // Added SocialMediaLink
} from '@/generated/prisma/client';

// Import Display Components
import AcademicQualificationDisplay from '@/components/profile/AcademicQualificationDisplay';
import ProfessionalDevelopmentDisplay from '@/components/profile/ProfessionalDevelopmentDisplay';
import ProfessionalLicenseDisplay from '@/components/profile/ProfessionalLicenseDisplay';
import WorkExperienceDisplay from '@/components/profile/WorkExperienceDisplay';
import ProfessionalAffiliationDisplay from '@/components/profile/ProfessionalAffiliationDisplay';
import AwardRecognitionDisplay from '@/components/profile/AwardRecognitionDisplay';
import CommunityInvolvementDisplay from '@/components/profile/CommunityInvolvementDisplay';
import PublicationDisplay from '@/components/profile/PublicationDisplay';
import ConferencePresentationDisplay from '@/components/profile/ConferencePresentationDisplay';

// Import Icons
import {
    ArrowLeftIcon, UserCircleIcon as ProfileAvatarIcon, EnvelopeIcon, CalendarDaysIcon, ExclamationTriangleIcon,
    AcademicCapIcon, BriefcaseIcon, IdentificationIcon, StarIcon, SparklesIcon, UsersIcon,
    DocumentTextIcon, PresentationChartBarIcon,
    TagIcon, LightBulbIcon, BookOpenIcon, CheckIcon, CheckCircleIcon,
    TrashIcon, XMarkIcon, PencilIcon, PhoneIcon, MapPinIcon,
    UserIcon as EmployeeIdIcon, ChatBubbleBottomCenterTextIcon, LinkIcon,
    BuildingLibraryIcon // Added for consistency if used in display components
} from '@heroicons/react/24/outline';

// Define Match Strength Type
type CourseMatchStrength = 'FULL_MATCH' | 'PARTIAL_MATCH' | 'NO_MATCH';

// Updated structure for faculty profile data (ensure this matches the return type of getFacultyProfileById)
interface FacultyProfileData {
    user: {
        id: string;
        name: string | null;
        email: string | null;
        role: Role | null;
        createdAt: Date;
        specializations: Specialization[];
        profileImageUrl: string | null;
        dateOfBirth: Date | null;
        civilStatus: string | null;
        nationality: string | null;
        contactNumber: string | null;
        address: string | null;
        employeeId: string | null;
        bio: string | null;
        socialMediaLinks: SocialMediaLink[];
    };
    potentialCourses: (Course & {
        requiredSpecializations: Pick<Specialization, 'id' | 'name'>[];
        matchStrength: CourseMatchStrength;
    })[];
    suggestedTeachingAreas: string[];
    academicQualifications: AcademicQualification[];
    professionalLicenses: ProfessionalLicense[];
    workExperiences: WorkExperience[];
    professionalAffiliations: ProfessionalAffiliation[];
    awardsRecognitions: AwardRecognition[];
    professionalDevelopments: ProfessionalDevelopment[];
    communityInvolvements: CommunityInvolvement[];
    publications: Publication[];
    conferencePresentations: ConferencePresentation[];
}

// Metadata for CV sections
const sectionMetadata = {
    academicQualifications: { title: 'Academic Qualifications', icon: AcademicCapIcon, component: AcademicQualificationDisplay },
    professionalLicenses: { title: 'Professional Licenses', icon: IdentificationIcon, component: ProfessionalLicenseDisplay },
    workExperiences: { title: 'Work Experience', icon: BriefcaseIcon, component: WorkExperienceDisplay },
    professionalAffiliations: { title: 'Professional Affiliations', icon: UsersIcon, component: ProfessionalAffiliationDisplay },
    awardsRecognitions: { title: 'Awards & Recognitions', icon: StarIcon, component: AwardRecognitionDisplay },
    professionalDevelopments: { title: 'Professional Development', icon: SparklesIcon, component: ProfessionalDevelopmentDisplay },
    communityInvolvements: { title: 'Community Involvement', icon: UsersIcon, component: CommunityInvolvementDisplay },
    publications: { title: 'Publications', icon: DocumentTextIcon, component: PublicationDisplay },
    conferencePresentations: { title: 'Conference Presentations', icon: PresentationChartBarIcon, component: ConferencePresentationDisplay },
} as const;

type SectionKey = keyof typeof sectionMetadata;

// Helper to format date
const formatDate = (date: Date | string | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' }); }
    catch (e) { console.error("Error formatting date:", e); return 'Invalid Date'; }
};

// Standardized styling classes (can be moved to a shared constants file)
const profileLabelClass = "block text-xs font-medium text-gray-500 mb-0.5";
const basePageActionButtonClasses = "inline-flex items-center justify-center rounded-md px-3 py-1.5 text-sm font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-150 ease-in-out disabled:opacity-70";


export default function AdminFacultyProfilePage() {
    const params = useParams();
    const router = useRouter();
    const facultyId = params?.facultyId as string | undefined;

    // State
    const [facultyProfile, setFacultyProfile] = useState<FacultyProfileData | null>(null);
    const [isLoadingProfile, setIsLoadingProfile] = useState(true);
    const [profileError, setProfileError] = useState<string | null>(null);
    const [allSpecializations, setAllSpecializations] = useState<Specialization[]>([]);
    const [isLoadingSpecs, setIsLoadingSpecs] = useState(true);
    const [specsError, setSpecsError] = useState<string | null>(null);
    const [isLinkingPending, startLinkTransition] = useTransition();
    const [linkError, setLinkError] = useState<string | null>(null);
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [isDeleting, startDeleteTransition] = useTransition();
    const [deleteError, setDeleteError] = useState<string | null>(null);
    const [isEditNameModalOpen, setIsEditNameModalOpen] = useState(false);
    const [isUpdatingName, startNameUpdateTransition] = useTransition();
    const [editNameError, setEditNameError] = useState<string | null>(null);
    const editNameFormRef = useRef<HTMLFormElement>(null);

    const fetchProfile = useCallback(async () => {
        if (!facultyId) {
            setProfileError('Faculty ID not found in URL.'); setIsLoadingProfile(false); return;
        }
        setIsLoadingProfile(true); setProfileError(null);
        try {
            const response = await getFacultyProfileById(facultyId);
            if (response.success && response.facultyProfile) {
                setFacultyProfile(response.facultyProfile);
            } else {
                setProfileError(response.error || 'Failed to load faculty profile.'); setFacultyProfile(null);
            }
        } catch (err) {
            setProfileError('An unexpected error occurred.'); setFacultyProfile(null);
        } finally {
            setIsLoadingProfile(false);
        }
    }, [facultyId]);

    const fetchAllSpecializations = useCallback(async () => {
        setIsLoadingSpecs(true); setSpecsError(null);
        try {
            const response = await getSpecializations(); // This action should be for admins
            if (response.success && response.specializations) {
                setAllSpecializations(response.specializations);
            } else {
                setSpecsError(response.error || 'Failed to load specializations list.'); setAllSpecializations([]);
            }
        } catch (err) {
            setSpecsError('An unexpected error occurred.'); setAllSpecializations([]);
        } finally {
            setIsLoadingSpecs(false);
        }
    }, []);

    useEffect(() => {
        fetchProfile();
        fetchAllSpecializations();
    }, [fetchProfile, fetchAllSpecializations]);

    const handleSpecializationChange = (specializationId: string, isChecked: boolean) => {
        if (!facultyId || isLinkingPending) return;
        setLinkError(null);
        startLinkTransition(async () => {
            const result = isChecked ? await linkSpecializationToFaculty(facultyId, specializationId) : await unlinkSpecializationFromFaculty(facultyId, specializationId);
            if (!result.success) {
                setLinkError(result.error || `Failed to ${isChecked ? 'link' : 'unlink'} specialization.`);
            } else {
                await fetchProfile(); // Refetch profile data
            }
        });
    };

    const openEditNameModal = () => { setEditNameError(null); setIsEditNameModalOpen(true); };
    const closeEditNameModal = () => { if (isUpdatingName) return; setIsEditNameModalOpen(false); setEditNameError(null); };
    const handleNameUpdateSubmit = (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!facultyId || isUpdatingName || !editNameFormRef.current) return;
        setEditNameError(null);
        const formData = new FormData(editNameFormRef.current);
        formData.append('facultyId', facultyId); // Ensure facultyId is part of the form data for the action
        startNameUpdateTransition(async () => {
            const result = await updateFacultyName(formData);
            if (result.success) {
                closeEditNameModal();
                await fetchProfile();
            } else {
                setEditNameError(result.error || 'Failed to update name.');
            }
        });
    };

    const openDeleteModal = () => { setDeleteError(null); setIsDeleteModalOpen(true); };
    const closeDeleteModal = () => { if (isDeleting) return; setIsDeleteModalOpen(false); setDeleteError(null); };
    const handleDeleteConfirm = () => {
        if (!facultyId || isDeleting) return;
        setDeleteError(null);
        startDeleteTransition(async () => {
            const result = await deleteFacultyUser(facultyId);
            if (result.success) {
                closeDeleteModal();
                router.push('/admin/faculty');
            } else {
                setDeleteError(result.error || 'Failed to delete faculty member.');
            }
        });
    };

    const isLoading = isLoadingProfile || isLoadingSpecs;
    const combinedError = profileError || specsError;

    if (isLoading) {
        return (
            <div className="p-6 bg-gray-50 min-h-screen flex items-center justify-center">
                <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading faculty profile...</span>
                </div>
            </div>
        );
    }

    if (combinedError) {
        return (
            <div className="p-6 bg-red-50 min-h-screen flex flex-col items-center justify-center">
                <div className="max-w-2xl w-full bg-white p-6 rounded-lg shadow border border-red-200 text-center">
                    <ExclamationTriangleIcon className="h-12 w-12 text-red-400 mx-auto mb-4" />
                    <h2 className="text-xl font-semibold text-red-700 mb-2">Error Loading Profile</h2>
                    <p className="text-red-600 mb-6">{combinedError}</p>
                    <Link href="/admin/faculty" className="inline-flex items-center gap-1 text-sm text-blue-600 hover:underline">
                        <ArrowLeftIcon className="h-4 w-4" />
                        Back to Faculty List
                    </Link>
                </div>
            </div>
        );
    }

    if (!facultyProfile || !facultyProfile.user) {
        return (
            <div className="p-6 bg-gray-50 min-h-screen flex flex-col items-center justify-center">
                <p className="text-gray-600">Faculty profile data not found.</p>
                <Link href="/admin/faculty" className="mt-4 inline-flex items-center gap-1 text-sm text-blue-600 hover:underline">
                    <ArrowLeftIcon className="h-4 w-4" />
                    Back to Faculty List
                </Link>
            </div>
        );
    }

    const { user, suggestedTeachingAreas, potentialCourses, ...cvSections } = facultyProfile;
    const userInitials = user.name?.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase() || user.email?.charAt(0).toUpperCase() || '?';
    const linkedSpecIds = new Set(user.specializations.map(spec => spec.id));

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen">
            <div className="mb-4">
                <Link href="/admin/faculty" className="inline-flex items-center gap-1 text-sm text-blue-600 hover:underline">
                    <ArrowLeftIcon className="h-4 w-4" />
                    Back to Faculty List
                </Link>
            </div>

            <div className="flex flex-col md:flex-row md:gap-6 lg:gap-8">
                {/* Left Profile Card */}
                <div className="w-full md:w-1/3 lg:w-1/4 xl:w-1/5 mb-6 md:mb-0 md:sticky md:top-20 md:self-start">
                    <div className="bg-white rounded-xl shadow-xl border border-gray-200 overflow-hidden">
                        <div className="flex flex-col items-center p-6 bg-spc-blue-main">
                            <div className="relative h-36 w-36 sm:h-40 sm:w-40 rounded-full overflow-hidden bg-gray-300 ring-4 ring-white shadow-lg">
                                {user.profileImageUrl ? (
                                    <Image src={user.profileImageUrl} alt={`${user.name || 'Faculty'}'s profile`} layout="fill" objectFit="cover" onError={(e) => { (e.target as HTMLImageElement).style.display = 'none'; const parent = (e.target as HTMLElement).parentElement; if (parent) { parent.innerHTML = `<div class="flex items-center justify-center h-full w-full bg-spc-blue-darker text-white text-5xl font-semibold">${userInitials}</div>`;}}} />
                                ) : (
                                    <div className="flex items-center justify-center h-full w-full bg-spc-blue-darker text-white text-5xl font-semibold">{userInitials}</div>
                                )}
                            </div>
                            <h2 className="mt-4 text-xl font-bold text-white text-center">{user.name ?? 'N/A'}</h2>
                            <p className="text-sm text-white opacity-80">{user.role}</p>
                        </div>
                        <div className="p-5 space-y-3 text-sm">
                            <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><EnvelopeIcon className="h-4 w-4"/>Email</label><p className="text-gray-900 break-all">{user.email ?? 'N/A'}</p></div>
                            {user.contactNumber && <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><PhoneIcon className="h-4 w-4"/>Contact</label><p className="text-gray-900">{user.contactNumber}</p></div>}
                            {user.employeeId && <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><EmployeeIdIcon className="h-4 w-4"/>Employee ID</label><p className="text-gray-900">{user.employeeId}</p></div>}
                            {user.dateOfBirth && <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><CakeIcon className="h-4 w-4"/>Born</label><p className="text-gray-900">{formatDate(user.dateOfBirth)}</p></div>}
                            {user.civilStatus && <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><IdentificationIcon className="h-4 w-4"/>Civil Status</label><p className="text-gray-900">{user.civilStatus}</p></div>}
                            {user.nationality && <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><IdentificationIcon className="h-4 w-4"/>Nationality</label><p className="text-gray-900">{user.nationality}</p></div>}
                            {user.address && <div><label className={`${profileLabelClass} flex items-start gap-1.5`}><MapPinIcon className="h-4 w-4 mt-0.5"/>Address</label><p className="text-gray-900 whitespace-pre-wrap">{user.address}</p></div>}
                            {(user.bio || user.socialMediaLinks?.length > 0) && <div className="pt-1.5 mt-1.5 border-t border-gray-100"></div>}
                            {user.bio && <div><label className={`${profileLabelClass} flex items-center gap-1.5`}><ChatBubbleBottomCenterTextIcon className="h-4 w-4"/>Bio</label><p className="text-gray-700 whitespace-pre-wrap">{user.bio}</p></div>}
                            {user.socialMediaLinks && user.socialMediaLinks.length > 0 && (
                                <div className="pt-1.5 mt-1.5 border-t border-gray-100 space-y-1">
                                    <h3 className="text-xs font-semibold text-gray-500 uppercase flex items-center gap-1.5"><LinkIcon className="h-4 w-4"/>Social Links</h3>
                                    {user.socialMediaLinks.map(link => (
                                        <a key={link.id} href={link.url.startsWith('http') ? link.url : `https://${link.url}`} target="_blank" rel="noopener noreferrer" className="flex items-center gap-2 text-spc-blue-main hover:text-spc-blue-darker hover:underline break-all text-xs">
                                            <LinkIcon className="h-3.5 w-3.5 text-gray-400 flex-shrink-0" />
                                            <span className="font-medium">{link.platform}:</span>
                                            <span className="truncate">{link.url}</span>
                                        </a>
                                    ))}
                                </div>
                            )}
                        </div>
                        <div className="p-4 border-t border-gray-200 bg-gray-50 space-y-2.5">
                            <button onClick={openEditNameModal} disabled={isUpdatingName || isDeleting} className={`${basePageActionButtonClasses} bg-blue-600 hover:bg-blue-700 focus:ring-blue-500 w-full`}> <PencilIcon className="h-4 w-4 mr-1.5" /> Edit Name </button>
                            <button onClick={openDeleteModal} disabled={isDeleting} className={`${basePageActionButtonClasses} bg-red-600 hover:bg-red-700 focus:ring-red-500 w-full`}> <TrashIcon className="h-4 w-4 mr-1.5" /> Delete Faculty </button>
                        </div>
                    </div>
                </div>

                {/* Right Column */}
                <div className="w-full md:w-2/3 lg:w-3/4 xl:w-4/5 space-y-6">
                    {linkError && (
                        <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded relative flex items-center gap-2" role="alert">
                            <ExclamationTriangleIcon className="h-5 w-5 text-red-500" />
                            <span className="block sm:inline">{linkError}</span>
                        </div>
                    )}
                    {/* Specializations Management Card */}
                    <div className="rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                        <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-gray-50"> <TagIcon className="h-5 w-5 text-gray-500" /> <h2 className="text-base font-semibold text-gray-700"> Manage Assigned Specializations </h2> </div>
                        <div className="p-4 sm:p-6">
                            {allSpecializations.length === 0 && !isLoadingSpecs ? ( <p className="text-sm text-gray-500 italic">No specializations defined. <Link href="/admin/specializations" className='text-blue-600 hover:underline'>Manage Specializations</Link></p> ) : isLoadingSpecs ? ( <p className="text-sm text-gray-500 italic">Loading...</p> ) : (
                                <fieldset disabled={isLinkingPending}>
                                    <legend className="sr-only">Specializations</legend>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-4 gap-y-3">
                                        {allSpecializations.map((spec) => (
                                            <div key={spec.id} className="relative flex items-start">
                                                <div className="flex h-6 items-center"> <input id={`spec-${spec.id}`} name="specializations" type="checkbox" checked={linkedSpecIds.has(spec.id)} onChange={(e) => handleSpecializationChange(spec.id, e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 disabled:opacity-70" /> </div>
                                                <div className="ml-3 text-sm leading-6"> <label htmlFor={`spec-${spec.id}`} className="font-medium text-gray-900"> {spec.name} </label> {spec.description && ( <p className="text-xs text-gray-500">{spec.description}</p> )} </div>
                                            </div>
                                        ))}
                                    </div>
                                </fieldset>
                            )}
                        </div>
                    </div>

                    {/* Suggested Teaching Areas Card */}
                    <div className="rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                        <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-indigo-50">
                            <LightBulbIcon className="h-5 w-5 text-indigo-600" />
                            <h2 className="text-base font-semibold text-indigo-800">Expertise / Suggested Teaching Areas</h2>
                        </div>
                        <div className="p-4 sm:p-6">
                            {suggestedTeachingAreas.length === 0 ? (
                                <p className="text-sm text-gray-500 italic">No specializations linked.</p>
                            ) : (
                                <ul className="space-y-1.5">
                                    {suggestedTeachingAreas.map((area, index) => (
                                        <li key={index} className="flex items-center gap-2 text-sm text-gray-800">
                                            <CheckIcon className="h-4 w-4 text-green-500 flex-shrink-0" /><span>{area}</span>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </div>

                    {/* Potential Courses to Teach Card */}
                    <div className="rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                        <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-green-50">
                            <BookOpenIcon className="h-5 w-5 text-green-600" />
                            <h2 className="text-base font-semibold text-green-800">Potential Courses to Teach</h2>
                        </div>
                        <div className="p-4 sm:p-6">
                            {potentialCourses.length > 0 ? (
                                <ul className="space-y-3">
                                    {potentialCourses.map((course) => (
                                        <li key={course.id} className="pb-3 mb-3 border-b border-gray-100 last:border-b-0 last:pb-0 last:mb-0">
                                            <div className="flex items-start justify-between">
                                                <div>
                                                    <p className="text-sm font-semibold text-gray-800">{course.name} {course.code && <span className="text-xs text-gray-500">({course.code})</span>}</p>
                                                    {course.description && (<p className="mt-0.5 text-xs text-gray-600">{course.description}</p>)}
                                                    {course.requiredSpecializations && course.requiredSpecializations.length > 0 && (
                                                        <p className="mt-1 text-xs text-gray-500"><span className="font-medium">Requires:</span> {course.requiredSpecializations.map(spec => spec.name).join(', ')}</p>
                                                    )}
                                                </div>
                                                <div className="ml-4 flex-shrink-0">
                                                    {course.matchStrength === 'FULL_MATCH' && (<span className="inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-semibold text-green-800"><CheckCircleIcon className="h-4 w-4 mr-1 text-green-600" /> Full Match</span>)}
                                                    {course.matchStrength === 'PARTIAL_MATCH' && (<span className="inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-semibold text-yellow-800"><ExclamationTriangleIcon className="h-4 w-4 mr-1 text-yellow-600" /> Partial Match</span>)}
                                                </div>
                                            </div>
                                        </li>
                                    ))}
                                </ul>
                            ) : (<p className="text-sm text-gray-500 italic">No course suggestions based on current specializations.</p>)}
                        </div>
                    </div>

                    {/* Dynamic CV Sections Grid */}
                    <div className="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
                        {(Object.keys(sectionMetadata) as SectionKey[]).map(sectionKey => {
                            const sectionData = (cvSections as any)[sectionKey];
                            if (!sectionData || sectionData.length === 0) { return null; }
                            const meta = sectionMetadata[sectionKey];
                            const SectionIcon = meta.icon;
                            const DisplayComponent = meta.component;
                            return (
                                <div key={sectionKey} className="flex flex-col rounded-lg bg-white shadow border border-gray-200 overflow-hidden">
                                    <div className="flex items-center gap-3 p-4 border-b border-gray-200 bg-gray-50"> <SectionIcon className="h-5 w-5 text-gray-500" /> <h2 className="text-base font-semibold text-gray-700"> {meta.title} </h2> </div>
                                    <div className="flex-grow p-4 space-y-4">
                                        {sectionData.map((item: any) => (
                                            <div key={item.id} className="pb-4 border-b border-gray-100 last:border-b-0 last:pb-0">
                                                <DisplayComponent item={item} isEditing={false} />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>

            {/* Edit Name Modal */}
            {isEditNameModalOpen && facultyProfile?.user && (
                 <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm p-4" aria-labelledby="edit-name-modal-title" role="dialog" aria-modal="true"> <div className="bg-white rounded-lg shadow-xl w-full max-w-md transform transition-all"> <form ref={editNameFormRef} onSubmit={handleNameUpdateSubmit}> <div className="flex justify-between items-center p-4 border-b border-gray-200"> <h2 className="text-lg font-semibold text-gray-800" id="edit-name-modal-title">Edit Faculty Name</h2> <button type="button" onClick={closeEditNameModal} disabled={isUpdatingName} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal"> <XMarkIcon className="h-5 w-5" /> </button> </div> <div className="p-5 space-y-4"> <div> <label htmlFor="faculty-name-edit" className="block text-sm font-medium text-gray-700 mb-1">Full Name</label> <input type="text" id="faculty-name-edit" name="name" defaultValue={facultyProfile.user.name || ''} className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm disabled:opacity-70" placeholder="Enter faculty name" disabled={isUpdatingName} /> </div> {editNameError && ( <div className="bg-red-50 border border-red-200 text-red-700 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert"> <ExclamationTriangleIcon className="h-4 w-4" /> {editNameError} </div> )} </div> <div className="flex justify-end gap-3 p-4 border-t border-gray-200 bg-gray-50"> <button type="button" onClick={closeEditNameModal} disabled={isUpdatingName} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"> Cancel </button> <button type="submit" disabled={isUpdatingName} className="inline-flex justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-60" > {isUpdatingName ? 'Saving...' : 'Save Name'} </button> </div> </form> </div> </div>
            )}
            {/* Delete Confirmation Modal */}
            {isDeleteModalOpen && facultyProfile?.user && (
                 <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm p-4" aria-labelledby="delete-faculty-modal-title" role="dialog" aria-modal="true"> <div className="bg-white rounded-lg shadow-xl w-full max-w-md transform transition-all"> <div className="flex justify-between items-center p-4 border-b border-gray-200"> <h2 className="text-lg font-semibold text-red-700 flex items-center gap-2" id="delete-faculty-modal-title"> <ExclamationTriangleIcon className="h-5 w-5 text-red-600"/> Confirm Deletion </h2> <button onClick={closeDeleteModal} disabled={isDeleting} className="p-1 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 disabled:opacity-50" aria-label="Close modal"> <XMarkIcon className="h-5 w-5" /> </button> </div> <div className="p-5"> <p className="text-sm text-gray-700 mb-3"> Are you sure you want to permanently delete the faculty member: <br /> <strong className="text-gray-900">{facultyProfile.user.name || facultyProfile.user.email}?</strong> </p> <p className="text-xs text-red-600 bg-red-50 p-2 rounded border border-red-100"> This action cannot be undone. All associated profile data (qualifications, licenses, experience, etc.) will also be permanently deleted. </p> {deleteError && ( <div className="mt-3 bg-red-100 border border-red-300 text-red-800 px-3 py-2 rounded text-sm flex items-center gap-2" role="alert"> <ExclamationTriangleIcon className="h-4 w-4" /> {deleteError} </div> )} </div> <div className="flex justify-end gap-3 p-4 border-t border-gray-200 bg-gray-50"> <button type="button" onClick={closeDeleteModal} disabled={isDeleting} className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"> Cancel </button> <button type="button" onClick={handleDeleteConfirm} disabled={isDeleting} className="inline-flex justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-60" > {isDeleting ? 'Deleting...' : 'Confirm Delete'} </button> </div> </div> </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\faculty\[facultyId]\page.tsx ---

--- START FILE: src\app\(protected)\admin\faculty\page.tsx ---
// src/app/(protected)/admin/faculty/page.tsx
'use client';

import React, { useState, useEffect, useMemo, useTransition, FormEvent, useRef } from 'react';
import Link from 'next/link';
import { getAllFaculty, createFacultyUser } from '@/lib/actions/facultyActions';
import {
    UserGroupIcon, EnvelopeIcon, CalendarDaysIcon, ArrowRightIcon, ExclamationTriangleIcon,
    PlusIcon, XMarkIcon, UserCircleIcon as UserAvatarIcon,
    MagnifyingGlassIcon // Added for Search
} from '@heroicons/react/24/outline';

interface FacultyMember {
    id: string;
    name: string | null;
    email: string | null;
    createdAt: Date;
}

const formatDate = (date: Date | string | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' }); }
    catch (e) { return 'Invalid Date'; }
};

export default function AdminFacultyListPage() {
    const [facultyList, setFacultyList] = useState<FacultyMember[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalError, setModalError] = useState<string | null>(null);
    const [modalSuccess, setModalSuccess] = useState<string | null>(null);
    const formRef = useRef<HTMLFormElement>(null);

    // --- State for Search Functionality ---
    const [searchTerm, setSearchTerm] = useState('');

    const fetchFaculty = () => {
        setIsLoading(true);
        setError(null);
        getAllFaculty()
            .then(result => {
                if (result.success) setFacultyList(result.faculty || []);
                else { setError(result.error || 'Failed to load faculty list.'); setFacultyList([]); }
            })
            .catch(err => {
                setError("An unexpected error occurred."); setFacultyList([]);
            })
            .finally(() => setIsLoading(false));
    };

    useEffect(() => { fetchFaculty(); }, []);

    const openModal = () => {
        setModalError(null); setModalSuccess(null);
        formRef.current?.reset(); setIsModalOpen(true);
    };
    const closeModal = () => {
        if (isPending) return;
        setIsModalOpen(false); setModalError(null); setModalSuccess(null);
    };

    const handleAddFacultySubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setModalError(null); setModalSuccess(null);
        const formData = new FormData(event.currentTarget);
        startTransition(async () => {
            const result = await createFacultyUser(formData);
            if (result.success) {
                setModalSuccess(`Faculty user ${result.user?.email} created!`);
                formRef.current?.reset();
                fetchFaculty();
            } else {
                setModalError(result.error || 'Failed to add faculty.');
            }
        });
    };

    // --- Filtered Faculty List based on Search Term ---
    const filteredFacultyList = useMemo(() => {
        if (!searchTerm.trim()) {
            return facultyList; // Return all if search is empty
        }
        const lowercasedSearchTerm = searchTerm.toLowerCase();
        return facultyList.filter(faculty =>
            (faculty.name?.toLowerCase().includes(lowercasedSearchTerm)) ||
            (faculty.email?.toLowerCase().includes(lowercasedSearchTerm))
        );
    }, [facultyList, searchTerm]);

    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(event.target.value);
    };


    const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-spc-blue-main focus:ring-spc-blue-main sm:text-sm disabled:opacity-70";
    const labelClass = "block text-sm font-medium text-gray-700 mb-1";

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen">
            {/* Header: Title, Search, and Add Button */}
            <div className="mb-8 space-y-4 sm:space-y-0 sm:flex sm:justify-between sm:items-center sm:gap-4">
                <h1 className="text-2xl sm:text-3xl font-bold text-spc-blue-darker flex items-center gap-3 flex-shrink-0">
                    <UserGroupIcon className="h-8 w-8 text-spc-blue-main" />
                    Faculty Management
                </h1>

                <div className="flex flex-col sm:flex-row sm:items-center gap-3 w-full sm:w-auto">
                    {/* Search Input */}
                    <div className="relative w-full sm:w-auto sm:flex-grow max-w-md">
                        <label htmlFor="faculty-search" className="sr-only">Search Faculty</label>
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                            <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                        </div>
                        <input
                            type="search" // Using type="search" gives a clear 'x' button in some browsers
                            name="faculty-search"
                            id="faculty-search"
                            value={searchTerm}
                            onChange={handleSearchChange}
                            className="block w-full rounded-lg border border-gray-300 bg-white py-2.5 pl-10 pr-3 text-sm placeholder-gray-400 shadow-sm focus:border-spc-blue-main focus:ring-1 focus:ring-spc-blue-main"
                            placeholder="Search by name or email..."
                        />
                    </div>

                    {/* Add Faculty Button */}
                    <button
                        onClick={openModal}
                        disabled={isPending}
                        className="w-full sm:w-auto inline-flex items-center justify-center gap-2 rounded-lg bg-spc-blue-main px-5 py-2.5 text-sm font-semibold text-white shadow-md hover:bg-spc-blue-darker focus:outline-none focus:ring-2 focus:ring-spc-blue-light focus:ring-offset-2 focus:ring-offset-spc-blue-lighter disabled:opacity-60 transition-all duration-150 ease-in-out transform hover:scale-105 flex-shrink-0"
                    >
                        <PlusIcon className="h-5 w-5" />
                        Add New Faculty
                    </button>
                </div>
            </div>

            {isLoading && (
                 <div className="flex items-center justify-center py-10 gap-3 text-gray-500">
                    <svg className="animate-spin h-6 w-6 text-spc-blue-main" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                    <span>Loading faculty list...</span>
                </div>
            )}
            {error && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md shadow-md flex items-center gap-3 mb-6" role="alert">
                    <ExclamationTriangleIcon className="h-6 w-6 text-red-500 flex-shrink-0" />
                    <div> <p className="font-bold">Error</p> <p>{error}</p> </div>
                </div>
            )}

            {!isLoading && !error && (
                <div className="space-y-4">
                    {filteredFacultyList.length === 0 ? (
                        <div className="text-center py-10 bg-white rounded-xl shadow-lg border border-gray-200">
                            <UserGroupIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                            <p className="text-xl font-semibold text-gray-500">
                                {searchTerm ? 'No faculty members match your search.' : 'No faculty members found.'}
                            </p>
                            <p className="text-sm text-gray-400 mt-1">
                                {searchTerm ? 'Try a different search term or clear the search.' : 'Click "Add New Faculty" to get started.'}
                            </p>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5">
                            {filteredFacultyList.map((faculty) => ( // Use filteredFacultyList here
                                <Link
                                    key={faculty.id}
                                    href={`/admin/faculty/${faculty.id}`}
                                    className="group block bg-white rounded-xl shadow-lg hover:shadow-2xl border border-gray-200/80 hover:border-spc-blue-main/50
                                               transition-all duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-[1.02]"
                                >
                                    <div className="p-5">
                                        <div className="flex items-center gap-4 mb-3">
                                            <div className="flex-shrink-0 h-12 w-12 rounded-full bg-spc-blue-lighter flex items-center justify-center text-spc-blue-main text-xl font-semibold ring-2 ring-spc-blue-light/50 group-hover:ring-spc-blue-main transition-all">
                                                {faculty.name ? faculty.name.split(' ').map(n => n[0]).slice(0,2).join('').toUpperCase() : <UserAvatarIcon className="h-6 w-6" />}
                                            </div>
                                            <div className="flex-1 min-w-0">
                                                <p className="text-md font-semibold text-spc-blue-darker truncate group-hover:text-spc-blue-main transition-colors">
                                                    {faculty.name || 'Unnamed Faculty'}
                                                </p>
                                                <p className="text-xs text-gray-500 truncate flex items-center gap-1 group-hover:text-spc-blue-light transition-colors">
                                                    <EnvelopeIcon className="h-3.5 w-3.5" />
                                                    {faculty.email || 'No Email'}
                                                </p>
                                            </div>
                                        </div>
                                        <div className="mt-2 pt-3 border-t border-gray-100 flex justify-between items-center">
                                            <p className="text-xs text-gray-400 flex items-center gap-1">
                                                <CalendarDaysIcon className="h-3.5 w-3.5" />
                                                Joined: {formatDate(faculty.createdAt)}
                                            </p>
                                            <ArrowRightIcon className="h-5 w-5 text-gray-300 group-hover:text-spc-blue-main group-hover:translate-x-1 transition-all duration-200" />
                                        </div>
                                    </div>
                                </Link>
                            ))}
                        </div>
                    )}
                </div>
            )}

            {isModalOpen && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm p-4 animate-fade-in-scale">
                    <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg transform transition-all flex flex-col">
                        <div className="flex justify-between items-center p-5 border-b border-gray-200">
                            <h2 className="text-xl font-semibold text-spc-blue-darker flex items-center gap-2" id="modal-title">
                                <UserAvatarIcon className="h-6 w-6 text-spc-blue-main" /> Add New Faculty
                            </h2>
                            <button onClick={closeModal} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50 transition-colors" aria-label="Close modal" > <XMarkIcon className="h-5 w-5" /> </button>
                        </div>
                        <form ref={formRef} onSubmit={handleAddFacultySubmit} className="p-5 space-y-4 overflow-y-auto max-h-[70vh]">
                            <div> <label htmlFor="faculty-name" className={labelClass}>Full Name (Optional)</label> <input type="text" id="faculty-name" name="name" className={inputClass} placeholder="e.g., Dr. Juan Dela Cruz" disabled={isPending} /> </div>
                            <div> <label htmlFor="faculty-email" className={labelClass}>Email Address*</label> <input type="email" id="faculty-email" name="email" className={inputClass} placeholder="faculty@spcdavao.edu.ph" required disabled={isPending} /> </div>
                            <div> <label htmlFor="faculty-password" className={labelClass}>Initial Password*</label> <input type="password" id="faculty-password" name="password" className={inputClass} placeholder="Min. 8 characters" required minLength={8} disabled={isPending} /> <p className="text-xs text-gray-500 mt-1">Faculty member should change this upon first login.</p> </div>
                            {modalError && ( <div className="bg-red-50 border-l-4 border-red-400 text-red-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"> <ExclamationTriangleIcon className="h-5 w-5" /> {modalError} </div> )}
                            {modalSuccess && ( <div className="bg-green-50 border-l-4 border-green-400 text-green-700 p-3 rounded-md text-sm" role="alert"> {modalSuccess} </div> )}
                            <div className="flex justify-end gap-3 pt-5 border-t border-gray-200">
                                <button type="button" onClick={closeModal} disabled={isPending} className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50 transition-colors"> Cancel </button>
                                <button type="submit" disabled={isPending} className="inline-flex items-center justify-center rounded-lg bg-spc-blue-main px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-spc-blue-darker focus:outline-none focus:ring-2 focus:ring-spc-blue-light focus:ring-offset-2 disabled:opacity-60 transition-colors" > {isPending ? ( <><svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Adding...</> ) : ( <><PlusIcon className="h-4 w-4 mr-1.5" />Add Faculty</> )} </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\faculty\page.tsx ---

--- START FILE: src\app\(protected)\admin\matrix\page.tsx ---
// src/app/(protected)/admin/matrix/page.tsx
'use client';

import React, { useState, useEffect, useMemo, useTransition } from 'react';
import { getFacultySpecializationData, generateMatrixCsv } from '@/lib/actions/dashboardActions';
import { getCourses } from '@/lib/courseActions';
import { TableCellsIcon, ExclamationTriangleIcon, UserCircleIcon, FunnelIcon, ArrowDownTrayIcon, BookOpenIcon, CheckIcon, XMarkIcon } from '@heroicons/react/24/outline';
import FacultyMatrixDetailPopup from '@/components/admin/FacultyMatrixDetailPopup';
import type { FacultyLinkedSpecialization } from '@/types';
import type { Course, Specialization } from '@/generated/prisma/client';

export default function AdminMatrixPage() {
    // --- State Declarations ---
    const [matrixData, setMatrixData] = useState<FacultyLinkedSpecialization[]>([]);
    const [allSpecializations, setAllSpecializations] = useState<string[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPopupOpen, setIsPopupOpen] = useState(false);
    const [selectedFaculty, setSelectedFaculty] = useState<FacultyLinkedSpecialization | null>(null);
    const [selectedFilterSpecializations, setSelectedFilterSpecializations] = useState<Set<string>>(new Set());
    const [isDownloading, startDownloadTransition] = useTransition();
    const [downloadError, setDownloadError] = useState<string | null>(null);
    const [allCourses, setAllCourses] = useState<(Course & { requiredSpecializations: Pick<Specialization, 'id' | 'name'>[] })[]>([]);
    const [selectedCourseIdForCheck, setSelectedCourseIdForCheck] = useState<string>('');
    const [isLoadingCourses, setIsLoadingCourses] = useState(true);

    useEffect(() => {
        setIsLoading(true);
        setIsLoadingCourses(true);
        setError(null);
        setDownloadError(null);

        Promise.all([
            getFacultySpecializationData(),
            getCourses()
        ]).then(([matrixResponse, coursesResponse]) => {
            if (matrixResponse.success && matrixResponse.data && matrixResponse.allSpecializationNames) {
                setMatrixData(matrixResponse.data);
                setAllSpecializations(matrixResponse.allSpecializationNames);
            } else {
                setError(prev => prev ? `${prev}\n${matrixResponse.error || 'Failed to load matrix data.'}` : (matrixResponse.error || 'Failed to load matrix data.'));
                setMatrixData([]);
                setAllSpecializations([]);
            }
            if (coursesResponse.success && coursesResponse.courses) {
                const processedCourses = coursesResponse.courses.map(course => ({
                    ...course,
                    requiredSpecializations: course.requiredSpecializations || [],
                }));
                setAllCourses(processedCourses);
            } else {
                setError(prev => prev ? `${prev}\n${coursesResponse.error || 'Failed to load courses.'}` : (coursesResponse.error || 'Failed to load courses.'));
                setAllCourses([]);
            }
        }).catch(err => {
            console.error("Error fetching page data:", err);
            setError('An unexpected error occurred while loading page data.');
        }).finally(() => {
            setIsLoading(false);
            setIsLoadingCourses(false);
        });
    }, []);

    const filteredMatrixData = useMemo(() => {
        if (selectedFilterSpecializations.size === 0) return matrixData;
        return matrixData.filter(faculty =>
            Array.from(selectedFilterSpecializations).every(selSpec =>
                faculty.linkedSpecializationNames.includes(selSpec)
            )
        );
    }, [matrixData, selectedFilterSpecializations]);

    const handleFilterChange = (specializationName: string, isChecked: boolean) => {
        setSelectedFilterSpecializations(prevSelected => {
            const newSelected = new Set(prevSelected);
            if (isChecked) newSelected.add(specializationName);
            else newSelected.delete(specializationName);
            return newSelected;
        });
    };

    const handleFacultyClick = (faculty: FacultyLinkedSpecialization) => {
        setSelectedFaculty(faculty);
        setIsPopupOpen(true);
    };
    const handleClosePopup = () => {
        setIsPopupOpen(false);
        setSelectedFaculty(null);
    };

    const handleDownloadCsv = () => {
        setDownloadError(null);
        startDownloadTransition(async () => {
            try {
                const result = await generateMatrixCsv();
                if (result.success && result.csvData) {
                    const blob = new Blob([result.csvData], { type: 'text/csv;charset=utf-8;' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.setAttribute('href', url);
                    link.setAttribute('download', 'faculty_specialization_matrix.csv');
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                } else {
                    setDownloadError(result.error || 'Failed to generate CSV data.');
                }
            } catch (err: any) {
                setDownloadError('An unexpected error occurred during download.');
            }
        });
    };

    const selectedCourseDetails = useMemo(() => {
        if (!selectedCourseIdForCheck) return null;
        return allCourses.find(course => course.id === selectedCourseIdForCheck);
    }, [selectedCourseIdForCheck, allCourses]);

    const requiredSpecsForSelectedCourse = useMemo(() => {
        if (!selectedCourseDetails || !selectedCourseDetails.requiredSpecializations) return new Set<string>();
        return new Set(selectedCourseDetails.requiredSpecializations.map(spec => spec.name));
    }, [selectedCourseDetails]);

    if (isLoading) {
        return (
            <div className="p-6 bg-spc-blue-lighter min-h-screen flex items-center justify-center">
                <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading specialization matrix...</span>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-6 bg-red-50 min-h-screen">
                <div className="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow border border-red-200">
                    <div className="flex items-center gap-3 text-red-700 mb-4">
                        <ExclamationTriangleIcon className="h-6 w-6" />
                        <h2 className="text-xl font-semibold">Error Loading Matrix</h2>
                    </div>
                    <p className="text-red-600 mb-6">{error}</p>
                </div>
            </div>
        );
    }

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen relative">
            <div className="mb-6 md:flex md:items-center md:justify-between gap-4 flex-wrap">
                <h1 className="text-2xl font-semibold text-gray-800 flex items-center gap-2 mb-4 md:mb-0 flex-shrink-0">
                    <TableCellsIcon className="h-7 w-7 text-purple-600" />
                    Faculty Specialization Matrix
                </h1>
                <div className="flex items-center gap-x-4 gap-y-2 flex-wrap">
                    <div className="flex items-center gap-2">
                        <label htmlFor="courseCheckFilter" className="text-sm font-medium text-gray-700 flex-shrink-0 flex items-center gap-1">
                            <BookOpenIcon className="h-4 w-4 text-gray-500" />
                            Check Suitability for Course:
                        </label>
                        <select
                            id="courseCheckFilter"
                            name="courseCheckFilter"
                            value={selectedCourseIdForCheck}
                            onChange={(e) => setSelectedCourseIdForCheck(e.target.value)}
                            disabled={isLoadingCourses || allCourses.length === 0}
                            className="block w-full md:w-auto rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm py-1.5 pl-3 pr-8"
                        >
                            <option value="">-- Select a Course --</option>
                            {allCourses.map(course => (
                                <option key={course.id} value={course.id}>
                                    {course.name} {course.code && `(${course.code})`}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div className="flex items-start gap-2">
                        <label className="text-sm font-medium text-gray-700 flex-shrink-0 flex items-center gap-1 pt-1">
                            <FunnelIcon className="h-4 w-4 text-gray-500" />
                            Filter:
                        </label>
                        <div className="flex flex-wrap gap-x-3 gap-y-1.5 max-w-md">
                            {allSpecializations.length > 0 ? (
                                allSpecializations.map(specName => (
                                    <div key={specName} className="flex items-center">
                                        <input
                                            id={`filter-${specName}`}
                                            type="checkbox"
                                            checked={selectedFilterSpecializations.has(specName)}
                                            onChange={(e) => handleFilterChange(specName, e.target.checked)}
                                            className="h-3.5 w-3.5 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                                        />
                                        <label htmlFor={`filter-${specName}`} className="ml-1.5 text-xs text-gray-700">
                                            {specName}
                                        </label>
                                    </div>
                                ))
                            ) : (
                                <span className="text-xs text-gray-500 italic">No specializations to filter by.</span>
                            )}
                        </div>
                    </div>
                    <button
                        onClick={handleDownloadCsv}
                        disabled={isDownloading || isLoading}
                        className="inline-flex items-center gap-1.5 rounded-md bg-green-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed"
                    >
                        {isDownloading ? (
                            <><svg className="animate-spin -ml-0.5 mr-1.5 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> Downloading...</>
                        ) : (
                            <><ArrowDownTrayIcon className="h-4 w-4" />Download CSV</>
                        )}
                    </button>
                </div>
            </div>
            {downloadError && (
                <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded relative flex items-center gap-2 text-sm" role="alert">
                    <ExclamationTriangleIcon className="h-4 w-4 text-red-500" />
                    <span className="block sm:inline">Error downloading CSV: {downloadError}</span>
                </div>
            )}
            {filteredMatrixData.length === 0 && !isLoading ? (
                <p className="text-gray-500 italic text-center mt-10 py-5 bg-white rounded-md shadow-sm border border-gray-200">
                    {selectedFilterSpecializations.size > 0
                        ? `No faculty found matching all selected specializations: "${Array.from(selectedFilterSpecializations).join(' & ')}".`
                        : 'No faculty data found or no filters applied.'}
                </p>
            ) : (
                <div className="overflow-x-auto bg-white shadow-xl rounded-lg border border-gray-300">
                    <table className="min-w-full">
                        <thead className="sticky top-0 z-10">
                            <tr>
                                <th scope="col" className="px-4 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider sticky left-0 bg-spc-blue-darker z-20 border-r border-white/20">
                                    Faculty Name ({filteredMatrixData.length})
                                </th>
                                {allSpecializations.map((spec, index) => (
                                    <th key={spec} scope="col" 
                                        className={`px-3 py-3 text-center text-xs font-semibold text-white bg-spc-blue-darker uppercase tracking-wider whitespace-nowrap 
                                                   ${index < allSpecializations.length - 1 ? 'border-r border-white/20' : ''}`}>
                                        {spec}
                                    </th>
                                ))}
                            </tr>
                        </thead>
                        <tbody className="bg-white">
                            {filteredMatrixData.map((faculty, facultyIndex) => {
                                const linkedSpecsSet = new Set(faculty.linkedSpecializationNames);
                                return (
                                    <tr key={faculty.userId} 
                                        className={`hover:bg-sky-50 transition-colors duration-150 ease-in-out ${facultyIndex < filteredMatrixData.length -1 ? 'border-b border-gray-300' : ''}`}>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-800 sticky left-0 bg-white hover:bg-sky-50 z-10 border-r border-gray-300">
                                            <button
                                                type="button"
                                                onClick={() => handleFacultyClick(faculty)}
                                                className="flex items-center gap-2 group text-left w-full focus:outline-none focus:ring-1 focus:ring-indigo-400 focus:ring-offset-1 rounded"
                                                title={`View details for ${faculty.name || 'Unnamed Faculty'}`}
                                            >
                                                <UserCircleIcon className="h-5 w-5 text-gray-400 group-hover:text-indigo-600 flex-shrink-0" />
                                                <div>
                                                    <span className="group-hover:text-indigo-600 group-hover:font-semibold">{faculty.name || 'Unnamed Faculty'}</span>
                                                    <div className="text-xs text-gray-500">{faculty.email || 'No Email'}</div>
                                                </div>
                                            </button>
                                        </td>
                                        {allSpecializations.map((specName, specIndex) => (
                                            <td key={`${faculty.userId}-${specName}`} 
                                                className={`px-3 py-3 text-center ${specIndex < allSpecializations.length - 1 ? 'border-r border-gray-300' : ''}`}>
                                                {(() => {
                                                    const facultyHasThisSpec = linkedSpecsSet.has(specName);
                                                    // --- ICON SIZE AND COLOR ADJUSTMENTS ---
                                                    const iconSize = "h-6 w-6"; // Increased size
                                                    const greenColor = "text-green-500"; // Standard green
                                                    const redColor = "text-red-500";     // Standard red
                                                    const grayColor = "text-gray-400";   // Lighter gray for less emphasis

                                                    if (selectedCourseIdForCheck && requiredSpecsForSelectedCourse.size > 0) {
                                                        if (requiredSpecsForSelectedCourse.has(specName)) {
                                                            return facultyHasThisSpec ?
                                                                <CheckIcon className={`${iconSize} ${greenColor} mx-auto font-bold`} title={`${faculty.name} has required specialization: ${specName}`} /> : // Added font-bold for CheckIcon
                                                                <XMarkIcon className={`${iconSize} ${redColor} mx-auto font-bold`} title={`${faculty.name} is missing required specialization: ${specName}`} />; // Added font-bold for XMarkIcon
                                                        } else {
                                                            return facultyHasThisSpec ? <CheckIcon className={`${iconSize} ${grayColor} mx-auto`} title={`${faculty.name} has specialization: ${specName} (not required for selected course)`} /> : <span className="text-gray-300 text-lg">-</span>; // Made dash larger
                                                        }
                                                    } else {
                                                        return facultyHasThisSpec ? <CheckIcon className={`${iconSize} ${greenColor} mx-auto font-bold`} title={`${faculty.name} has specialization: ${specName}`} /> : <span className="text-gray-300 text-lg">-</span>; // Made dash larger
                                                    }
                                                })()}
                                            </td>
                                        ))}
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            )}
            {isPopupOpen && selectedFaculty && (
                <FacultyMatrixDetailPopup
                    faculty={selectedFaculty}
                    onClose={handleClosePopup}
                    selectedCourseForCheck={selectedCourseDetails}
                />
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\matrix\page.tsx ---

--- START FILE: src\app\(protected)\admin\specializations\page.tsx ---
// src/app/(protected)/admin/specializations/page.tsx
'use client';

import React, { useState, useEffect, useMemo, useTransition, FormEvent, useRef } from 'react';
import { getSpecializations, createSpecialization, updateSpecialization, deleteSpecialization } from '@/lib/actions/specializationActions';
import {
    TagIcon, PlusIcon, ExclamationTriangleIcon, XMarkIcon, PencilIcon, TrashIcon, CheckCircleIcon,
    MagnifyingGlassIcon // Added for Search
} from '@heroicons/react/24/outline';
import type { Specialization } from '@/generated/prisma';

export default function AdminSpecializationsPage() {
    const [specializations, setSpecializations] = useState<Specialization[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition();
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [addModalError, setAddModalError] = useState<string | null>(null);
    const [addModalSuccess, setAddModalSuccess] = useState<string | null>(null);
    const addFormRef = useRef<HTMLFormElement>(null);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [editModalError, setEditModalError] = useState<string | null>(null);
    const [editModalSuccess, setEditModalSuccess] = useState<string | null>(null);
    const [editingSpecialization, setEditingSpecialization] = useState<Specialization | null>(null);
    const editFormRef = useRef<HTMLFormElement>(null);
    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
    const [deleteModalError, setDeleteModalError] = useState<string | null>(null);
    const [deletingSpecialization, setDeletingSpecialization] = useState<Specialization | null>(null);

    // --- State for Search Functionality ---
    const [searchTerm, setSearchTerm] = useState('');

    const fetchSpecializations = () => {
        if (!isPending) setIsLoading(true);
        setError(null); setAddModalError(null); setAddModalSuccess(null);
        setEditModalError(null); setEditModalSuccess(null); setDeleteModalError(null);

        getSpecializations()
            .then(response => {
                if (response.success && response.specializations) setSpecializations(response.specializations);
                else { setError(response.error || 'Failed to load specializations.'); setSpecializations([]); }
            })
            .catch(() => { setError('An unexpected error occurred.'); setSpecializations([]); })
            .finally(() => { if (!isPending) setIsLoading(false); });
    };

    useEffect(() => { fetchSpecializations(); }, []);

    const openAddModal = () => { setAddModalError(null); setAddModalSuccess(null); addFormRef.current?.reset(); setIsAddModalOpen(true); };
    const closeAddModal = () => { if (isPending) return; setIsAddModalOpen(false); setAddModalError(null); setAddModalSuccess(null); };
    const handleCreateSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setAddModalError(null); setAddModalSuccess(null);
        const formData = new FormData(event.currentTarget);
        const specName = formData.get('name') as string;
        startTransition(async () => {
            setIsLoading(true);
            const result = await createSpecialization(formData);
            if (result.success) {
                setAddModalSuccess(`Specialization "${specName}" created successfully!`);
                addFormRef.current?.reset(); fetchSpecializations();
            } else {
                setAddModalError(result.error || 'Failed to create specialization.'); setIsLoading(false);
            }
        });
    };

    const openEditModal = (spec: Specialization) => { setEditingSpecialization(spec); setEditModalError(null); setEditModalSuccess(null); setIsEditModalOpen(true); };
    const closeEditModal = () => { if (isPending) return; setIsEditModalOpen(false); setEditingSpecialization(null); setEditModalError(null); setEditModalSuccess(null); };
    const handleUpdateSubmit = async (event: FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!editingSpecialization) return;
        setEditModalError(null); setEditModalSuccess(null);
        const formData = new FormData(event.currentTarget);
        formData.append('id', editingSpecialization.id);
        const specName = formData.get('name') as string;
        startTransition(async () => {
            setIsLoading(true);
            const result = await updateSpecialization(formData);
            if (result.success) {
                setEditModalSuccess(`Specialization "${specName}" updated successfully!`);
                fetchSpecializations();
                setTimeout(() => closeEditModal(), 1500);
            } else {
                setEditModalError(result.error || 'Failed to update specialization.'); setIsLoading(false);
            }
        });
    };

    const openDeleteModal = (spec: Specialization) => { setDeletingSpecialization(spec); setDeleteModalError(null); setIsDeleteModalOpen(true); };
    const closeDeleteModal = () => { if (isPending) return; setIsDeleteModalOpen(false); setDeletingSpecialization(null); setDeleteModalError(null); };
    const handleDeleteConfirm = async () => {
        if (!deletingSpecialization) return;
        setDeleteModalError(null);
        startTransition(async () => {
            setIsLoading(true);
            const result = await deleteSpecialization(deletingSpecialization.id);
            if (result.success) {
                // setAddModalSuccess might be a good place for a generic success message after delete
                // For now, just refetching and closing.
                setAddModalSuccess('Specialization deleted successfully!'); // Using addModalSuccess for general page success message
                closeDeleteModal();
                fetchSpecializations();
            } else {
                setDeleteModalError(result.error || 'Failed to delete specialization.');
                setIsLoading(false);
                // Don't close delete modal on error, so user can see the error.
            }
        });
    };

    // --- Filtered Specializations List based on Search Term ---
    const filteredSpecializations = useMemo(() => {
        if (!searchTerm.trim()) {
            return specializations;
        }
        const lowercasedSearchTerm = searchTerm.toLowerCase();
        return specializations.filter(spec =>
            (spec.name.toLowerCase().includes(lowercasedSearchTerm)) ||
            (spec.description?.toLowerCase().includes(lowercasedSearchTerm)) // Also search in description
        );
    }, [specializations, searchTerm]);

    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(event.target.value);
    };

    const inputClass = "block w-full rounded-lg border-gray-300 shadow-sm focus:border-spc-blue-main focus:ring-1 focus:ring-spc-blue-main sm:text-sm disabled:opacity-70 bg-white py-2.5 px-3.5";
    const labelClass = "block text-sm font-medium text-gray-700 mb-1.5";
    const modalButtonBase = "inline-flex items-center justify-center gap-2 rounded-lg px-4 py-2.5 text-sm font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-spc-blue-lighter disabled:opacity-60 transition-all duration-150 ease-in-out transform hover:scale-105";
    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-spc-blue-lighter min-h-screen">
            <div className="mb-8 space-y-4 sm:space-y-0 sm:flex sm:justify-between sm:items-center sm:gap-4">
                <h1 className="text-2xl sm:text-3xl font-bold text-spc-blue-darker flex items-center gap-3 flex-shrink-0">
                    <TagIcon className="h-8 w-8 text-spc-blue-main" />
                    Manage Specializations
                </h1>
                <div className="flex flex-col sm:flex-row sm:items-center gap-3 w-full sm:w-auto">
                    {/* Search Input */}
                    <div className="relative w-full sm:w-auto sm:flex-grow max-w-md">
                        <label htmlFor="specialization-search" className="sr-only">Search Specializations</label>
                        <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3.5">
                            <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                        </div>
                        <input
                            type="search"
                            name="specialization-search"
                            id="specialization-search"
                            value={searchTerm}
                            onChange={handleSearchChange}
                            className="block w-full rounded-lg border border-gray-300 bg-white py-2.5 pl-10 pr-3 text-sm placeholder-gray-400 shadow-sm focus:border-spc-blue-main focus:ring-1 focus:ring-spc-blue-main"
                            placeholder="Search by name or description..."
                        />
                    </div>
                    <button
                        onClick={openAddModal}
                        disabled={isPending}
                        className={`${modalButtonBase} bg-spc-blue-main text-white hover:bg-spc-blue-darker focus:ring-spc-blue-light w-full sm:w-auto flex-shrink-0`}
                    >
                        <PlusIcon className="h-5 w-5" />
                        Add Specialization
                    </button>
                </div>
            </div>

            {isLoading && (
                <div className="flex items-center justify-center py-10 gap-3 text-gray-500">
                    <svg className="animate-spin h-6 w-6 text-spc-blue-main" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
                    <span>{isPending ? 'Processing...' : 'Loading specializations...'}</span>
                </div>
            )}
            {error && !isLoading && (
                <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md shadow-md flex items-center gap-3 mb-6" role="alert">
                    <ExclamationTriangleIcon className="h-6 w-6 text-red-500 flex-shrink-0" />
                    <div> <p className="font-bold">Error</p> <p>{error}</p> </div>
                </div>
            )}
            {/* Unified success message area for Add/Edit/Delete success outside modals */}
            {/* Display addModalSuccess if it's set and no modals are open. This can serve as a general success message area. */}
            {(addModalSuccess && !isAddModalOpen && !isEditModalOpen && !isDeleteModalOpen) && (
                <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-3 rounded-md shadow-sm flex items-center gap-2 text-sm" role="alert">
                    <CheckCircleIcon className="h-5 w-5"/> {addModalSuccess}
                </div>
            )}
            {/* Display editModalSuccess if it's set and no modals are open */}
            {(editModalSuccess && !isAddModalOpen && !isEditModalOpen && !isDeleteModalOpen) && (
                <div className="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-3 rounded-md shadow-sm flex items-center gap-2 text-sm" role="alert">
                    <CheckCircleIcon className="h-5 w-5"/> {editModalSuccess}
                </div>
            )}

            {!isLoading && !error && (
                <div className="bg-white shadow-xl overflow-hidden rounded-xl border border-gray-200/80">
                    {filteredSpecializations.length === 0 ? (
                        <div className="p-10 text-center text-gray-500">
                             <TagIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                             <p className="text-xl font-semibold">
                                {searchTerm ? 'No specializations match your search.' : 'No specializations defined yet.'}
                            </p>
                             <p className="text-sm text-gray-400 mt-1">
                                {searchTerm ? 'Try a different search term.' : 'Click "Add Specialization" to create one.'}
                            </p>
                        </div>
                    ) : (
                        <ul role="list" className="divide-y divide-gray-200">
                            {filteredSpecializations.map((spec) => ( // Use filteredSpecializations
                                <li key={spec.id} className="px-5 py-4 sm:px-6 group hover:bg-sky-50/50 transition-colors duration-150">
                                    <div className="flex items-center justify-between gap-4">
                                        <div className="flex-1 min-w-0">
                                            {/* Highlighted Specialization Name */}
                                            <span className="inline-block bg-spc-blue-main text-white text-sm font-semibold px-3 py-1 rounded-md shadow group-hover:bg-spc-blue-darker transition-colors mb-1">
                                                {spec.name}
                                            </span>
                                            {spec.description && (
                                                <p className="mt-1 text-xs text-gray-500 group-hover:text-gray-600 leading-relaxed">
                                                    {spec.description}
                                                </p>
                                            )}
                                        </div>
                                        <div className="ml-4 flex-shrink-0 space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                            <button
                                                onClick={() => openEditModal(spec)}
                                                disabled={isPending}
                                                className="p-2 rounded-full text-spc-blue-main hover:bg-spc-blue-lighter focus:outline-none focus:ring-2 focus:ring-spc-blue-light focus:ring-offset-1 disabled:opacity-50 transition-colors"
                                                title={`Edit ${spec.name}`}
                                            >
                                                <PencilIcon className="h-4 w-4" />
                                            </button>
                                            <button
                                                onClick={() => openDeleteModal(spec)}
                                                disabled={isPending}
                                                className="p-2 rounded-full text-red-500 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-offset-1 disabled:opacity-50 transition-colors"
                                                title={`Delete ${spec.name}`}
                                            >
                                                <TrashIcon className="h-4 w-4" />
                                            </button>
                                        </div>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            )}

            {/* Common Modal Structure */}
            {(isAddModalOpen || isEditModalOpen || isDeleteModalOpen) && ( // Modals (Add/Edit/Delete structure)
                 <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-md p-4 animate-fade-in-scale">
                    <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg transform transition-all flex flex-col max-h-[90vh]">
                        {/* Add Modal Content */}
                        {isAddModalOpen && (
                            <>
                                <div className="flex justify-between items-center p-5 border-b border-gray-200">
                                    <h2 className="text-xl font-semibold text-spc-blue-darker flex items-center gap-2" id="add-modal-title"> <TagIcon className="h-6 w-6 text-spc-blue-main"/> Add New Specialization</h2>
                                    <button onClick={closeAddModal} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50" aria-label="Close modal"><XMarkIcon className="h-5 w-5" /></button>
                                </div>
                                <form ref={addFormRef} onSubmit={handleCreateSubmit} className="p-5 space-y-4 overflow-y-auto">
                                    <div> <label htmlFor="spec-name-add" className={labelClass}>Specialization Name*</label> <input type="text" id="spec-name-add" name="name" className={inputClass} required disabled={isPending} placeholder="e.g., Clinical Hematology"/> </div>
                                    <div> <label htmlFor="spec-description-add" className={labelClass}>Description (Optional)</label> <textarea id="spec-description-add" name="description" rows={3} className={inputClass} disabled={isPending} placeholder="Briefly describe the specialization..."></textarea> </div>
                                    {addModalError && <div className="bg-red-50 border-l-4 border-red-400 text-red-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><ExclamationTriangleIcon className="h-5 w-5" /> {addModalError}</div>}
                                    {addModalSuccess && <div className="bg-green-50 border-l-4 border-green-400 text-green-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><CheckCircleIcon className="h-5 w-5"/> {addModalSuccess}</div>}
                                    <div className="flex justify-end gap-3 pt-5 border-t border-gray-200">
                                        <button type="button" onClick={closeAddModal} disabled={isPending} className={`${modalButtonBase} bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300 focus:ring-gray-400`}>Cancel</button>
                                        <button type="submit" disabled={isPending} className={`${modalButtonBase} bg-spc-blue-main text-white hover:bg-spc-blue-darker focus:ring-spc-blue-light`}>{isPending ? 'Adding...' : <><PlusIcon className="h-4 w-4 mr-1"/>Add Specialization</>}</button>
                                    </div>
                                </form>
                            </>
                        )}
                        {/* Edit Modal Content */}
                        {isEditModalOpen && editingSpecialization && (
                            <>
                                <div className="flex justify-between items-center p-5 border-b border-gray-200"> {/* ... existing Edit Modal JSX ... */}
                                    <h2 className="text-xl font-semibold text-spc-blue-darker flex items-center gap-2" id="edit-modal-title"><PencilIcon className="h-6 w-6 text-spc-blue-main"/> Edit Specialization</h2>
                                    <button onClick={closeEditModal} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50" aria-label="Close modal"><XMarkIcon className="h-5 w-5" /></button>
                                </div>
                                <form ref={editFormRef} onSubmit={handleUpdateSubmit} className="p-5 space-y-4 overflow-y-auto">
                                    <div> <label htmlFor="spec-name-edit" className={labelClass}>Specialization Name*</label> <input type="text" id="spec-name-edit" name="name" defaultValue={editingSpecialization.name} className={inputClass} required disabled={isPending} /> </div>
                                    <div> <label htmlFor="spec-description-edit" className={labelClass}>Description (Optional)</label> <textarea id="spec-description-edit" name="description" rows={3} defaultValue={editingSpecialization.description || ''} className={inputClass} disabled={isPending}></textarea> </div>
                                    {editModalError && <div className="bg-red-50 border-l-4 border-red-400 text-red-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><ExclamationTriangleIcon className="h-5 w-5" /> {editModalError}</div>}
                                    {editModalSuccess && <div className="bg-green-50 border-l-4 border-green-400 text-green-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><CheckCircleIcon className="h-5 w-5"/> {editModalSuccess}</div>}
                                    <div className="flex justify-end gap-3 pt-5 border-t border-gray-200">
                                        <button type="button" onClick={closeEditModal} disabled={isPending} className={`${modalButtonBase} bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300 focus:ring-gray-400`}>Cancel</button>
                                        <button type="submit" disabled={isPending} className={`${modalButtonBase} bg-spc-blue-main text-white hover:bg-spc-blue-darker focus:ring-spc-blue-light`}>{isPending ? 'Saving...' : 'Save Changes'}</button>
                                    </div>
                                </form>
                            </>
                        )}
                        {/* Delete Modal Content */}
                        {isDeleteModalOpen && deletingSpecialization && (
                            <>
                                <div className="flex justify-between items-center p-5 border-b border-gray-200"> {/* ... existing Delete Modal JSX ... */}
                                    <h2 className="text-xl font-semibold text-red-700 flex items-center gap-2" id="delete-modal-title"><ExclamationTriangleIcon className="h-6 w-6"/> Confirm Deletion</h2>
                                    <button onClick={closeDeleteModal} disabled={isPending} className="p-1.5 rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 transition-colors focus:outline-none focus:ring-2 focus:ring-spc-blue-light disabled:opacity-50" aria-label="Close modal"><XMarkIcon className="h-5 w-5" /></button>
                                </div>
                                <div className="p-5 space-y-4">
                                    <p className="text-sm text-gray-700"> Are you sure you want to permanently delete the specialization: <br /> <strong className="text-spc-blue-darker text-md">{deletingSpecialization.name}</strong>? </p>
                                    <p className="text-xs text-red-600 bg-red-50 p-2.5 rounded-md border border-red-200"> This action cannot be undone. Faculty members currently linked to this specialization will be unlinked. </p>
                                    {deleteModalError && <div className="bg-red-50 border-l-4 border-red-400 text-red-700 p-3 rounded-md text-sm flex items-center gap-2" role="alert"><ExclamationTriangleIcon className="h-5 w-5" /> {deleteModalError}</div>}
                                </div>
                                <div className="flex justify-end gap-3 p-5 border-t border-gray-200 bg-gray-50/50 rounded-b-xl">
                                    <button type="button" onClick={closeDeleteModal} disabled={isPending} className={`${modalButtonBase} bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300 focus:ring-gray-400`}>Cancel</button>
                                    <button type="button" onClick={handleDeleteConfirm} disabled={isPending} className={`${modalButtonBase} bg-red-600 text-white hover:bg-red-700 focus:ring-red-500`}>{isPending ? 'Deleting...' : <><TrashIcon className="h-4 w-4 mr-1"/>Delete</>}</button>
                                </div>
                            </>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\specializations\page.tsx ---

--- START FILE: src\app\(protected)\layout.tsx ---
// src/app/(protected)/layout.tsx
import React from 'react';
import Header from '@/components/ui/Header';
import Footer from '@/components/ui/Footer';

// No font or globals.css imports here

export default function ProtectedLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">
        {children}
      </main>
      <Footer />
    </div>
  );
}
--- END FILE: src\app\(protected)\layout.tsx ---

--- START FILE: src\app\api\auth\[...nextauth]\route.ts ---
// src/app/api/auth/[...nextauth]/route.ts
import NextAuth, { type NextAuthOptions } from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { PrismaAdapter } from '@next-auth/prisma-adapter';
import bcrypt from 'bcrypt';
import prisma from '@/lib/prisma'; // Import the singleton Prisma Client instance

export const authOptions: NextAuthOptions = {
    // Configure Prisma Adapter
    adapter: PrismaAdapter(prisma),

    // Configure one or more authentication providers
    providers: [
        CredentialsProvider({
            // The name to display on the sign in form (e.g. "Sign in with...")
            name: 'Credentials',
            // `credentials` is used to generate a form on the sign in page.
            credentials: {
                email: { label: "Email", type: "email", placeholder: "jsmith@example.com" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials, req) {
                // Add logic here to look up the user from the credentials supplied
                if (!credentials?.email || !credentials?.password) {
                    console.error('Credentials missing');
                    return null; // Indicate failure: credentials not provided
                }

                try {
                    // Find the user in the database using the imported prisma instance
                    const user = await prisma.user.findUnique({
                        where: { email: credentials.email }
                    });

                    if (!user) {
                        console.error('No user found with email:', credentials.email);
                        // Optionally: throw new Error("No user found."); // Can provide feedback
                        return null; // User not found
                    }

                    // Validate the password using bcrypt.compare
                    const isValidPassword = await bcrypt.compare(
                        credentials.password, // Plain password from login form
                        user.password         // Hashed password from database
                    );

                    if (!isValidPassword) {
                        console.error('Invalid password for user:', credentials.email);
                        // Optionally: throw new Error("Invalid password."); // Can provide feedback
                        return null; // Password doesn't match
                    }

                    console.log('User authorized:', user.email);
                    // Return user object if credentials are valid
                    // This object must satisfy NextAuth's User type (at least 'id')
                    // Using 'as any' here simplifies typing for now.
                    return {
                        id: user.id,
                        name: user.name,
                        email: user.email,
                        role: user.role, // Include the role
                    } as any;

                } catch (error) {
                    console.error("Error during authorization:", error);
                    return null; // Return null on any unexpected error during authorization
                }
            }
        })
        // ...add more providers here (e.g., Google, GitHub)
    ],

    // Define how session is managed
    session: {
        strategy: "jwt", // Use JSON Web Tokens for session management
    },

    // Callbacks are asynchronous functions you can use to control what happens
    callbacks: {
        // Add user id and role to the JWT payload
        async jwt({ token, user }) {
            if (user) {
                // The 'user' object here comes from the 'authorize' function or DB lookup
                token.id = user.id;
                // Need type assertion because 'role' isn't part of default JWT token type
                token.role = (user as any).role;
            }
            return token;
        },
        // Add user id and role to the session object available client-side
        async session({ session, token }) {
            if (token && session.user) {
                 // Need type assertion to add custom properties to default Session['user']
                (session.user as any).id = token.id;
                (session.user as any).role = token.role;
            }
            return session;
        },
    },

    // Specify pages for login, error handling, etc.
    pages: {
        signIn: '/login', // Redirect users to /login if they need to sign in
        // error: '/auth/error', // Optional: Custom error page
    },

    // Secret for signing tokens (required) - loaded from .env.local
    secret: process.env.NEXTAUTH_SECRET,

    // Enable debug messages in development for easier troubleshooting
    debug: process.env.NODE_ENV === 'development',
};

// Export the NextAuth handler for GET and POST requests
const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
--- END FILE: src\app\api\auth\[...nextauth]\route.ts ---

--- START FILE: src\app\api\documents\route.ts ---
[EMPTY FILE]
--- END FILE: src\app\api\documents\route.ts ---

--- START FILE: src\app\api\faculty\route.ts ---
[EMPTY FILE]
--- END FILE: src\app\api\faculty\route.ts ---

--- START FILE: src\app\image-test\page.tsx ---
'use client'; // Required for potential state/hooks later if needed

import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

// Ensure you have a valid image file named dot.png
// located directly in your project's /public directory
const IMAGE_SRC = "/dot.png";
const IMAGE_WIDTH = 100; // Example width
const IMAGE_HEIGHT = 100; // Example height

export default function ImageTestPage() {

    return (
        <div className="p-10">
            <h1 className="text-2xl font-bold mb-6">Image Loading Test Page</h1>

            <p className="mb-4">
                This page attempts to load the image located at <code>{IMAGE_SRC}</code>
                (expected to be in the <code>/public</code> folder).
            </p>

            <hr className="my-6" />

            {/* Test Case 1: Standard next/image */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 1: Standard `next/image`</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Using default optimization. Should work if the file is valid and optimization is okay.
                </p>
                <div style={{ width: `${IMAGE_WIDTH}px`, height: `${IMAGE_HEIGHT}px`, position: 'relative', border: '1px dashed blue' }}>
                    <Image
                        src={IMAGE_SRC}
                        alt="Test Dot - Standard"
                        width={IMAGE_WIDTH}
                        height={IMAGE_HEIGHT}
                        style={{ border: '1px solid red' }} // Add visible border to image itself
                        // Add onError for more feedback
                        onError={(e) => console.error(`Standard Image Error for ${IMAGE_SRC}:`, e)}
                    />
                </div>
                 <p className="text-xs mt-2">Container size: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red. Container border: blue dashed.</p>
            </div>

            {/* Test Case 2: next/image with unoptimized={true} */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 2: `next/image` with `unoptimized`</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Bypasses optimization. Should work if the file exists but optimization fails.
                </p>
                 <div style={{ width: `${IMAGE_WIDTH}px`, height: `${IMAGE_HEIGHT}px`, position: 'relative', border: '1px dashed blue' }}>
                    <Image
                        src={IMAGE_SRC}
                        alt="Test Dot - Unoptimized"
                        width={IMAGE_WIDTH}
                        height={IMAGE_HEIGHT}
                        unoptimized={true} // Bypass optimization
                        style={{ border: '1px solid red' }}
                        onError={(e) => console.error(`Unoptimized Image Error for ${IMAGE_SRC}:`, e)}
                    />
                </div>
                <p className="text-xs mt-2">Container size: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red. Container border: blue dashed.</p>
            </div>

             {/* Test Case 3: Standard HTML <img> tag */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 3: Standard HTML `<img/>` tag</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Loads the image directly from the public folder, no Next.js processing. Should work if the file exists and the server serves static files correctly.
                </p>
                {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                    src={IMAGE_SRC}
                    alt="Test Dot - Standard img tag"
                    width={IMAGE_WIDTH}
                    height={IMAGE_HEIGHT}
                    style={{ border: '1px solid red' }}
                    onError={(e) => console.error(`Standard <img> Error for ${IMAGE_SRC}:`, e.currentTarget.src)} // Note: error handling is slightly different
                />
                 <p className="text-xs mt-2">Explicit width/height set: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red.</p>
            </div>

            <hr className="my-6" />

            <Link href="/login" className="text-blue-600 hover:underline">
                ← Back to Login
            </Link>
        </div>
    );
}
--- END FILE: src\app\image-test\page.tsx ---

--- START FILE: src\app\globals.css ---
/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    /* Using a very light gray from Tailwind's palette as a base background */
    /* You could also use a custom color like 'bg-spc-blue-lighter' if defined and desired */
    @apply bg-slate-100 text-slate-700 antialiased;
  }

  /* Optional: Style headings for consistency if needed, though Tailwind classes are often preferred */
  /* h1 { @apply text-3xl font-bold text-spc-blue-DEFAULT; } */
  /* h2 { @apply text-2xl font-semibold text-spc-blue-DEFAULT; } */
}

/* Custom scrollbar for a more modern feel (Webkit browsers) */
::-webkit-scrollbar {
  width: 8px; /* Width of the vertical scrollbar */
  height: 8px; /* Height of the horizontal scrollbar */
}
::-webkit-scrollbar-track {
  @apply bg-slate-200; /* Or bg-spc-blue-lighter/50 */
}
::-webkit-scrollbar-thumb {
  @apply bg-slate-400 rounded-full; /* Or bg-spc-blue-light/50 */
}
::-webkit-scrollbar-thumb:hover {
  @apply bg-slate-500; /* Or bg-spc-blue-DEFAULT */
}

/* Animation utility (already present, just confirming) */
@layer utilities {
  @keyframes fade-in-scale {
    0% {
      opacity: 0;
      transform: scale(0.95) translateY(10px);
      visibility: hidden; /* Initially hidden */
    }
    1%, 100% { /* Become visible right as animation starts and stay visible */
      visibility: visible;
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
  .animate-fade-in-scale {
    animation: fade-in-scale 0.4s ease-out forwards; /* Let's try 0.4s */
  }

  /* Animation delay utilities (REMOVED as they are no longer used for staggered card animations) */
  /*
  .animation-delay-100 { animation-delay: 0.1s; }
  .animation-delay-200 { animation-delay: 0.2s; }
  .animation-delay-300 { animation-delay: 0.3s; }
  .animation-delay-400 { animation-delay: 0.4s; }
  .animation-delay-500 { animation-delay: 0.5s; }
  */
  /* For animation-delay-[600ms], Tailwind JIT handles it, no need for a separate class here */
}
--- END FILE: src\app\globals.css ---

--- START FILE: src\app\layout.tsx ---
// src/app/layout.tsx
import "./globals.css"; // Ensure this is imported EARLY and ONLY HERE
import type { Metadata } from "next";
import NextAuthProvider from "@/components/providers/NextAuthProvider";
import { Inter } from 'next/font/google'; // Import the Inter font

// Configure the Inter font
const inter = Inter({
  subsets: ['latin'], // Specify character subsets you need
  display: 'swap', // Use 'swap' for better perceived performance
  variable: '--font-inter', // Define a CSS variable for the font
});

export const metadata: Metadata = {
  title: "SMLS-SFMS",
  description: "Skills and Faculty Management System",
};

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode; }>) {
  return (
    // Apply the font variable to the html tag
    <html lang="en" suppressHydrationWarning={true}>
      <body className={`${inter.variable}`}> {/* The font variable will cascade down */}
         <NextAuthProvider>
           {children}
         </NextAuthProvider>
      </body>
    </html>
  );
}
--- END FILE: src\app\layout.tsx ---

--- START FILE: src\app\page.tsx ---
'use client'; // Needs to be a client component to use the hook

import React from 'react';
import { useSession, signIn, signOut } from 'next-auth/react';
import Link from 'next/link';

export default function HomePage() {
    const { data: session, status } = useSession();

    return (
        <div className="p-6">
            <h1 className="text-2xl font-semibold mb-4 text-[#003153]">Welcome to SMLS-SFMS!</h1>
            {status === 'loading' && (
                <p className="text-gray-500">Loading session...</p>
            )}
            {status === 'authenticated' && session?.user && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <p>Signed in as: <strong>{session.user.email}</strong></p>
                    <p>Role: <strong>{(session.user as any).role}</strong></p>
                    <button
                        onClick={() => signOut()}
                        className="mt-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded shadow"
                    >
                        Sign Out
                    </button>
                </div>
            )}
            {status === 'unauthenticated' && (
                 <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <p>You are not signed in.</p>
                    <Link href="/login" legacyBehavior>
                       <button
                          className="mt-2 px-4 py-2 bg-[#003153] hover:bg-[#002742] text-white rounded shadow"
                       >
                           Sign In
                       </button>
                    </Link>
                 </div>
            )}
            <p className="mt-4">This is the homepage content.</p>
        </div>
    );
}
--- END FILE: src\app\page.tsx ---

--- START FILE: src\components\admin\FacultyMatrixDetailPopup.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
// Updated imports: Added LightBulbIcon, CheckIcon is already there
import { ArrowTopRightOnSquareIcon, TagIcon, CheckIcon, LightBulbIcon, XMarkIcon, BookOpenIcon, CheckCircleIcon, ExclamationTriangleIcon, XCircleIcon } from '@heroicons/react/24/outline';
import type { FacultyLinkedSpecialization } from '@/types';
import type { Course, Specialization } from '@/generated/prisma/client'; // <-- ADD THIS IMPORT

// Define CourseMatchStrength type (can be imported from a shared types file if it exists there too)
type CourseMatchStrength = 'FULL_MATCH' | 'PARTIAL_MATCH' | 'NO_MATCH';

interface Props {
    faculty: FacultyLinkedSpecialization | null;
    onClose: () => void;
    selectedCourseForCheck?: (Course & { // Make it optional, as a course might not always be selected
        requiredSpecializations: Pick<Specialization, 'id' | 'name'>[];
    }) | null;
}

export default function FacultyMatrixDetailPopup({ faculty, onClose, selectedCourseForCheck }: Props) {
    if (!faculty) {
        return null; // Return null if no faculty data is provided
    }

    // Ensure linkedSpecializationNames is always an array, sort it
    const specializations = faculty.linkedSpecializationNames?.sort() || [];

    // --- NEW: Calculate match strength for the selected course ---
    let courseSuitability: {
        strength: CourseMatchStrength;
        possessedReqSpecs: string[];
        missingReqSpecs: string[];
    } | null = null;

    if (selectedCourseForCheck && selectedCourseForCheck.requiredSpecializations) {
        const facultySpecNamesSet = new Set(faculty.linkedSpecializationNames || []);
        const courseReqSpecNames = selectedCourseForCheck.requiredSpecializations.map(s => s.name);
        
        let possessedCount = 0;
        const possessedSpecs: string[] = [];
        const missingSpecs: string[] = [];

        if (courseReqSpecNames.length === 0) { // Course has no specific requirements
            courseSuitability = { strength: 'FULL_MATCH', possessedReqSpecs: [], missingReqSpecs: [] };
        } else {
            courseReqSpecNames.forEach(reqSpecName => {
                if (facultySpecNamesSet.has(reqSpecName)) {
                    possessedCount++;
                    possessedSpecs.push(reqSpecName);
                } else {
                    missingSpecs.push(reqSpecName);
                }
            });

            if (possessedCount === courseReqSpecNames.length) {
                courseSuitability = { strength: 'FULL_MATCH', possessedReqSpecs: possessedSpecs, missingReqSpecs: missingSpecs };
            } else if (possessedCount > 0) {
                courseSuitability = { strength: 'PARTIAL_MATCH', possessedReqSpecs: possessedSpecs, missingReqSpecs: missingSpecs };
            } else {
                courseSuitability = { strength: 'NO_MATCH', possessedReqSpecs: possessedSpecs, missingReqSpecs: missingSpecs };
            }
        }
    }
    // --- END NEW LOGIC ---

    return (
        <div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm p-4 transition-opacity duration-300"
            aria-labelledby="faculty-detail-popup-title"
            role="dialog"
            aria-modal="true"
            onClick={onClose} // Close when clicking the backdrop
        >
            <div
                className="bg-white rounded-lg shadow-xl w-full max-w-lg relative transform transition-all duration-300 scale-95 opacity-0 animate-fade-in-scale flex flex-col max-h-[90vh]"
                onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside the modal
            >
                {/* Header */}
                <div className="flex justify-between items-center p-4 border-b border-gray-200 flex-shrink-0">
                    <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2" id="faculty-detail-popup-title">
                        {/* Using TagIcon for general faculty info */}
                        <TagIcon className="h-5 w-5 text-indigo-600"/>
                        {faculty.name || 'Unnamed Faculty'} - Details
                    </h3>
                    <button
                        onClick={onClose}
                        className="p-1 rounded-full text-gray-400 hover:bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-1"
                        aria-label="Close detail view"
                    >
                        {/* Using XMarkIcon for close button */}
                        <XMarkIcon className="h-6 w-6" />
                    </button>
                </div>

                {/* Scrollable Content Area */}
                <div className="p-5 overflow-y-auto flex-grow space-y-5"> {/* Added space-y-5 */}
                    {/* Basic Info */}
                    <div>
                        <p className="text-sm text-gray-600">
                            <span className="font-medium text-gray-700">Email:</span> {faculty.email || 'N/A'}
                        </p>
                        {/* Add other basic info if needed */}
                    </div>

                    {/* Linked Specializations / Suggested Areas Section */}
                    <div>
                        {/* Made title slightly more prominent and changed icon/color for emphasis */}
                        <h4 className="text-md font-semibold text-indigo-700 mb-2.5 border-b border-indigo-100 pb-1.5 flex items-center gap-2">
                            <LightBulbIcon className="h-5 w-5 text-yellow-600" />
                            Expertise / Suggested Teaching Areas ({specializations.length})
                        </h4>
                        {specializations.length === 0 ? (
                            <p className="italic text-gray-500 text-sm">No specializations linked.</p>
                        ) : (
                            <ul className="space-y-1.5 pl-1">
                                {specializations.map((specName, index) => (
                                    <li key={`${faculty.userId}-spec-${index}`} className="flex items-center gap-2 text-sm text-gray-800">
                                        {/* Using CheckIcon to indicate linkage */}
                                        <CheckIcon className="h-4 w-4 text-green-500 flex-shrink-0"/>
                                        <span>{specName}</span>
                                    </li>
                                ))}
                            </ul>
                        )}
                         {/* Added a more direct note for admins */}
                         <p className="text-xs text-gray-500 mt-3 pt-2 border-t border-gray-100">
                            Consider these areas when assigning teaching loads or responsibilities.
                         </p>
                    </div>

                    {/* --- NEW: Course Specific Suitability Section --- */}
                    {selectedCourseForCheck && courseSuitability && (
                        <div className="mt-4 pt-4 border-t border-gray-200">
                            <h4 className="text-md font-semibold text-gray-700 mb-2 flex items-center gap-2">
                                <BookOpenIcon className="h-5 w-5 text-gray-500" />
                                Suitability for: <span className="text-blue-600">{selectedCourseForCheck.name}</span>
                            </h4>
                            <div className="text-sm space-y-1">
                                {courseSuitability.strength === 'FULL_MATCH' && (
                                    <p className="flex items-center gap-1 text-green-700">
                                        <CheckCircleIcon className="h-5 w-5 text-green-500" />
                                        <strong>Full Match:</strong> Meets all required specializations.
                                    </p>
                                )}
                                {courseSuitability.strength === 'PARTIAL_MATCH' && (
                                    <p className="flex items-center gap-1 text-yellow-700">
                                        <ExclamationTriangleIcon className="h-5 w-5 text-yellow-500" />
                                        <strong>Partial Match:</strong> Meets some required specializations.
                                    </p>
                                )}
                                {courseSuitability.strength === 'NO_MATCH' && (
                                    <p className="flex items-center gap-1 text-red-700">
                                        <XCircleIcon className="h-5 w-5 text-red-500" />
                                        <strong>No Direct Match:</strong> Does not meet primary specializations for this course.
                                    </p>
                                )}

                                {/* Optionally list possessed and missing specializations for the selected course */}
                                {courseSuitability.possessedReqSpecs.length > 0 && (
                                    <p className="text-xs text-gray-600 pl-6">
                                        <span className="font-medium text-green-600">Possesses:</span> {courseSuitability.possessedReqSpecs.join(', ')}
                                    </p>
                                )}
                                {courseSuitability.missingReqSpecs.length > 0 && (
                                    <p className="text-xs text-gray-600 pl-6">
                                        <span className="font-medium text-red-600">Lacks:</span> {courseSuitability.missingReqSpecs.join(', ')}
                                    </p>
                                )}
                            </div>
                        </div>
                    )}
                    {/* --- END NEW Section --- */}
                </div>

                 {/* Footer with Profile Link */}
                 <div className="p-4 border-t border-gray-200 bg-gray-50 text-right flex-shrink-0">
                    <Link
                        href={`/admin/faculty/${faculty.userId}`}
                        className="inline-flex items-center gap-1 text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline"
                        // Open profile in new tab
                        target="_blank"
                        rel="noopener noreferrer"
                        legacyBehavior>
                        View Full Profile
                        <ArrowTopRightOnSquareIcon className="h-4 w-4" />
                    </Link>
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\admin\FacultyMatrixDetailPopup.tsx ---

--- START FILE: src\components\profile\AcademicQualificationDisplay.tsx ---
// src/components/profile/AcademicQualificationDisplay.tsx
import React from 'react';
import type { AcademicQualification } from '@/generated/prisma';
// Import the new StatusDisplay component
import StatusDisplay from './StatusDisplay';
// Import necessary icons (adjust as needed)
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon } from '@heroicons/react/24/outline';

interface Props {
    item: AcademicQualification;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function AcademicQualificationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure from the template
        <div className="flex flex-col gap-2"> {/* Reduced gap slightly */}
            {/* Degree Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight"> {/* Adjusted size */}
                {item.degree || 'N/A'}
            </h3>
            {/* Institution */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold"> {/* Adjusted size/gap */}
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-blue-50 text-blue-600 flex-shrink-0"> {/* Adjusted size */}
                    {/* Use a relevant icon */}
                    <BuildingLibraryIcon className="h-4 w-4" />
                </div>
                <span>{item.institution || 'N/A'}{item.program ? ` - ${item.program}` : ''}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2"> {/* Added gap/margin */}

                {/* Completion Year */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium"> {/* Adjusted size/gap */}
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Completed: {item.yearCompleted || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.diplomaFileUrl ? (
                     <a
                        href={item.diplomaFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200" // Adjusted size/padding
                        title={item.diplomaFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" /> {/* Changed icon */}
                       <span>View Document</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No document</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0"> {/* Ensure status is right-aligned */}
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\AcademicQualificationDisplay.tsx ---

--- START FILE: src\components\profile\AcademicQualificationForm.tsx ---
// src/components/profile/AcademicQualificationForm.tsx
import React, { ChangeEvent } from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempAcademicQualification } from '@/types';

interface Props {
    item: TempAcademicQualification;
    isPending: boolean;
    handleInputChange: (fieldName: keyof TempAcademicQualification, value: string | number) => void; // Simplified signature if bound in parent
    // *** CHANGE THIS LINE ***
    handleFileChange: (file: File | null | undefined) => void; // Expects only the file
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function AcademicQualificationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempAcademicQualification, value: string | number) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
             <p className="text-xs font-semibold text-blue-700"> {isNewItem ? 'New Qualification' : 'Editing Qualification'} </p>
             {/* Degree Input */}
             <div> <label htmlFor={`degree-${item.id}`} className={labelClass}>Degree*</label> <input type="text" id={`degree-${item.id}`} name="degree" value={item.degree || ''} onChange={(e) => onInputChange('degree', e.target.value)} className={inputClass} placeholder="e.g., Bachelor of Science" required disabled={isPending} /> </div>
             {/* Institution Input */}
             <div> <label htmlFor={`institution-${item.id}`} className={labelClass}>Institution*</label> <input type="text" id={`institution-${item.id}`} name="institution" value={item.institution || ''} onChange={(e) => onInputChange('institution', e.target.value)} className={inputClass} placeholder="e.g., San Pedro College" required disabled={isPending} /> </div>
             {/* Program Input */}
             <div> <label htmlFor={`program-${item.id}`} className={labelClass}>Program/Major*</label> <input type="text" id={`program-${item.id}`} name="program" value={item.program || ''} onChange={(e) => onInputChange('program', e.target.value)} className={inputClass} placeholder="e.g., Medical Laboratory Science" required disabled={isPending} /> </div>
             {/* Year Completed Input */}
             <div> <label htmlFor={`yearCompleted-${item.id}`} className={labelClass}>Year Completed*</label> <input type="number" id={`yearCompleted-${item.id}`} name="yearCompleted" value={item.yearCompleted || ''} onChange={(e) => onInputChange('yearCompleted', parseInt(e.target.value, 10) || '')} className={inputClass} placeholder="YYYY" required min="1900" max={new Date().getFullYear() + 5} disabled={isPending} /> </div>
             {/* File Input */}
             <div>
                <label htmlFor={`diplomaFile-${item.id}`} className={labelClass}> Upload Diploma/Transcript {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'} </label>
                {!isNewItem && item.diplomaFileUrl && !item._selectedFile && ( <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current: <a href={item.diplomaFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">{item.diplomaFileUrl.split('/').pop()}</a> </div> )}
                {/* *** CHANGE THIS LINE *** */}
                <input
                    type="file"
                    id={`diplomaFile-${item.id}`}
                    name="diplomaFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Only pass the file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                />
                {item._selectedFile && ( <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>×</button> </div> )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\AcademicQualificationForm.tsx ---

--- START FILE: src\components\profile\AwardRecognitionDisplay.tsx ---
// src/components/profile/AwardRecognitionDisplay.tsx
import React from 'react';
import type { AwardRecognition } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, StarIcon } from '@heroicons/react/24/outline'; // Added StarIcon

interface Props {
    item: AwardRecognition;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function AwardRecognitionDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Award Name Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.awardName || 'N/A'}
            </h3>
            {/* Awarding Body */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-indigo-50 text-indigo-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <StarIcon className="h-4 w-4" />
                </div>
                <span>{item.awardingBody || 'N/A'}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Year Received */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Received: {item.yearReceived || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.certificateUrl ? (
                     <a
                        href={item.certificateUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.certificateUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Certificate</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No certificate</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\AwardRecognitionDisplay.tsx ---

--- START FILE: src\components\profile\AwardRecognitionForm.tsx ---
// src/components/profile/AwardRecognitionForm.tsx
import React from 'react';
import type { TempAwardRecognition } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempAwardRecognition;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempAwardRecognition, value: string | number | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function AwardRecognitionForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempAwardRecognition, value: string | number | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Award/Recognition' : 'Editing Award/Recognition'}</p>

            {/* Award Name Input */}
            <div>
                <label htmlFor={`awardName-${item.id}`} className={labelClass}>Award/Recognition Name*</label>
                <input
                    type="text"
                    id={`awardName-${item.id}`}
                    name="awardName"
                    value={item.awardName || ''}
                    onChange={(e) => onInputChange('awardName', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Awarding Body Input */}
            <div>
                <label htmlFor={`awardingBody-${item.id}`} className={labelClass}>Awarding Body*</label>
                <input
                    type="text"
                    id={`awardingBody-${item.id}`}
                    name="awardingBody"
                    value={item.awardingBody || ''}
                    onChange={(e) => onInputChange('awardingBody', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., San Pedro College, PAMET"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Year Received Input */}
            <div>
                <label htmlFor={`yearReceived-${item.id}`} className={labelClass}>Year Received*</label>
                <input
                    type="number"
                    id={`yearReceived-${item.id}`}
                    name="yearReceived"
                    value={item.yearReceived || ''}
                    onChange={(e) => onInputChange('yearReceived', parseInt(e.target.value, 10) || null)} // Parse to number or null
                    className={inputClass}
                    placeholder="YYYY"
                    required
                    min="1900"
                    max={new Date().getFullYear() + 5} // Allow a bit into the future
                    disabled={isPending}
                />
            </div>

             {/* File Input */}
             <div>
                <label htmlFor={`certificateFile-${item.id}`} className={labelClass}>Upload Certificate/Proof (Optional)</label>
                 {!isNewItem && item.certificateUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.certificateUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.certificateUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`certificateFile-${item.id}`}
                    name="certificateFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\AwardRecognitionForm.tsx ---

--- START FILE: src\components\profile\CommunityInvolvementDisplay.tsx ---
// src/components/profile/CommunityInvolvementDisplay.tsx
import React from 'react';
import type { CommunityInvolvement } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, UserGroupIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added UserGroupIcon, MapPinIcon

interface Props {
    item: CommunityInvolvement;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function CommunityInvolvementDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Engagement Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.engagementTitle || 'N/A'}
            </h3>
            {/* Role */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-teal-50 text-teal-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <UserGroupIcon className="h-4 w-4" />
                </div>
                <span>Role: {item.role || 'N/A'}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Location/Date */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.locationDate || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\CommunityInvolvementDisplay.tsx ---

--- START FILE: src\components\profile\CommunityInvolvementForm.tsx ---
// src/components/profile/CommunityInvolvementForm.tsx
import React from 'react';
import type { TempCommunityInvolvement } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempCommunityInvolvement;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempCommunityInvolvement, value: string | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function CommunityInvolvementForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempCommunityInvolvement, value: string | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Community Involvement' : 'Editing Community Involvement'}</p>

            {/* Engagement Title Input */}
            <div>
                <label htmlFor={`engagementTitle-${item.id}`} className={labelClass}>Engagement Title*</label>
                <input
                    type="text"
                    id={`engagementTitle-${item.id}`}
                    name="engagementTitle"
                    value={item.engagementTitle || ''}
                    onChange={(e) => onInputChange('engagementTitle', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Medical Mission Barangay X"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Role Input */}
            <div>
                <label htmlFor={`role-${item.id}`} className={labelClass}>Role*</label>
                <input
                    type="text"
                    id={`role-${item.id}`}
                    name="role"
                    value={item.role || ''}
                    onChange={(e) => onInputChange('role', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Volunteer, Organizer"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Location/Date Input */}
            <div>
                <label htmlFor={`locationDate-${item.id}`} className={labelClass}>Location & Date*</label>
                <input
                    type="text"
                    id={`locationDate-${item.id}`}
                    name="locationDate"
                    value={item.locationDate || ''}
                    onChange={(e) => onInputChange('locationDate', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Barangay X / May 5, 2024"
                    required
                    disabled={isPending}
                />
            </div>

             {/* File Input */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., Certificate) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\CommunityInvolvementForm.tsx ---

--- START FILE: src\components\profile\ConferencePresentationDisplay.tsx ---
// src/components/profile/ConferencePresentationDisplay.tsx
import React from 'react';
import type { ConferencePresentation } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, PresentationChartBarIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added PresentationChartBarIcon, MapPinIcon

interface Props {
    item: ConferencePresentation;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ConferencePresentationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Paper Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.paperTitle || 'N/A'}
            </h3>
            {/* Event Name */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-purple-50 text-purple-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <PresentationChartBarIcon className="h-4 w-4" />
                </div>
                <span>Event: {item.eventName || 'N/A'}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date/Location */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.dateLocation || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof/Details</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ConferencePresentationDisplay.tsx ---

--- START FILE: src\components\profile\ConferencePresentationForm.tsx ---
// src/components/profile/ConferencePresentationForm.tsx
import React from 'react';
import type { TempConferencePresentation } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempConferencePresentation;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempConferencePresentation, value: string) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ConferencePresentationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempConferencePresentation, value: string) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Conference Presentation' : 'Editing Conference Presentation'}</p>

            {/* Paper Title Input */}
            <div>
                <label htmlFor={`paperTitle-${item.id}`} className={labelClass}>Paper/Presentation Title*</label>
                <input
                    type="text"
                    id={`paperTitle-${item.id}`}
                    name="paperTitle"
                    value={item.paperTitle || ''}
                    onChange={(e) => onInputChange('paperTitle', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Event Name Input */}
            <div>
                <label htmlFor={`eventName-${item.id}`} className={labelClass}>Conference/Event Name*</label>
                <input
                    type="text"
                    id={`eventName-${item.id}`}
                    name="eventName"
                    value={item.eventName || ''}
                    onChange={(e) => onInputChange('eventName', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date & Location Input */}
            <div>
                <label htmlFor={`dateLocation-${item.id}`} className={labelClass}>Date & Location*</label>
                <input
                    type="text"
                    id={`dateLocation-${item.id}`}
                    name="dateLocation"
                    value={item.dateLocation || ''}
                    onChange={(e) => onInputChange('dateLocation', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., June 2024 / Manila"
                    required
                    disabled={isPending}
                />
            </div>

            {/* File Input for Proof */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., Certificate, Program) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\ConferencePresentationForm.tsx ---

--- START FILE: src\components\profile\CvSection.tsx ---
// src/components/profile/CvSection.tsx
import React from 'react';
import { PlusIcon, PencilIcon, TrashIcon, CheckIcon, XMarkIcon, InformationCircleIcon } from '@heroicons/react/24/outline';
import type { EditableCvItem, TempCommon, CategoryKey } from '@/types';

// Import all your Display and Form components
import AcademicQualificationDisplay from './AcademicQualificationDisplay';
import AcademicQualificationForm from './AcademicQualificationForm';
import ProfessionalDevelopmentDisplay from './ProfessionalDevelopmentDisplay';
import ProfessionalDevelopmentForm from './ProfessionalDevelopmentForm';
import ProfessionalLicenseDisplay from './ProfessionalLicenseDisplay';
import ProfessionalLicenseForm from './ProfessionalLicenseForm';
import WorkExperienceDisplay from './WorkExperienceDisplay';
import WorkExperienceForm from './WorkExperienceForm';
import ProfessionalAffiliationDisplay from './ProfessionalAffiliationDisplay';
import ProfessionalAffiliationForm from './ProfessionalAffiliationForm';
import AwardRecognitionDisplay from './AwardRecognitionDisplay';
import AwardRecognitionForm from './AwardRecognitionForm';
import CommunityInvolvementDisplay from './CommunityInvolvementDisplay';
import CommunityInvolvementForm from './CommunityInvolvementForm';
import PublicationDisplay from './PublicationDisplay';
import PublicationForm from './PublicationForm';
import ConferencePresentationDisplay from './ConferencePresentationDisplay';
import ConferencePresentationForm from './ConferencePresentationForm';
// StatusDisplay is used within the individual Display components, so not directly here unless needed for a section-level status.

interface CvSectionProps<T extends EditableCvItem> {
    categoryKey: CategoryKey;
    title: string;
    Icon: React.ElementType;
    items: T[];
    isEditingPage: boolean; // Is the overall profile page in edit mode?
    editingItemId: string | null; // ID of the item currently being edited within this section or any other
    isPending: boolean; // Global pending state for save operations
    changedItemIds: Set<string>; // Set of item IDs that have pending changes

    onAddItem: () => void; // Handler to add a new item to this section
    onStartEditItem: (itemId: string) => void; // Handler to start editing an item
    onCancelEditItem: (itemId: string) => void; // Handler to cancel editing an item
    onSaveItemEdit: (itemId: string) => void; // Handler to confirm/save an item's edit (primarily to exit item edit mode)
    onDeleteItem: (itemId: string) => void; // Handler to delete an item

    // Handlers for input and file changes within an item's form
    onItemInputChange: (itemId: string, fieldName: keyof T, value: any) => void;
    onItemFileChange: (itemId: string, file: File | null | undefined) => void;
}

// Helper to get the correct Display or Form component based on categoryKey
// These need to match the structure of your actual display/form components
const componentMap: Record<CategoryKey, { Display: React.FC<any>; Form: React.FC<any> }> = {
    academicQualifications: { Display: AcademicQualificationDisplay, Form: AcademicQualificationForm },
    professionalLicenses: { Display: ProfessionalLicenseDisplay, Form: ProfessionalLicenseForm },
    workExperiences: { Display: WorkExperienceDisplay, Form: WorkExperienceForm },
    professionalAffiliations: { Display: ProfessionalAffiliationDisplay, Form: ProfessionalAffiliationForm },
    awardsRecognitions: { Display: AwardRecognitionDisplay, Form: AwardRecognitionForm },
    professionalDevelopments: { Display: ProfessionalDevelopmentDisplay, Form: ProfessionalDevelopmentForm },
    communityInvolvements: { Display: CommunityInvolvementDisplay, Form: CommunityInvolvementForm },
    publications: { Display: PublicationDisplay, Form: PublicationForm },
    conferencePresentations: { Display: ConferencePresentationDisplay, Form: ConferencePresentationForm },
};

// Button Styles (can be imported from a shared constants file if you create one)
const iconButtonBaseClasses = "p-1 rounded-full focus:outline-none focus:ring-1 focus:ring-offset-1 disabled:opacity-50";
const editIconButtonClasses = `${iconButtonBaseClasses} bg-blue-100 text-blue-600 hover:bg-blue-200 focus:ring-blue-400`;
const deleteIconButtonClasses = `${iconButtonBaseClasses} bg-red-100 text-red-600 hover:bg-red-200 focus:ring-red-400`;
const smallActionButtonBaseClasses = "inline-flex items-center justify-center gap-1 px-2 py-1 rounded text-xs font-medium focus:outline-none focus:ring-2 disabled:opacity-60";
const cancelItemEditButtonClasses = `${smallActionButtonBaseClasses} bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-gray-400`;
const saveItemButtonClasses = `${smallActionButtonBaseClasses} bg-blue-100 text-blue-700 hover:bg-blue-200 focus:ring-blue-400`;


export default function CvSection<T extends EditableCvItem>({
    categoryKey,
    title,
    Icon,
    items,
    isEditingPage,
    editingItemId,
    isPending,
    changedItemIds,
    onAddItem,
    onStartEditItem,
    onCancelEditItem,
    onSaveItemEdit,
    onDeleteItem,
    onItemInputChange,
    onItemFileChange,
}: CvSectionProps<T>) {
    const { Display: DisplayComponent, Form: FormComponent } = componentMap[categoryKey] ||
        {
            Display: ({ item }: { item: any }) => <div className="text-red-500">Display for {categoryKey} not found.</div>,
            Form: ({ item }: { item: any }) => <div className="text-red-500">Form for {categoryKey} not found.</div>
        };

    const isNewItem = (item: T): boolean => !!(item as TempCommon)._isNew;

    return (
        <div className="flex flex-col rounded-2xl bg-white shadow-lg overflow-hidden transition duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1">
            {/* Section Header */}
            <div className="flex items-center gap-4 p-5 sm:p-6 bg-spc-blue-darker text-white">
                <div className="flex items-center justify-center w-10 h-10 rounded-lg bg-white/20 flex-shrink-0">
                    <Icon className="h-5 w-5" aria-hidden="true" />
                </div>
                <h2 className="font-semibold text-md sm:text-lg flex-grow tracking-tight">
                    {title}
                </h2>
                {isEditingPage && (
                    <button
                        onClick={onAddItem}
                        className="ml-auto flex-shrink-0 rounded-full bg-white/25 p-1.5 text-white hover:bg-white/30 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-blue-600"
                        title={`Add New ${title.slice(0, -1)}`} // e.g., "Add New Academic Qualification"
                        disabled={editingItemId !== null || isPending} // Disable if any item is being edited globally or global save is pending
                    >
                        <PlusIcon className="h-4 w-4" />
                    </button>
                )}
            </div>

            {/* Section Body - List of Items */}
            <div className="flex-grow p-5 sm:p-6">
                {items.length === 0 ? (
                    <p className="italic text-gray-400 text-center py-4">
                        {isEditingPage ? `Click the '+' button to add your first ${title.toLowerCase().slice(0, -1)}.` : 'No items recorded.'}
                    </p>
                ) : (
                    <ul className="space-y-6">
                        {items.map((item) => {
                            const isThisItemActivelyEditing = isEditingPage && item.id === editingItemId;
                            const hasPendingChanges = isEditingPage && changedItemIds.has(item.id) && !isThisItemActivelyEditing;
                            const stagedFile = (item as any)._selectedFile instanceof File ? (item as any)._selectedFile : null;

                            const liClasses = [
                                'relative group transition-all duration-200 ease-in-out',
                                isThisItemActivelyEditing ? 'bg-blue-50 p-4 rounded-md border border-dashed border-blue-300 shadow-inner -m-4' : '',
                                hasPendingChanges ? 'bg-yellow-50 p-4 rounded-md border-l-4 border-yellow-400 shadow-sm -m-4' : '',
                                !isThisItemActivelyEditing && !hasPendingChanges ? 'pb-6 border-b border-gray-100 last:border-b-0 last:pb-0' : ''
                            ].filter(Boolean).join(' ');

                            return (
                                <li key={item.id} className={liClasses}>
                                    {isThisItemActivelyEditing ? (
                                        <>
                                            <FormComponent
                                                item={item}
                                                isPending={isPending} // Global pending state
                                                handleInputChange={(fieldName: keyof T, value: any) => onItemInputChange(item.id, fieldName, value)}
                                                handleFileChange={(file: File | null | undefined) => onItemFileChange(item.id, file)}
                                            />
                                            <div className='flex justify-end gap-2 mt-3'>
                                                <button onClick={() => onCancelEditItem(item.id)} disabled={isPending} className={cancelItemEditButtonClasses}>
                                                    <XMarkIcon className='h-3 w-3'/> Cancel Item Edit
                                                </button>
                                                <button onClick={() => onSaveItemEdit(item.id)} disabled={isPending} className={saveItemButtonClasses}>
                                                    <CheckIcon className='h-3 w-3'/> Done Editing Item
                                                </button>
                                            </div>
                                        </>
                                    ) : (
                                        <DisplayComponent item={item} isEditing={isEditingPage} stagedFile={stagedFile} />
                                    )}

                                    {/* Edit/Delete buttons for existing items when page is in edit mode but this specific item is not actively being edited */}
                                    {isEditingPage && !isThisItemActivelyEditing && (
                                        <div className="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                            {!isNewItem(item) && ( // Only show edit for non-new items not being edited
                                                <button
                                                    onClick={() => onStartEditItem(item.id)}
                                                    className={editIconButtonClasses}
                                                    title={`Edit this ${title.slice(0, -1)}`}
                                                    disabled={isPending || editingItemId !== null} // Disable if another item is being edited or global save
                                                >
                                                    <PencilIcon className="h-3.5 w-3.5" />
                                                </button>
                                            )}
                                            <button
                                                onClick={() => onDeleteItem(item.id)}
                                                className={deleteIconButtonClasses}
                                                title={`Delete this ${title.slice(0, -1)}`}
                                                disabled={isPending || editingItemId !== null} // Disable if another item is being edited or global save
                                            >
                                                <TrashIcon className="h-3.5 w-3.5" />
                                            </button>
                                        </div>
                                    )}
                                    {hasPendingChanges && (
                                        <div className="mt-2 text-xs text-yellow-700 flex items-center gap-1">
                                            <InformationCircleIcon className="h-3.5 w-3.5" />
                                            Changes pending overall save.
                                        </div>
                                    )}
                                </li>
                            );
                        })}
                    </ul>
                )}
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\CvSection.tsx ---

--- START FILE: src\components\profile\ProfessionalAffiliationDisplay.tsx ---
// src/components/profile/ProfessionalAffiliationDisplay.tsx
import React from 'react';
import type { ProfessionalAffiliation } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, UserGroupIcon, BuildingOfficeIcon } from '@heroicons/react/24/outline'; // Added BuildingOfficeIcon

interface Props {
    item: ProfessionalAffiliation;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ProfessionalAffiliationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Organization Name */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.organization || 'N/A'}
            </h3>
            {/* Position (Conditional) */}
            {item.position && (
                <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                    <div className="flex items-center justify-center w-6 h-6 rounded-md bg-cyan-50 text-cyan-600 flex-shrink-0">
                        {/* Use a relevant icon */}
                        <UserGroupIcon className="h-4 w-4" />
                    </div>
                    <span>Position: {item.position}</span>
                </div>
            )}
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Inclusive Years */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Years: {item.inclusiveYears || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.membershipProofUrl ? (
                     <a
                        href={item.membershipProofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.membershipProofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalAffiliationDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalAffiliationForm.tsx ---
// src/components/profile/ProfessionalAffiliationForm.tsx
import React from 'react';
import type { TempProfessionalAffiliation } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempProfessionalAffiliation;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempProfessionalAffiliation, value: string | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ProfessionalAffiliationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempProfessionalAffiliation, value: string | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Affiliation' : 'Editing Affiliation'}</p>
            <div>
                <label htmlFor={`organization-${item.id}`} className={labelClass}>Organization*</label>
                <input type="text" id={`organization-${item.id}`} name="organization" value={item.organization || ''} onChange={(e) => onInputChange('organization', e.target.value)} className={inputClass} required disabled={isPending} />
            </div>
            <div>
                <label htmlFor={`position-${item.id}`} className={labelClass}>Position (Optional)</label>
                <input type="text" id={`position-${item.id}`} name="position" value={item.position || ''} onChange={(e) => onInputChange('position', e.target.value || null)} className={inputClass} disabled={isPending} />
            </div>
            <div>
                <label htmlFor={`inclusiveYears-${item.id}`} className={labelClass}>Inclusive Years*</label>
                <input type="text" id={`inclusiveYears-${item.id}`} name="inclusiveYears" value={item.inclusiveYears || ''} onChange={(e) => onInputChange('inclusiveYears', e.target.value)} className={inputClass} placeholder="e.g., 2019-Present" required disabled={isPending} />
            </div>
             {/* File Input */}
             <div>
                <label htmlFor={`membershipProofFile-${item.id}`} className={labelClass}>Upload Membership Proof (Optional)</label>
                 {!isNewItem && item.membershipProofUrl && !item._selectedFile && ( <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current: <a href={item.membershipProofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.membershipProofUrl.split('/').pop()} </a> </div> )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`membershipProofFile-${item.id}`}
                    name="membershipProofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                    </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalAffiliationForm.tsx ---

--- START FILE: src\components\profile\ProfessionalDevelopmentDisplay.tsx ---
// src/components/profile/ProfessionalDevelopmentDisplay.tsx
import React from 'react';
import type { ProfessionalDevelopment } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, SparklesIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added SparklesIcon, MapPinIcon

interface Props {
    item: ProfessionalDevelopment;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ProfessionalDevelopmentDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Development Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.title || 'N/A'}
            </h3>
            {/* Organizer */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-yellow-50 text-yellow-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <SparklesIcon className="h-4 w-4" />
                </div>
                <span>Organizer: {item.organizer || 'N/A'}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date/Location */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.dateLocation || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.certificateFileUrl ? (
                     <a
                        href={item.certificateFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.certificateFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Certificate</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No certificate</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalDevelopmentDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalDevelopmentForm.tsx ---
// src/components/profile/ProfessionalDevelopmentForm.tsx
import React from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempProfessionalDevelopment } from '@/types'; // Import from shared types

interface Props {
    item: TempProfessionalDevelopment;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempProfessionalDevelopment, value: string) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ProfessionalDevelopmentForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempProfessionalDevelopment, value: string) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">
                {isNewItem ? 'New Professional Development' : 'Editing Professional Development'}
            </p>

            {/* Title Input */}
            <div>
                <label htmlFor={`title-${item.id}`} className={labelClass}>Title*</label>
                <input
                    type="text"
                    id={`title-${item.id}`}
                    name="title"
                    value={item.title || ''}
                    onChange={(e) => onInputChange('title', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Seminar on Advanced Lab Techniques"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Organizer Input */}
            <div>
                <label htmlFor={`organizer-${item.id}`} className={labelClass}>Organizer*</label>
                <input
                    type="text"
                    id={`organizer-${item.id}`}
                    name="organizer"
                    value={item.organizer || ''}
                    onChange={(e) => onInputChange('organizer', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., PAMET"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date & Location Input */}
            <div>
                <label htmlFor={`dateLocation-${item.id}`} className={labelClass}>Date & Location*</label>
                <input
                    type="text"
                    id={`dateLocation-${item.id}`}
                    name="dateLocation"
                    value={item.dateLocation || ''}
                    onChange={(e) => onInputChange('dateLocation', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., May 2024 / Davao City"
                    required
                    disabled={isPending}
                />
            </div>

            {/* File Input for Certificate */}
            <div>
                <label htmlFor={`certificateFile-${item.id}`} className={labelClass}>
                    Upload Certificate {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'}
                </label>
                {!isNewItem && item.certificateFileUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        Current:
                        <a href={item.certificateFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">
                            {item.certificateFileUrl.split('/').pop()}
                        </a>
                    </div>
                )}
                {/* *** UPDATED onChange *** */}
                <input
                    type="file"
                    id={`certificateFile-${item.id}`}
                    name="certificateFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only the file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg" // Consistent file types
                    disabled={isPending}
                />
                {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button
                            type="button"
                            onClick={() => handleFileChange(null)} // Pass null to clear
                            className="ml-1 text-red-500 hover:text-red-700 focus:outline-none"
                            title="Remove selection"
                            disabled={isPending}
                        >
                            ✕ {/* Cross symbol */}
                        </button>
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalDevelopmentForm.tsx ---

--- START FILE: src\components\profile\ProfessionalLicenseDisplay.tsx ---
// src/components/profile/ProfessionalLicenseDisplay.tsx
import React from 'react';
import type { ProfessionalLicense } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, IdentificationIcon, ClockIcon as ExpiryIcon } from '@heroicons/react/24/outline'; // Added IdentificationIcon, aliased ClockIcon

// Helper function to format only the date part
const formatDateOnly = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return 'Invalid Date';
        return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
};

interface Props {
    item: ProfessionalLicense;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function ProfessionalLicenseDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Examination Name */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.examination || 'N/A'}
            </h3>
            {/* License Number */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-lime-50 text-lime-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <IdentificationIcon className="h-4 w-4" />
                </div>
                <span>License No: {item.licenseNumber || 'N/A'}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Issued & Expiry */}
                <div className="flex flex-col sm:flex-row sm:items-center gap-x-3 gap-y-1 text-xs text-gray-600 font-medium">
                    <div className="flex items-center gap-1.5">
                        <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                        <span>Issued: {item.monthYear || 'N/A'}</span>
                    </div>
                     <div className="flex items-center gap-1.5">
                        <ExpiryIcon className="h-4 w-4 text-gray-400"/>
                        <span>Expires: {formatDateOnly(item.expiration)}</span>
                    </div>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.licenseFileUrl ? (
                     <a
                        href={item.licenseFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.licenseFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View License File</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No file</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalLicenseDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalLicenseForm.tsx ---
// src/components/profile/ProfessionalLicenseForm.tsx
import React from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempProfessionalLicense } from '@/types'; // Import from shared types

interface Props {
    item: TempProfessionalLicense;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempProfessionalLicense, value: string | Date | number | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

// Helper to format date for input type="date"
const formatDateForInput = (date: Date | string | null): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return '';
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch { return ''; }
};

export default function ProfessionalLicenseForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempProfessionalLicense, value: string | Date | number | null) => {
        handleInputChange(fieldName, value);
    };

    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const dateValue = e.target.value;
        try {
            const dateObject = dateValue ? new Date(dateValue) : null;
            // Pass Date object or null, even if invalid (backend MUST validate)
            onInputChange('expiration', dateObject);
        } catch {
            onInputChange('expiration', null);
        }
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">
                {isNewItem ? 'New Professional License' : 'Editing Professional License'}
            </p>

            {/* Examination Name Input */}
            <div>
                <label htmlFor={`examination-${item.id}`} className={labelClass}>Examination Name*</label>
                <input type="text" id={`examination-${item.id}`} name="examination" value={item.examination || ''} onChange={(e) => onInputChange('examination', e.target.value)} className={inputClass} placeholder="e.g., Medical Technologist Licensure" required disabled={isPending} />
            </div>

            {/* License Number Input */}
            <div>
                <label htmlFor={`licenseNumber-${item.id}`} className={labelClass}>License Number*</label>
                <input type="text" id={`licenseNumber-${item.id}`} name="licenseNumber" value={item.licenseNumber || ''} onChange={(e) => onInputChange('licenseNumber', e.target.value)} className={inputClass} placeholder="e.g., 0123456" required disabled={isPending} />
            </div>

            {/* Month/Year Issued Input */}
            <div>
                <label htmlFor={`monthYear-${item.id}`} className={labelClass}>Month/Year Issued*</label>
                <input type="text" id={`monthYear-${item.id}`} name="monthYear" value={item.monthYear || ''} onChange={(e) => onInputChange('monthYear', e.target.value)} className={inputClass} placeholder="e.g., August 2023" required disabled={isPending} />
            </div>

            {/* Expiration Date Input */}
            <div>
                <label htmlFor={`expiration-${item.id}`} className={labelClass}>Expiration Date*</label>
                <input type="date" id={`expiration-${item.id}`} name="expiration" value={formatDateForInput(item.expiration)} onChange={handleDateChange} className={inputClass} required disabled={isPending} />
            </div>

            {/* File Input for License */}
            <div>
                <label htmlFor={`licenseFile-${item.id}`} className={labelClass}>
                    Upload License File {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'}
                </label>
                {!isNewItem && item.licenseFileUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        Current:
                        <a href={item.licenseFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">
                            {item.licenseFileUrl.split('/').pop()}
                        </a>
                    </div>
                )}
                {/* *** UPDATED onChange *** */}
                <input
                    type="file"
                    id={`licenseFile-${item.id}`}
                    name="licenseFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only the file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                />
                {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button
                            type="button"
                            onClick={() => handleFileChange(null)} // Pass null to clear
                            className="ml-1 text-red-500 hover:text-red-700 focus:outline-none"
                            title="Remove selection"
                            disabled={isPending}
                        >
                            ✕
                        </button>
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalLicenseForm.tsx ---

--- START FILE: src\components\profile\PublicationDisplay.tsx ---
// src/components/profile/PublicationDisplay.tsx
import React from 'react';
import type { Publication } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, LinkIcon, BookOpenIcon } from '@heroicons/react/24/outline'; // Added BookOpenIcon

// Helper function to format only the date part
const formatDateOnly = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return 'Invalid Date';
        return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
};

interface Props {
    item: Publication;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function PublicationDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Research Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.researchTitle || 'N/A'}
            </h3>
            {/* Journal */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold italic">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-rose-50 text-rose-600 flex-shrink-0 not-italic">
                    {/* Use a relevant icon */}
                    <BookOpenIcon className="h-4 w-4" />
                </div>
                <span className='not-italic'>Journal: {item.journal || 'N/A'}</span>
            </div>
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date Published */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Published: {formatDateOnly(item.datePublished)}</span>
                </div>

                {/* Links (DOI & PDF / Staged File) */}
                <div className="flex items-center gap-x-3 gap-y-1">
                    {/* Show Staged File if present in edit mode */}
                    {isEditing && stagedFile ? (
                        <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                            <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                            <span>Pending upload: {stagedFile.name}</span>
                        </div>
                    ) : (
                        // Otherwise, show existing links
                        (<>
                            {item.doiLink && (
                                <a
                                    href={item.doiLink.startsWith('http') ? item.doiLink : `https://${item.doiLink}`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                                    title={item.doiLink}
                                >
                                <LinkIcon className="h-4 w-4" /> DOI Link
                                </a>
                            )}
                            {item.pdfUrl && (
                                <a
                                    href={item.pdfUrl}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                     className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                                    title={item.pdfUrl}>
                                <DocumentTextIcon className="h-4 w-4" /> View PDF
                                </a>
                            )}
                            {!item.doiLink && !item.pdfUrl && !isEditing && ( // Only show "No links" if not editing
                                 (<span className="text-xs text-gray-400 italic">No links/file</span>)
                            )}
                        </>)
                    )}
                </div>


                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\PublicationDisplay.tsx ---

--- START FILE: src\components\profile\PublicationForm.tsx ---
// src/components/profile/PublicationForm.tsx
import React from 'react';
import type { TempPublication } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempPublication;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempPublication, value: string | Date | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

// Helper to format date for input type="date"
const formatDateForInput = (date: Date | string | null): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return '';
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch { return ''; }
};


export default function PublicationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempPublication, value: string | Date | null) => {
        handleInputChange(fieldName, value);
    };

    // Handle date change specifically
    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const dateValue = e.target.value;
        try {
            // Date is required, so only pass valid Date objects
            const dateObject = dateValue ? new Date(dateValue) : null;
            if (dateObject && !isNaN(dateObject.getTime())) {
                onInputChange('datePublished', dateObject);
            } else {
                 onInputChange('datePublished', null); // Pass null if invalid/empty
            }
        } catch {
            onInputChange('datePublished', null); // Pass null on error
        }
    };


    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Publication' : 'Editing Publication'}</p>

            {/* Research Title Input */}
            <div>
                <label htmlFor={`researchTitle-${item.id}`} className={labelClass}>Research Title*</label>
                <input
                    type="text"
                    id={`researchTitle-${item.id}`}
                    name="researchTitle"
                    value={item.researchTitle || ''}
                    onChange={(e) => onInputChange('researchTitle', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Journal Input */}
            <div>
                <label htmlFor={`journal-${item.id}`} className={labelClass}>Journal Name*</label>
                <input
                    type="text"
                    id={`journal-${item.id}`}
                    name="journal"
                    value={item.journal || ''}
                    onChange={(e) => onInputChange('journal', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date Published Input */}
             <div>
                <label htmlFor={`datePublished-${item.id}`} className={labelClass}>Date Published*</label>
                <input
                    type="date"
                    id={`datePublished-${item.id}`}
                    name="datePublished"
                    value={formatDateForInput(item.datePublished)} // Format Date to YYYY-MM-DD string
                    onChange={handleDateChange}
                    className={inputClass}
                    required // Mark as required
                    disabled={isPending}
                />
            </div>

             {/* DOI Link Input */}
            <div>
                <label htmlFor={`doiLink-${item.id}`} className={labelClass}>DOI Link (Optional)</label>
                <input
                    type="text"
                    id={`doiLink-${item.id}`}
                    name="doiLink"
                    value={item.doiLink || ''}
                    onChange={(e) => onInputChange('doiLink', e.target.value || null)} // Pass null if empty
                    className={inputClass}
                    placeholder="e.g., 10.1000/xyz123 or https://doi.org/..."
                    disabled={isPending}
                 />
            </div>

            {/* File Input for PDF */}
             <div>
                <label htmlFor={`pdfFile-${item.id}`} className={labelClass}>Upload PDF Copy (Optional)</label>
                 {!isNewItem && item.pdfUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.pdfUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.pdfUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`pdfFile-${item.id}`}
                    name="pdfFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf" // Primarily expect PDFs
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF only.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\PublicationForm.tsx ---

--- START FILE: src\components\profile\StatusDisplay.tsx ---
// src/components/profile/StatusDisplay.tsx
import React from 'react';
import type { ApprovalStatus } from '@/generated/prisma';
import { ClockIcon, CheckCircleIcon, XCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

interface Props {
    status: ApprovalStatus;
    rejectionReason?: string | null;
}

export default function StatusDisplay({ status, rejectionReason }: Props) {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-700';
    let iconColor = 'text-gray-500';
    let shadow = 'shadow-sm';
    let Icon = ClockIcon;
    let text = status;

    switch (status) {
        case 'PENDING':
            bgColor = 'bg-amber-100';
            textColor = 'text-amber-800';
            iconColor = 'text-amber-600';
            shadow = 'shadow-md shadow-amber-500/10';
            Icon = ClockIcon;
            break;
        case 'APPROVED':
            // Match template's approved style
            bgColor = 'bg-emerald-100'; // Lighter green
            textColor = 'text-emerald-800'; // Darker green text
            iconColor = 'text-emerald-600';
            shadow = 'shadow-lg shadow-emerald-500/20'; // Subtle green shadow
            Icon = CheckCircleIcon;
            break;
        case 'REJECTED':
            bgColor = 'bg-red-100';
            textColor = 'text-red-800';
            iconColor = 'text-red-600';
            shadow = 'shadow-md shadow-red-500/10';
            Icon = XCircleIcon;
            break;
    }

    return (
        <div className="flex flex-col items-end gap-1"> {/* Align status pill and reason */}
            <div
                className={`inline-flex items-center gap-1.5 rounded-full px-3 py-1 text-xs font-bold uppercase tracking-wider ${bgColor} ${textColor} ${shadow}`}
                title={status}
            >
                <Icon className={`h-4 w-4 ${iconColor}`} />
                {text}
            </div>
            {status === 'REJECTED' && rejectionReason && (
                 <div className="mt-1 flex items-start gap-1 rounded border border-red-200 bg-red-50 p-1.5 text-xs text-red-700 max-w-[200px] text-right"> {/* Added max-width */}
                    <ExclamationTriangleIcon className="h-4 w-4 flex-shrink-0 text-red-500 mt-0.5" />
                    <span><strong>Reason:</strong> {rejectionReason}</span>
                 </div>
            )}
        </div>
    );
}
--- END FILE: src\components\profile\StatusDisplay.tsx ---

--- START FILE: src\components\profile\UserProfileInfoCard.tsx ---
// src/components/profile/UserProfileInfoCard.tsx
'use client';
import React, { ChangeEvent, useState, useEffect } from 'react';
import Image from 'next/image';
import {
    PencilSquareIcon, XCircleIcon, CheckCircleIcon, PlusIcon, UserCircleIcon as ProfileAvatarIcon,
    CakeIcon, PhoneIcon, MapPinIcon, EnvelopeIcon, LinkIcon, UserIcon as EmployeeIdIcon,
    ChatBubbleBottomCenterTextIcon, IdentificationIcon, PencilIcon, TrashIcon
} from '@heroicons/react/24/outline';
import type { ProfileUser, TempSocialMediaLink, CategoryKey } from '@/types';
import { formatDate, formatDateForInput, defaultTempSocialMediaLink } from '@/lib/profileUtils'; // Import utilities
import { categoryMetadata } from '@/lib/profileUtils'; // For the "Add CV Section" dropdown

// Props definition
interface UserProfileInfoCardProps {
    user: Partial<ProfileUser> | null; // Can be partial during editing
    isEditingPage: boolean;
    isPending: boolean; // Global pending state
    editingAnyCvItem: boolean; // True if any CV item (not user details) is being edited

    // Handlers for user details
    onUserDetailChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
    onUserDateChange: (name: 'dateOfBirth', value: string) => void;

    // Handlers for social media links
    socialMediaLinks: TempSocialMediaLink[];
    onAddSocialMediaLink: () => void;
    onSocialMediaLinkChange: (index: number, field: keyof Pick<TempSocialMediaLink, 'platform' | 'url'>, value: string) => void;
    onDeleteSocialMediaLink: (index: number) => void;

    // Handlers for profile image
    profileImagePreview: string | null;
    selectedProfileImageFile: File | null; // To know if a new file is staged
    onProfileImageSelect: (event: ChangeEvent<HTMLInputElement>) => void;

    // Main page action handlers
    onEditToggle: () => void; // Toggles the entire page's edit mode
    onSaveChanges: () => void; // Saves all changes on the page

    // CV Section Management (passed down for the dropdown)
    showCategoryDropdown: boolean;
    setShowCategoryDropdown: (show: boolean) => void;
    visibleCategories: Set<CategoryKey>;
    onAddCategory: (categoryKey: CategoryKey) => void;
}

// Styling constants (can be moved to a shared file)
const profileInputClass = "block w-full rounded-lg border-gray-300 shadow-sm focus:border-spc-blue-main focus:ring-1 focus:ring-spc-blue-main text-sm disabled:opacity-70 bg-white py-2 px-3";
const profileLabelClass = "block text-xs font-medium text-gray-500 mb-1";
const basePageActionButtonClasses = "inline-flex items-center justify-center rounded-lg px-4 py-2 text-sm font-semibold text-white shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-spc-blue-lighter disabled:opacity-70 w-full sm:w-auto transition-all duration-150 ease-in-out transform hover:scale-105";
const editProfileButtonClasses = "bg-spc-blue-main hover:bg-spc-blue-darker focus:ring-spc-blue-main";
const cancelEditModeButtonClasses = "bg-slate-600 hover:bg-slate-700 focus:ring-slate-500";
const saveChangesButtonClasses = "bg-green-600 hover:bg-green-700 focus:ring-green-500";
const addSectionButtonClasses = "bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500";

export default function UserProfileInfoCard({
    user,
    isEditingPage,
    isPending,
    editingAnyCvItem,
    onUserDetailChange,
    onUserDateChange,
    socialMediaLinks,
    onAddSocialMediaLink,
    onSocialMediaLinkChange,
    onDeleteSocialMediaLink,
    profileImagePreview,
    selectedProfileImageFile,
    onProfileImageSelect,
    onEditToggle,
    onSaveChanges,
    showCategoryDropdown,
    setShowCategoryDropdown,
    visibleCategories,
    onAddCategory,
}: UserProfileInfoCardProps) {
    if (!user) {
        return (
            <div className="w-full md:w-1/3 lg:w-1/4 xl:w-1/5 mb-6 md:mb-0">
                <div className="bg-white rounded-xl shadow-xl border border-gray-200 p-6 text-center text-gray-500">
                    User data not available.
                </div>
            </div>
        );
    }

    const [imageLoadError, setImageLoadError] = useState(false);

    useEffect(() => {
        setImageLoadError(false);
    }, [user?.profileImageUrl, profileImagePreview]);

    const userInitials = user.name?.trim() ? user.name.trim().split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase()
                       : (user.email?.trim() ? user.email.trim().charAt(0).toUpperCase() : '?');

    const renderSocialMediaLinks = () => {
        if (!socialMediaLinks || socialMediaLinks.length === 0) {
            return <p className="text-xs text-gray-500 italic">No social/professional links added.</p>;
        }
        return (
            <div className="space-y-2">
                {socialMediaLinks.map(link => (
                    <a
                        key={link.id} 
                        href={link.url && link.url.startsWith('http') ? link.url : `https://${link.url}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-2 text-spc-blue-main hover:text-spc-blue-darker hover:underline break-all"
                    >
                        <LinkIcon className="h-4 w-4 text-gray-400 flex-shrink-0" />
                        <span className="font-medium">{link.platform || '[No Platform]'}:</span>
                        <span className="truncate">{link.url || '[No URL]'}</span>
                    </a>
                ))}
            </div>
        );
    };

    return (
        <div className="w-full md:w-1/3 lg:w-1/4 xl:w-1/5 mb-6 md:mb-0 md:sticky md:top-20 md:self-start">
            <div className="bg-white rounded-xl shadow-xl border border-gray-200/80 overflow-hidden">
                {/* Profile Image and Name Section */}
                <div className="flex flex-col items-center p-6 bg-spc-blue-main">
                    {/* Profile Image Container - This is the key relative parent */}
                    
                    {/* Container for the image and the overlapping button. This is the positioning parent. */}
                    <div className="relative group"> 
                        {/* The actual circular image container, which clips the image */}
                        <div className="relative h-36 w-36 sm:h-40 sm:w-40 rounded-full bg-spc-blue-darker ring-4 ring-white/50 shadow-lg overflow-hidden"> {/* Added relative here */}
                        {profileImagePreview ? (
                            <Image src={profileImagePreview} alt="Profile preview" layout="fill" objectFit="cover" />
                        ) : user.profileImageUrl && !imageLoadError ? (
                            <Image
                                src={user.profileImageUrl}
                                alt={`${user.name || 'Faculty'}'s profile`}
                                layout="fill"
                                objectFit="cover"
                                onError={() => setImageLoadError(true)}
                            />
                        ) : (
                            <div className="flex items-center justify-center h-full w-full text-white text-5xl font-semibold">{userInitials}</div>
                        )}

                        {/* Edit Profile Image Button - Positioned absolutely relative to the outer 'group' div */}
                        </div> {/* End of the circular image container */}
                        {isEditingPage && (
                            <label
                                htmlFor="profileImageUpload"
                                className="absolute bottom-0 right-0
                                           transform translate-x-1 translate-y-0
                                           cursor-pointer p-2 bg-white rounded-full shadow-xl
                                           hover:bg-gray-100 transition-all duration-200 ease-in-out
                                           ring-2 ring-spc-blue-main hover:ring-spc-blue-light z-10"
                                title="Change profile picture"
                            >
                                <PencilIcon className="h-5 w-5 text-spc-blue-main"/>
                                <input
                                    type="file"
                                    id="profileImageUpload"
                                    name="profileImageUpload"
                                    className="hidden"
                                    accept="image/png, image/jpeg, image/jpg"
                                    onChange={onProfileImageSelect}
                                    disabled={isPending}
                                />
                            </label>
                        )}
                    </div>
                    {isEditingPage ? (
                        <input
                            type="text"
                            name="name"
                            value={user.name ?? ''}
                            onChange={onUserDetailChange}
                            className="mt-5 text-xl font-bold text-white text-center bg-transparent border-b-2 border-white/30 focus:border-white focus:ring-0 placeholder-gray-300 w-full py-1"
                            placeholder="Full Name"
                            disabled={isPending}
                        />
                    ) : (
                        <h2 className="mt-5 text-xl font-bold text-white text-center relative group">
                            {user.name ?? 'N/A'}
                            <span className="absolute bottom-[-4px] left-1/4 right-1/4 h-0.5 bg-white/30 group-hover:bg-white/50 transition-colors duration-300"></span>
                        </h2>
                    )}
                    <p className="text-sm text-spc-blue-lighter opacity-90 mt-1">{user.role}</p>
                </div>

                {/* User Details Section */}
                <div className="p-5 space-y-3.5 text-sm">
                    <div>
                        <label className={`${profileLabelClass} flex items-center gap-1.5`}><EnvelopeIcon className="h-4 w-4"/>Email Address</label>
                        <p className="text-gray-900 break-all">{user.email ?? 'N/A'}</p>
                    </div>
                    <div>
                        <label htmlFor="contactNumber" className={`${profileLabelClass} flex items-center gap-1.5`}><PhoneIcon className="h-4 w-4"/>Contact Number</label>
                        {isEditingPage ? ( <input type="tel" id="contactNumber" name="contactNumber" value={user.contactNumber ?? ''} onChange={onUserDetailChange} className={profileInputClass} placeholder="e.g., 09123456789" disabled={isPending}/> ) : ( <p className="text-gray-900">{user.contactNumber ?? 'N/A'}</p> )}
                    </div>
                    <div>
                        <label htmlFor="employeeId" className={`${profileLabelClass} flex items-center gap-1.5`}><EmployeeIdIcon className="h-4 w-4"/>Employee ID</label>
                        {isEditingPage ? ( <input type="text" id="employeeId" name="employeeId" value={user.employeeId ?? ''} onChange={onUserDetailChange} className={profileInputClass} placeholder="Faculty Employee ID" disabled={isPending}/> ) : ( <p className="text-gray-900">{user.employeeId ?? 'N/A'}</p> )}
                    </div>

                    <div className="pt-2 mt-2 border-t border-gray-100"></div>

                    <div>
                        <label htmlFor="dateOfBirth" className={`${profileLabelClass} flex items-center gap-1.5`}><CakeIcon className="h-4 w-4"/>Date of Birth</label>
                        {isEditingPage ? ( <input type="date" id="dateOfBirth" name="dateOfBirth" value={formatDateForInput(user.dateOfBirth)} onChange={(e) => onUserDateChange('dateOfBirth', e.target.value)} className={profileInputClass} disabled={isPending}/> ) : ( <p className="text-gray-900">{user.dateOfBirth ? formatDate(user.dateOfBirth) : 'N/A'}</p> )}
                    </div>
                    <div>
                        <label htmlFor="civilStatus" className={`${profileLabelClass} flex items-center gap-1.5`}><IdentificationIcon className="h-4 w-4"/>Civil Status</label>
                        {isEditingPage ? (
                            <select name="civilStatus" id="civilStatus" value={user.civilStatus ?? ''} onChange={onUserDetailChange} className={profileInputClass} disabled={isPending}>
                                <option value="">Select...</option><option value="Single">Single</option><option value="Married">Married</option><option value="Widowed">Widowed</option><option value="Separated">Separated</option><option value="Divorced">Divorced</option>
                            </select>
                        ) : ( <p className="text-gray-900">{user.civilStatus ?? 'N/A'}</p> )}
                    </div>
                    <div>
                        <label htmlFor="nationality" className={`${profileLabelClass} flex items-center gap-1.5`}><IdentificationIcon className="h-4 w-4"/>Nationality</label>
                        {isEditingPage ? ( <input type="text" id="nationality" name="nationality" value={user.nationality ?? ''} onChange={onUserDetailChange} className={profileInputClass} placeholder="e.g., Filipino" disabled={isPending}/> ) : ( <p className="text-gray-900">{user.nationality ?? 'N/A'}</p> )}
                    </div>
                    <div>
                        <label htmlFor="address" className={`${profileLabelClass} flex items-start gap-1.5`}><MapPinIcon className="h-4 w-4 mt-0.5"/>Address</label>
                        {isEditingPage ? ( <textarea id="address" name="address" rows={3} value={user.address ?? ''} onChange={onUserDetailChange} className={profileInputClass} placeholder="Full Address" disabled={isPending}></textarea> ) : ( <p className="text-gray-900 whitespace-pre-wrap">{user.address ?? 'N/A'}</p> )}
                    </div>

                    <div className="pt-2 mt-2 border-t border-gray-100"></div>

                    <div>
                        <label htmlFor="bio" className={`${profileLabelClass} flex items-center gap-1.5`}><ChatBubbleBottomCenterTextIcon className="h-4 w-4"/>About Me / Bio</label>
                        {isEditingPage ? ( <textarea id="bio" name="bio" rows={4} value={user.bio ?? ''} onChange={onUserDetailChange} className={profileInputClass} placeholder="Tell us a bit about yourself..." disabled={isPending}/> ) : ( <p className="text-gray-700 whitespace-pre-wrap">{user.bio || <span className="italic text-gray-400">No bio provided.</span>}</p> )}
                    </div>

                    {/* Social Media Links Section */}
                    {(socialMediaLinks.length > 0 || isEditingPage) && (
                        <>
                            <div className="pt-2 mt-2 border-t border-gray-100"></div>
                            <div className="space-y-3">
                                <h3 className="text-xs font-semibold text-gray-500 uppercase flex items-center gap-1.5">
                                    <LinkIcon className="h-4 w-4"/>Social & Professional Links
                                </h3>
                                {isEditingPage ? (
                                    <>
                                        {socialMediaLinks.length > 0 ? (
                                            socialMediaLinks.map((link, index) => (
                                                <div key={link.id} className="space-y-1.5 p-2.5 border border-dashed border-gray-300 rounded-md bg-gray-50/50 relative">
                                                    <div>
                                                        <label htmlFor={`platform-${link.id}`} className={profileLabelClass}>Platform</label>
                                                        <input type="text" id={`platform-${link.id}`} placeholder="e.g., LinkedIn, GitHub" value={link.platform} onChange={(e) => onSocialMediaLinkChange(index, 'platform', e.target.value)} className={profileInputClass} disabled={isPending}/>
                                                    </div>
                                                    <div>
                                                        <label htmlFor={`url-${link.id}`} className={profileLabelClass}>URL</label>
                                                        <input type="url" id={`url-${link.id}`} placeholder="https://linkedin.com/in/yourprofile" value={link.url} onChange={(e) => onSocialMediaLinkChange(index, 'url', e.target.value)} className={profileInputClass} disabled={isPending}/>
                                                    </div>
                                                    <button type="button" onClick={() => onDeleteSocialMediaLink(index)} className="absolute top-1.5 right-1.5 p-0.5 rounded-full text-red-500 hover:bg-red-100 disabled:opacity-50" title="Delete this link" disabled={isPending}>
                                                        <XCircleIcon className="h-4 w-4" />
                                                    </button>
                                                </div>
                                            ))
                                        ) : (
                                            <p className="text-xs text-gray-400 italic p-2">No links added yet. Click "Add Link" to start.</p>
                                        )}
                                        <button type="button" onClick={onAddSocialMediaLink} className="mt-2 inline-flex items-center gap-1 text-xs font-medium text-indigo-600 hover:text-indigo-800 disabled:opacity-50" disabled={isPending}>
                                            <PlusIcon className="h-3.5 w-3.5" /> Add Social Link
                                        </button>
                                    </>
                                ) : (
                                    renderSocialMediaLinks()
                                )}
                            </div>
                        </>
                    )}
                </div>

                {/* Action Buttons Section */}
                <div className="p-4 border-t border-gray-200 bg-gray-50/70 space-y-3">
                    <button onClick={onEditToggle} disabled={isPending} className={`${basePageActionButtonClasses} ${isEditingPage ? cancelEditModeButtonClasses : editProfileButtonClasses}`}>
                        {isEditingPage ? ( <><XCircleIcon className="h-5 w-5 mr-1.5" /> Cancel Edit</> ) : ( <><PencilSquareIcon className="h-5 w-5 mr-1.5" /> Edit Profile</> )}
                    </button>
                    {isEditingPage && (
                        <button onClick={onSaveChanges} disabled={isPending || editingAnyCvItem} className={`${basePageActionButtonClasses} ${saveChangesButtonClasses}`}>
                            {isPending ? 'Saving...' : <><CheckCircleIcon className="h-5 w-5 mr-1.5" /> Save All Changes</>}
                        </button>
                    )}
                    <div className="relative pt-1">
                        <button
                            onClick={() => setShowCategoryDropdown(!showCategoryDropdown)}
                            disabled={isPending || !isEditingPage}
                            className={`${basePageActionButtonClasses} ${addSectionButtonClasses} ${!isEditingPage ? 'opacity-50 cursor-not-allowed' : ''}`}
                            aria-haspopup="true"
                            aria-expanded={showCategoryDropdown}
                        >
                            <PlusIcon className="h-5 w-5 mr-1.5" /> Add CV Section
                        </button>
                        {showCategoryDropdown && isEditingPage && (
                            <div className="absolute bottom-full left-0 mb-2 w-full origin-bottom-left rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-20">
                                <div className="py-1" role="none">
                                    {(Object.keys(categoryMetadata) as CategoryKey[]).filter(key => !visibleCategories.has(key)).length > 0 ? (
                                        (Object.keys(categoryMetadata) as CategoryKey[]).filter(key => !visibleCategories.has(key)).map(key => (
                                            <button key={key} onClick={() => onAddCategory(key)} className="block w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100" role="menuitem">
                                                {categoryMetadata[key].title}
                                            </button>
                                        ))
                                    ) : ( <p className="px-4 py-2 text-sm text-gray-500">All sections added.</p> )}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\UserProfileInfoCard.tsx ---

--- START FILE: src\components\profile\WorkExperienceDisplay.tsx ---
// src/components/profile/WorkExperienceDisplay.tsx
import React from 'react';
import type { WorkExperience } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingOfficeIcon, BriefcaseIcon } from '@heroicons/react/24/outline'; // Added BriefcaseIcon

interface Props {
    item: WorkExperience;
    isEditing?: boolean; // Added for edit mode context
    stagedFile?: File | null; // Added for pending file display
}

export default function WorkExperienceDisplay({ item, isEditing, stagedFile }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Position Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.position || 'N/A'}
            </h3>
            {/* Institution */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-orange-50 text-orange-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <BuildingOfficeIcon className="h-4 w-4" />
                </div>
                <span>{item.institution || 'N/A'}</span>
            </div>
            {/* Nature of Work (Conditional) */}
            {item.natureOfWork && (
               <p className="text-xs text-gray-500 mt-1 pl-8"> {/* Indent slightly */}
                   <span className="font-medium">Nature:</span> {item.natureOfWork}
                </p>
           )}
            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Inclusive Years */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Years: {item.inclusiveYears || 'N/A'}</span>
                </div>

                {/* Document Link / Staged File Indicator */}
                {isEditing && stagedFile ? (
                    <div className="mt-1 flex items-center gap-1 text-xs text-purple-700 bg-purple-50 p-1 rounded">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        <span>Pending upload: {stagedFile.name}</span>
                    </div>
                ) : item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\WorkExperienceDisplay.tsx ---

--- START FILE: src\components\profile\WorkExperienceForm.tsx ---
// src/components/profile/WorkExperienceForm.tsx
import React from 'react';
import type { TempWorkExperience } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempWorkExperience;
    isPending: boolean;
    // Simplified signature (assuming bound in parent)
    handleInputChange: (fieldName: keyof TempWorkExperience, value: string | null) => void;
    // Updated signature for file change
    handleFileChange: (file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function WorkExperienceForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Helper for input change to match simplified signature
    const onInputChange = (fieldName: keyof TempWorkExperience, value: string | null) => {
        handleInputChange(fieldName, value);
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Work Experience' : 'Editing Work Experience'}</p>

            {/* Position Input */}
            <div>
                <label htmlFor={`position-${item.id}`} className={labelClass}>Position*</label>
                <input
                    type="text"
                    id={`position-${item.id}`}
                    name="position"
                    value={item.position || ''}
                    onChange={(e) => onInputChange('position', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Faculty, Medical Technologist"
                    required
                    disabled={isPending} />
             </div>

             {/* Institution Input */}
            <div>
                <label htmlFor={`institution-${item.id}`} className={labelClass}>Institution*</label>
                <input
                    type="text"
                    id={`institution-${item.id}`}
                    name="institution"
                    value={item.institution || ''}
                    onChange={(e) => onInputChange('institution', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., San Pedro College"
                    required
                    disabled={isPending}
                 />
             </div>

             {/* Inclusive Years Input */}
            <div>
                <label htmlFor={`inclusiveYears-${item.id}`} className={labelClass}>Inclusive Years*</label>
                <input
                    type="text"
                    id={`inclusiveYears-${item.id}`}
                    name="inclusiveYears"
                    value={item.inclusiveYears || ''}
                    onChange={(e) => onInputChange('inclusiveYears', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., 2020-Present or 2018-2019"
                    required
                    disabled={isPending}
                 />
             </div>

             {/* Nature of Work Input */}
            <div>
                <label htmlFor={`natureOfWork-${item.id}`} className={labelClass}>Nature of Work (Optional)</label>
                <input
                    type="text"
                    id={`natureOfWork-${item.id}`}
                    name="natureOfWork"
                    value={item.natureOfWork || ''}
                    // Pass null if empty string for optional fields
                    onChange={(e) => onInputChange('natureOfWork', e.target.value || null)}
                    className={inputClass}
                    disabled={isPending}
                 />
             </div>

             {/* File Input */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., COE) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 {/* *** UPDATED onChange *** */}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(e.target.files?.[0])} // Pass only file
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span>
                        {/* *** UPDATED onClick *** */}
                        <button type="button" onClick={() => handleFileChange(null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button>
                     </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\WorkExperienceForm.tsx ---

--- START FILE: src\components\providers\NextAuthProvider.tsx ---
// src/components/providers/NextAuthProvider.tsx
'use client'; // This component wraps SessionProvider, so it must be a Client Component

import { SessionProvider } from 'next-auth/react';
import React from 'react';

interface Props {
    children: React.ReactNode;
    // We might pass the session from the server later for optimization,
    // but for now, SessionProvider will fetch it client-side.
}

export default function NextAuthProvider({ children }: Props) {
    return <SessionProvider>{children}</SessionProvider>;
}
--- END FILE: src\components\providers\NextAuthProvider.tsx ---

--- START FILE: src\components\ui\AestheticClock.tsx ---
// src/components/ui/AestheticClock.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { ClockIcon } from '@heroicons/react/24/outline'; // Using outline for consistency

const AestheticClock = () => {
    const [currentTime, setCurrentTime] = useState(new Date());

    useEffect(() => {
        const timerId = setInterval(() => {
            setCurrentTime(new Date());
        }, 1000); // Update every second

        return () => {
            clearInterval(timerId); // Cleanup on unmount
        };
    }, []);

    // Format time: e.g., 03:45:22 PM (with seconds)
    const timeString = currentTime.toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit', // Added seconds
        hour12: true,
    });

    // Format date: e.g., Thursday, May 16 (Year removed for a cleaner dashboard look, can be added back)
    const dateString = currentTime.toLocaleDateString([], {
        weekday: 'long',
        month: 'long',
        day: 'numeric',
    });

    return (
        // Main container: inline-flex to wrap content, styled with blur, shadow, etc.
        <div className="inline-flex items-center gap-3 sm:gap-4 p-3.5 sm:p-4 bg-white/80 backdrop-blur-md rounded-xl shadow-xl border border-slate-200/70">
            {/* Icon */}
            <ClockIcon className="h-8 w-8 sm:h-10 sm:w-10 text-spc-blue-main flex-shrink-0" />

            {/* Time and Date Text Block */}
            <div className="flex flex-col items-start"> {/* Aligns time/date text to the left */}
                <div className="text-2xl sm:text-3xl md:text-4xl font-semibold text-spc-blue-darker tracking-tight font-mono">
                    {/* font-mono gives the time a digital clock feel */}
                    {timeString}
                </div>
                <div className="text-xs sm:text-sm text-slate-500 mt-0.5">
                    {dateString}
                </div>
            </div>
        </div>
    );
};

export default AestheticClock;
--- END FILE: src\components\ui\AestheticClock.tsx ---

--- START FILE: src\components\ui\Footer.tsx ---
// src/components/ui/Footer.tsx
import React from 'react';
import Link from 'next/link';

export default function Footer() {
    const currentYear = new Date().getFullYear();

    return (
        <footer className="bg-spc-blue-darker border-t border-spc-blue-light/20 mt-auto"> {/* UPDATED CLASSES */}
            <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-5">
                <div className="flex flex-col sm:flex-row justify-between items-center text-xs text-white"> {/* UPDATED CLASSES */}
                    {/* Left Side */}
                    <p>
                        © {currentYear} San Pedro College - SMLS. All rights reserved.
                    </p>

                    {/* Right Side (Optional Links) */}
                    <div className="flex space-x-4 mt-2 sm:mt-0">
                        <Link
                            href="#"
                            className="text-white hover:text-spc-blue-DEFAULT hover:underline transition-colors duration-200"
                            > {/* UPDATED CLASSES */}
                            Privacy Policy
                        </Link>
                        <Link
                            href="#"
                            className="text-white hover:text-spc-blue-DEFAULT hover:underline transition-colors duration-200"> {/* UPDATED CLASSES */}
                            Terms of Service
                        </Link>
                    </div>
                </div>
            </div>
        </footer>
    );
}
--- END FILE: src\components\ui\Footer.tsx ---

--- START FILE: src\components\ui\Header.tsx ---
// src/components/ui/Header.tsx
'use client';

import React, { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSession, signOut } from 'next-auth/react';
import {
    ArrowLeftStartOnRectangleIcon,
    UserCircleIcon,
    HomeIcon,
    DocumentTextIcon,
    CheckBadgeIcon,
    UsersIcon,
    TableCellsIcon,
    BellIcon,
    BookOpenIcon,
    Bars3Icon,
    XMarkIcon,
} from '@heroicons/react/24/outline';
import NotificationPanel from './NotificationPanel';
import { getMyNotifications } from '../../lib/actions/notificationActions';

interface NavLinkItem {
    href: string;
    label: string;
    icon: React.ElementType;
    tooltip: string;
}

interface NavLinkWithTooltipProps {
    link: NavLinkItem;
    onClick?: () => void;
    isMobile?: boolean;
}

const NavLinkWithTooltip: React.FC<NavLinkWithTooltipProps> = ({ link, onClick, isMobile = false }) => {
    const [showTooltip, setShowTooltip] = useState(false);
    let tooltipTimeoutId: NodeJS.Timeout | null = null;
    const TOOLTIP_DELAY = 600;

    const handleMouseEnter = () => {
        if (isMobile) return;
        tooltipTimeoutId = setTimeout(() => {
            setShowTooltip(true);
        }, TOOLTIP_DELAY);
    };

    const handleMouseLeave = () => {
        if (isMobile) return;
        if (tooltipTimeoutId) {
            clearTimeout(tooltipTimeoutId);
            tooltipTimeoutId = null;
        }
        setShowTooltip(false);
    };

    useEffect(() => {
        return () => {
            if (tooltipTimeoutId) {
                clearTimeout(tooltipTimeoutId);
            }
        };
    }, [tooltipTimeoutId]);

    return (
        <div
            className="relative inline-flex"
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
        >
            <Link
                href={link.href}
                onClick={onClick}
                className={`flex items-center gap-1.5 rounded-md px-3 py-2 font-medium 
                            ${isMobile ? 'text-base text-white hover:bg-spc-blue-light/70'
                                       : 'text-sm text-sky-100 hover:bg-spc-blue-darker/50 hover:text-white'} 
                            transition-all duration-200 transform hover:scale-105`}
            >
                <link.icon className={`h-${isMobile ? '5' : '4'} w-${isMobile ? '5' : '4'} ${isMobile ? 'text-sky-200' : 'text-sky-300'}`} />
                {link.label}
            </Link>
            
            {!isMobile && showTooltip && (
                <div 
                    className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 z-50
                               px-2.5 py-1.5 bg-spc-blue-darker text-white text-xs rounded-md shadow-xl 
                               pointer-events-none transition-opacity duration-150 ease-in-out"
                    style={{ opacity: showTooltip ? 1 : 0, minWidth: 'max-content' }}
                >
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 w-0 h-0 
                                  border-x-4 border-x-transparent 
                                  border-b-4 border-b-spc-blue-darker"></div>
                    {link.tooltip}
                </div>
            )}
        </div>
    );
};

export default function Header() {
    const { data: session, status } = useSession();
    const user = session?.user;
    const userRole = (user as any)?.role;

    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const [unreadCount, setUnreadCount] = useState<number>(0);
    const [isLoadingNotifications, setIsLoadingNotifications] = useState<boolean>(true);
    const [showNotificationPanel, setShowNotificationPanel] = useState<boolean>(false);
    const [scrolled, setScrolled] = useState<boolean>(false);

    const notificationButtonRef = useRef<HTMLButtonElement>(null);
    const notificationPanelRef = useRef<HTMLDivElement>(null);
    const mobileMenuButtonRef = useRef<HTMLButtonElement>(null);
    const mobileMenuPanelRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleScroll = () => setScrolled(window.scrollY > 10);
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    useEffect(() => {
        if (status === 'authenticated') {
            setIsLoadingNotifications(true);
            getMyNotifications()
                .then(r => setUnreadCount(r.success && r.unreadCount !== undefined ? r.unreadCount : 0))
                .catch(() => setUnreadCount(0))
                .finally(() => setIsLoadingNotifications(false));
        } else {
            setUnreadCount(0);
            setIsLoadingNotifications(false);
        }
    }, [status]);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (notificationPanelRef.current && !notificationPanelRef.current.contains(event.target as Node) &&
                notificationButtonRef.current && !notificationButtonRef.current.contains(event.target as Node)) {
                setShowNotificationPanel(false);
            }
            if (mobileMenuPanelRef.current && !mobileMenuPanelRef.current.contains(event.target as Node) &&
                mobileMenuButtonRef.current && !mobileMenuButtonRef.current.contains(event.target as Node)) {
                setIsMobileMenuOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    const handleSignOut = async () => await signOut({ callbackUrl: '/login' });

    const facultyLinks: NavLinkItem[] = [
        { href: '/dashboard', label: 'Dashboard', icon: HomeIcon, tooltip: "View your main dashboard" },
        { href: '/profile', label: 'My Profile', icon: UserCircleIcon, tooltip: "Manage your profile and CV" },
        { href: '/documents', label: 'My Documents', icon: DocumentTextIcon, tooltip: "Access your uploaded documents" },
    ];
    const adminLinks: NavLinkItem[] = [
        { href: '/admin/dashboard', label: 'Dashboard', icon: HomeIcon, tooltip: "Admin overview and stats" },
        { href: '/admin/approvals', label: 'Approvals', icon: CheckBadgeIcon, tooltip: "Manage pending submissions" },
        { href: '/admin/faculty', label: 'Faculty', icon: UsersIcon, tooltip: "View and manage faculty users" },
        { href: '/admin/matrix', label: 'Matrix', icon: TableCellsIcon, tooltip: "View faculty specialization matrix" },
        { href: '/admin/specializations', label: 'Specializations', icon: UsersIcon, tooltip: "Manage system specializations" },
        { href: '/admin/courses', label: 'Courses', icon: BookOpenIcon, tooltip: "Manage academic courses" },
    ];
    const navLinks = userRole === 'ADMIN' ? adminLinks : facultyLinks;

    if (status === 'loading') return null;
    if (status === 'unauthenticated') return null;

    const userName = user?.name ?? user?.email ?? 'User';
    const userInitials = userName?.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase() || '?';

    const toggleNotificationPanel = () => setShowNotificationPanel(p => !p);
    const closeNotificationPanel = () => setShowNotificationPanel(false);
    const updateNotificationCount = (newCount: number) => setUnreadCount(newCount);
    const toggleMobileMenu = () => setIsMobileMenuOpen(p => !p);

    return (
        <header className={`text-white sticky top-0 z-50 transition-colors duration-300 ease-in-out 
                           ${scrolled ? 'bg-spc-blue-main shadow-xl' // Solid color when scrolled
                                     : 'bg-spc-blue-light shadow-md'}`}> {/* Lighter solid color or your gradient when not scrolled */}
                                     {/* Option: Use gradient when not scrolled: 'bg-gradient-to-r from-spc-blue-main to-spc-blue-light shadow-md' */}
            <nav className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div className="flex h-16 items-center justify-between">
                    <div className="flex items-center">
                        <Link
                            href={userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard'}
                            className="flex-shrink-0 flex items-center gap-2.5 group"
                        >
                            <div className="p-0.5 bg-white/20 rounded-full group-hover:bg-white/30 transition-all duration-300 transform group-hover:scale-110">
                                <Image src="/smls-logo.png" alt="SMLS Logo" width={36} height={36} className="h-9 w-9" />
                            </div>
                            <span className="font-semibold text-lg text-white hidden sm:inline group-hover:text-sky-100 transition-colors duration-300">
                                SMLS-SFMS
                            </span>
                        </Link>
                    </div>

                    <div className="hidden md:flex md:items-center md:space-x-1 lg:space-x-1.5">
                        {navLinks.map((linkItem) => (
                            <NavLinkWithTooltip key={linkItem.href} link={linkItem} />
                        ))}
                    </div>

                    <div className="flex items-center">
                        <div className="ml-3 flex items-center md:ml-4 gap-2.5">
                            <div className="relative">
                                <button
                                    ref={notificationButtonRef}
                                    onClick={toggleNotificationPanel}
                                    type="button"
                                    className="relative flex-shrink-0 rounded-full p-1.5 text-sky-100 hover:bg-spc-blue-darker/50 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-spc-blue-main transition-all duration-200 transform hover:scale-110"
                                    title="Notifications"
                                >
                                    <span className="sr-only">View notifications</span>
                                    <BellIcon className="h-5 w-5" aria-hidden="true" />
                                    {!isLoadingNotifications && unreadCount > 0 && (
                                        <span className="absolute -top-0.5 -right-0.5 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white ring-1 ring-white animate-pulse">
                                            {unreadCount > 9 ? '9+' : unreadCount}
                                        </span>
                                    )}
                                </button>
                                {showNotificationPanel && (
                                    <div ref={notificationPanelRef} className="absolute right-0 mt-2.5 z-50 animate-fade-in">
                                        <NotificationPanel
                                            onClose={closeNotificationPanel}
                                            onUpdateCount={updateNotificationCount}
                                        />
                                    </div>
                                )}
                            </div>

                            <div className="hidden md:flex items-center gap-2 cursor-default group" title={userName}>
                                <span className="relative inline-flex items-center justify-center h-8 w-8 rounded-full bg-spc-blue-darker/30 text-sky-200 text-xs font-semibold ring-1 ring-white/20 group-hover:ring-white/50 group-hover:bg-spc-blue-darker/60 transition-all duration-200">
                                    {userInitials}
                                </span>
                                <span className="text-sm font-medium text-sky-100 hidden lg:inline group-hover:text-white transition-colors duration-200">
                                    {userName}
                                </span>
                            </div>

                            {/* Corrected Logout Button - visible on md+ */}
                            <button
                                onClick={handleSignOut}
                                type="button"
                                className="hidden md:flex flex-shrink-0 items-center justify-center rounded-md p-1.5 text-sky-100 hover:bg-spc-blue-darker/50 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-spc-blue-main transition-all duration-200 transform hover:scale-110"
                                title="Sign Out"
                            >
                                <span className="sr-only">Sign Out</span>
                                <ArrowLeftStartOnRectangleIcon className="h-5 w-5" aria-hidden="true" />
                            </button>

                            <div className="md:hidden">
                                <button
                                    ref={mobileMenuButtonRef}
                                    onClick={toggleMobileMenu}
                                    type="button"
                                    className="relative inline-flex items-center justify-center rounded-md p-1.5 text-sky-100 hover:bg-spc-blue-darker/50 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white transition-all duration-200"
                                    aria-controls="mobile-menu"
                                    aria-expanded={isMobileMenuOpen}
                                >
                                    <span className="sr-only">Open main menu</span>
                                    {isMobileMenuOpen ? (
                                        <XMarkIcon className="block h-6 w-6 transition-transform duration-300 ease-in-out transform group-hover:rotate-90" aria-hidden="true" />
                                    ) : (
                                        <Bars3Icon className="block h-6 w-6 transition-transform duration-300 ease-in-out" aria-hidden="true" />
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>

            <div
                ref={mobileMenuPanelRef}
                className={`md:hidden transition-all duration-500 ease-out overflow-hidden ${isMobileMenuOpen ? 'max-h-[500px] opacity-100 py-2' : 'max-h-0 opacity-0 py-0'}`}
                id="mobile-menu"
            >
                <div className="space-y-1 px-2 pb-3 pt-2 bg-spc-blue-darker/80 backdrop-blur-sm shadow-inner rounded-b-md">
                    {navLinks.map((linkItem, index) => (
                        <div
                            key={linkItem.href}
                            style={{
                                transition: `opacity 300ms ease-out ${index * 70 + (isMobileMenuOpen ? 100 : 0)}ms, transform 300ms ease-out ${index * 70 + (isMobileMenuOpen ? 100 : 0)}ms`,
                                transform: isMobileMenuOpen ? 'translateX(0)' : 'translateX(-20px)',
                                opacity: isMobileMenuOpen ? 1 : 0,
                            }}
                        >
                            <NavLinkWithTooltip
                                link={linkItem}
                                isMobile={true}
                                onClick={() => setIsMobileMenuOpen(false)}
                            />
                        </div>
                    ))}
                     <div
                        style={{
                            transition: `opacity 300ms ease-out ${navLinks.length * 70 + (isMobileMenuOpen ? 100 : 0)}ms, transform 300ms ease-out ${navLinks.length * 70 + (isMobileMenuOpen ? 100 : 0)}ms`,
                            transform: isMobileMenuOpen ? 'translateX(0)' : 'translateX(-20px)',
                            opacity: isMobileMenuOpen ? 1 : 0,
                        }}
                    >
                        <button
                            onClick={() => { handleSignOut(); setIsMobileMenuOpen(false); }}
                            className="flex w-full items-center gap-2 rounded-md px-3 py-2 text-base font-medium text-white hover:bg-spc-blue-light/70 transition-all duration-200"
                        >
                            <ArrowLeftStartOnRectangleIcon className="h-5 w-5 text-sky-200" />
                            Sign Out
                        </button>
                    </div>
                </div>
            </div>
        </header>
    );
}
--- END FILE: src\components\ui\Header.tsx ---

--- START FILE: src\components\ui\NotificationPanel.tsx ---
// src/components/ui/NotificationPanel.tsx
'use client';

import React, { useState, useEffect, useTransition } from 'react';
import Link from 'next/link';
import { BellAlertIcon, CheckCircleIcon, XCircleIcon, InboxIcon } from '@heroicons/react/24/outline';
import type { Notification } from '@/generated/prisma';
import {
    getMyNotifications,
    markNotificationAsRead,
    markAllNotificationsAsRead
} from '@/lib/actions/notificationActions';

interface NotificationPanelProps {
    onClose: () => void; // Function to close the panel
    onUpdateCount: (newCount: number) => void; // Function to update count in header
}

// Helper to format time difference (simple version)
function timeAgo(date: Date | string): string {
    const seconds = Math.floor((new Date().getTime() - new Date(date).getTime()) / 1000);
    let interval = seconds / 31536000;
    if (interval > 1) return Math.floor(interval) + "y ago";
    interval = seconds / 2592000;
    if (interval > 1) return Math.floor(interval) + "mo ago";
    interval = seconds / 86400;
    if (interval > 1) return Math.floor(interval) + "d ago";
    interval = seconds / 3600;
    if (interval > 1) return Math.floor(interval) + "h ago";
    interval = seconds / 60;
    if (interval > 1) return Math.floor(interval) + "m ago";
    return Math.floor(seconds) + "s ago";
}


export default function NotificationPanel({ onClose, onUpdateCount }: NotificationPanelProps) {
    const [notifications, setNotifications] = useState<Notification[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition(); // For mark as read actions

    const fetchNotifications = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await getMyNotifications();
            if (response.success && response.notifications) {
                setNotifications(response.notifications);
                // Update count in header immediately after fetching
                onUpdateCount(response.unreadCount ?? 0);
            } else {
                setError(response.error || 'Failed to load notifications.');
                setNotifications([]);
                 onUpdateCount(0);
            }
        } catch (err) {
            setError('An unexpected error occurred.');
            setNotifications([]);
             onUpdateCount(0);
        } finally {
            setIsLoading(false);
        }
    };

    // Fetch notifications when the panel mounts
    useEffect(() => {
        fetchNotifications();
        // Optional: Set up polling or WebSocket connection for real-time updates
        // return () => { /* cleanup polling/WebSocket */ };
    }, []); // Run only once on mount

    const handleMarkOneRead = (notificationId: string) => {
        startTransition(async () => {
            const result = await markNotificationAsRead(notificationId);
            if (result.success) {
                // Refresh the list to show updated read status and count
                fetchNotifications();
            } else {
                // Handle error (e.g., show a temporary message)
                console.error("Failed to mark notification as read:", result.error);
            }
        });
    };

    const handleMarkAllRead = () => {
        startTransition(async () => {
            const result = await markAllNotificationsAsRead();
            if (result.success) {
                // Refresh the list
                fetchNotifications();
            } else {
                // Handle error
                console.error("Failed to mark all notifications as read:", result.error);
            }
        });
    };

    return (
        // Panel container - positioned absolutely by the Header component
        <div className="absolute right-0 mt-2 w-80 sm:w-96 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50 flex flex-col max-h-[70vh]">
            {/* Panel Header */}
            <div className="flex justify-between items-center px-4 py-3 border-b border-gray-200 flex-shrink-0">
                <h3 className="text-base font-semibold text-gray-800 flex items-center gap-2">
                    <BellAlertIcon className="h-5 w-5 text-indigo-600" />
                    Notifications
                </h3>
                <button
                    onClick={handleMarkAllRead}
                    disabled={isPending || notifications.filter(n => !n.isRead).length === 0}
                    className="text-xs font-medium text-indigo-600 hover:text-indigo-800 disabled:text-gray-400 disabled:cursor-not-allowed"
                    title="Mark all as read"
                >
                    Mark all read
                </button>
            </div>
            {/* Notification List Area (Scrollable) */}
            <div className="flex-grow overflow-y-auto">
                {isLoading ? (
                    <p className="p-4 text-sm text-center text-gray-500">Loading...</p>
                ) : error ? (
                    <p className="p-4 text-sm text-center text-red-600">{error}</p>
                ) : notifications.length === 0 ? (
                    <div className="p-6 text-center text-gray-500">
                        <InboxIcon className="h-10 w-10 mx-auto text-gray-300 mb-2"/>
                        <p className="text-sm">No notifications yet.</p>
                    </div>
                ) : (
                    <ul role="list" className="divide-y divide-gray-100">
                        {notifications.map((notification) => (
                            <li
                                key={notification.id}
                                className={`px-4 py-3 group transition-colors duration-150 ${
                                    notification.isRead ? 'bg-white' : 'bg-indigo-50 hover:bg-indigo-100'
                                }`}
                            >
                                <div className="flex items-start justify-between gap-2">
                                    <div className="flex-1 min-w-0">
                                        {/* Message Content */}
                                        <p className={`text-sm ${notification.isRead ? 'text-gray-600' : 'text-gray-800 font-medium'}`}>
                                            {notification.message}
                                        </p>
                                        {/* Time Ago */}
                                        <p className={`mt-1 text-xs ${notification.isRead ? 'text-gray-400' : 'text-indigo-500'}`}>
                                            {timeAgo(notification.createdAt)}
                                        </p>
                                        {/* Optional Link */}
                                        {notification.link && (
                                            <Link href={notification.link} onClick={onClose} className="mt-1 text-xs font-semibold text-blue-600 hover:underline block">
                                                View Details
                                            </Link>
                                        )}
                                    </div>
                                    {/* Mark as Read Button (only if unread) */}
                                    {!notification.isRead && (
                                        <button
                                            onClick={() => handleMarkOneRead(notification.id)}
                                            disabled={isPending}
                                            className="mt-1 p-1 rounded-full text-gray-400 hover:text-green-600 hover:bg-green-100 focus:outline-none focus:ring-1 focus:ring-green-500 disabled:opacity-50 opacity-0 group-hover:opacity-100 transition-opacity"
                                            title="Mark as read"
                                        >
                                            <CheckCircleIcon className="h-4 w-4" />
                                        </button>
                                    )}
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
            {/* Panel Footer (Optional) */}
            {/* <div className="px-4 py-2 border-t border-gray-200 bg-gray-50 text-center flex-shrink-0">
                <Link href="/notifications" onClick={onClose} className="text-sm font-medium text-indigo-600 hover:text-indigo-800">
                    View all notifications
                </Link>
            </div> */}
        </div>
    );
}
--- END FILE: src\components\ui\NotificationPanel.tsx ---

--- START FILE: src\hooks\useProfileDataManagement.ts ---
// src/hooks/useProfileDataManagement.ts
'use client';

import { useState, useEffect, useCallback, useTransition, ChangeEvent } from 'react';
import { useSession } from 'next-auth/react';
import { v4 as uuidv4 } from 'uuid';
import { getMyProfileData, updateMyProfile } from '@/lib/userActions';
import type {
    UserProfilePageData,
    EditableProfilePageData,
    ProfileUser,
    TempSocialMediaLink,
    EditableCvItem,
    CategoryKey,
    TempCommon,
    TempAcademicQualification,
    TempProfessionalLicense,
    TempWorkExperience,
    TempProfessionalAffiliation,
    TempAwardRecognition,
    TempProfessionalDevelopment,
    TempCommunityInvolvement,
    TempPublication,
    TempConferencePresentation,
} from '@/types';
import type { ApprovalStatus } from '@/generated/prisma';
import { defaultTempSocialMediaLink, categoryMetadata } from '@/lib/profileUtils';

interface UseProfileDataManagementReturn extends EditableProfilePageData {
    profileData: UserProfilePageData | null;
    isLoading: boolean;
    pageError: string | null;
    editError: string | null;
    editSuccess: string | null;
    isEditingPage: boolean;
    editingItemId: string | null;
    isSaving: boolean;
    changedItemIds: Set<string>;

    fetchProfileData: (showLoadingIndicator?: boolean) => Promise<void>;
    handleEditToggle: () => void;
    handleSaveChanges: () => Promise<void>;

    handleUserDetailChange: (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
    handleUserDateChange: (name: 'dateOfBirth', value: string) => void;

    selectedProfileImageFile: File | null;
    profileImagePreview: string | null;
    handleProfileImageSelect: (event: ChangeEvent<HTMLInputElement>) => void;

    handleAddSocialMediaLink: () => void;
    handleSocialMediaLinkChange: (index: number, field: keyof Pick<TempSocialMediaLink, 'platform' | 'url'>, value: string) => void;
    handleDeleteSocialMediaLink: (index: number) => void;

    handleAddItemLocally: (categoryKey: CategoryKey) => void;
    handleDeleteItemLocally: (categoryKey: CategoryKey, itemId: string) => void;
    handleStartEditingCvItem: (categoryKey: CategoryKey, itemId: string) => void;
    handleCancelCvItemEdit: (categoryKey: CategoryKey, itemId: string) => void;
    handleSaveCvItemEdit: (itemId: string) => void;
    handleCvItemInputChange: (categoryKey: CategoryKey, itemId: string, fieldName: string, value: any) => void;
    handleCvItemFileChange: (categoryKey: CategoryKey, itemId: string, file: File | null | undefined) => void;

    visibleCategories: Set<CategoryKey>;
    setVisibleCategories: React.Dispatch<React.SetStateAction<Set<CategoryKey>>>;
    showCategoryDropdown: boolean;
    setShowCategoryDropdown: React.Dispatch<React.SetStateAction<boolean>>;
    handleAddCategoryToView: (categoryKey: CategoryKey) => void;
}

export function useProfileDataManagement(): UseProfileDataManagementReturn {
    const { data: session, status: sessionStatus } = useSession();
    const currentUserId = (session?.user as any)?.id;

    const [profileData, setProfileData] = useState<UserProfilePageData | null>(null);
    const [editableData, setEditableData] = useState<EditableProfilePageData | null>(null);
    const [isLoading, setIsLoading] = useState(true); // Start true for initial load
    const [pageError, setPageError] = useState<string | null>(null);
    const [editError, setEditError] = useState<string | null>(null);
    const [editSuccess, setEditSuccess] = useState<string | null>(null);
    const [isEditingPage, setIsEditingPage] = useState(false);
    const [editingItemId, setEditingItemId] = useState<string | null>(null);
    const [originalCvItemData, setOriginalCvItemData] = useState<EditableCvItem | null>(null);
    const [changedItemIds, setChangedItemIds] = useState<Set<string>>(new Set());
    const [isSaving, startSaveTransition] = useTransition();

    const [selectedProfileImageFile, setSelectedProfileImageFile] = useState<File | null>(null);
    const [profileImagePreview, setProfileImagePreview] = useState<string | null>(null);

    const [visibleCategories, setVisibleCategories] = useState<Set<CategoryKey>>(new Set());
    const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);

    const initializeEditableData = useCallback((data: UserProfilePageData) => {
        console.log("initializeEditableData: Called. data.user exists?", !!data.user);
        if (!data.user) {
            setEditableData(null);
            return;
        }
        const clonedUser: Partial<ProfileUser> = structuredClone(data.user);
        const clonedSocialLinks: TempSocialMediaLink[] = (data.user.socialMediaLinks || []).map(link => ({
            ...structuredClone(link),
            id: link.id || `temp-${uuidv4()}`,
            _isNew: false
        }));

        setEditableData({
            user: clonedUser,
            socialMediaLinks: clonedSocialLinks,
            academicQualifications: data.academicQualifications.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            professionalLicenses: data.professionalLicenses.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            workExperiences: data.workExperiences.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            professionalAffiliations: data.professionalAffiliations.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            awardsRecognitions: data.awardsRecognitions.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            professionalDevelopments: data.professionalDevelopments.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            communityInvolvements: data.communityInvolvements.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            publications: data.publications.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
            conferencePresentations: data.conferencePresentations.map(item => ({ ...structuredClone(item), _isNew: false, _selectedFile: null })),
        });
        console.log("initializeEditableData: Finished successfully.");
    }, []);

    const fetchProfileData = useCallback(async (showLoadingIndicator = true) => {
        if (showLoadingIndicator) {
            setIsLoading(true);
            console.log("fetchProfileData: Called. showLoadingIndicator = true. setIsLoading(true).");
        } else {
            console.log("fetchProfileData: Called. showLoadingIndicator = false. Not setting isLoading to true here.");
        }
        setPageError(null); setEditError(null); setEditSuccess(null);

        try {
            const fetchedDataResult = await getMyProfileData();
            console.log("fetchProfileData: getMyProfileData result =", fetchedDataResult);

            if ('error' in fetchedDataResult) {
                setPageError(fetchedDataResult.error || "User data not found.");
                setProfileData(null); setEditableData(null); setVisibleCategories(new Set());
            } else if (!fetchedDataResult.user) {
                setPageError("User data not found in fetched profile.");
                setProfileData(null); setEditableData(null); setVisibleCategories(new Set());
            } else {
                setProfileData(fetchedDataResult);
                initializeEditableData(fetchedDataResult);

                const initialVisible = new Set<CategoryKey>();
                const allCategoryKeys = Object.keys(categoryMetadata) as CategoryKey[];
                allCategoryKeys.forEach(key => {
                    const categoryItems = fetchedDataResult[key] as EditableCvItem[] | undefined;
                    if (categoryItems && categoryItems.length > 0) {
                        initialVisible.add(key);
                    }
                });
                setVisibleCategories(initialVisible);
                setIsEditingPage(false);
                setEditingItemId(null); setOriginalCvItemData(null);
                setChangedItemIds(new Set());
                setSelectedProfileImageFile(null); setProfileImagePreview(null);
            }
        } catch (err: any) {
            setPageError(`Unexpected error fetching profile: ${err.message}`);
            setProfileData(null); setEditableData(null); setVisibleCategories(new Set());
        } finally {
            // ALWAYS set isLoading to false after the fetch attempt
            setIsLoading(false);
            console.log("fetchProfileData: FINALLY block. isLoading ALWAYS set to false.");
        }
    }, [initializeEditableData]);

    const handleDeleteItemLocally = useCallback((categoryKey: CategoryKey, itemId: string) => {
        setEditableData(prev => {
            if (!prev || !(prev[categoryKey] as EditableCvItem[] | undefined)) return prev;
            return { ...prev, [categoryKey]: (prev[categoryKey] as EditableCvItem[]).filter(item => item.id !== itemId) };
        });
        if (editingItemId === itemId) { setEditingItemId(null); setOriginalCvItemData(null); }
        setChangedItemIds(prev => { const newSet = new Set(prev); newSet.delete(itemId); return newSet; });
    }, [editingItemId]);

    const handleCancelCvItemEdit = useCallback((categoryKey: CategoryKey, itemId: string) => {
        if (originalCvItemData && originalCvItemData.id === itemId) {
            setEditableData(prev => {
                if (!prev || !(prev[categoryKey] as EditableCvItem[] | undefined)) return prev;
                const items = prev[categoryKey] as EditableCvItem[];
                const itemIndex = items.findIndex(item => item.id === itemId);
                if (itemIndex !== -1) {
                    const updatedItems = [...items];
                    updatedItems[itemIndex] = originalCvItemData;
                    return { ...prev, [categoryKey]: updatedItems };
                }
                return prev;
            });
            setChangedItemIds(prev => {
                const newSet = new Set(prev);
                if (!(originalCvItemData as TempCommon)._isNew) newSet.delete(itemId);
                return newSet;
            });
        } else if ((editableData?.[categoryKey] as EditableCvItem[] | undefined)?.find(i => i.id === itemId && (i as TempCommon)._isNew)) {
            handleDeleteItemLocally(categoryKey, itemId);
        }
        setEditingItemId(null);
        setOriginalCvItemData(null);
    }, [originalCvItemData, editableData, handleDeleteItemLocally]);


    useEffect(() => {
        console.log("ProfilePage useEffect: Triggered. sessionStatus =", sessionStatus, "currentUserId =", currentUserId, "profileData exists?", !!profileData);

        if (sessionStatus === 'authenticated' && currentUserId) {
            // Fetch data only once when authenticated and user ID is available,
            // and profileData hasn't been loaded yet.
            if (!profileData) { // This implies it's the first load or data was cleared
                console.log("ProfilePage useEffect: Authenticated, no profileData. Calling fetchProfileData.");
                fetchProfileData(true); // showLoadingIndicator true by default, isLoading will be set to true inside.
            } else {
                // Data already loaded, ensure isLoading is false if it's not already.
                // This might happen if the component re-renders for other reasons after data is loaded.
                if (isLoading) setIsLoading(false);
                console.log("ProfilePage useEffect: Authenticated and profileData exists. Ensuring isLoading is false.");
            }
        } else if (sessionStatus === 'unauthenticated') {
            console.log("ProfilePage useEffect: Unauthenticated. Clearing data and setting error.");
            setIsLoading(false);
            setPageError("Access Denied. Please log in.");
            setProfileData(null);
            setEditableData(null);
            setVisibleCategories(new Set());
        } else if (sessionStatus === 'loading') {
            console.log("ProfilePage useEffect: Session is loading. Setting isLoading to true.");
            setIsLoading(true); // Page is loading because session is loading
        }
    }, [sessionStatus, currentUserId, fetchProfileData, profileData, isLoading]); // Added isLoading to dependencies


    const handleEditToggle = useCallback(() => {
        if (isEditingPage) {
            setIsEditingPage(false);
            setEditError(null); setEditSuccess(null);
            setChangedItemIds(new Set());
            setSelectedProfileImageFile(null); setProfileImagePreview(null);
            if (profileData) initializeEditableData(profileData);
            if (editingItemId && originalCvItemData) {
                let categoryOfEditingItem: CategoryKey | null = null;
                const cvCategoryKeys = Object.keys(categoryMetadata) as CategoryKey[];
                for (const catKey of cvCategoryKeys) {
                    if (editableData && (editableData as any)[catKey]?.find((i: EditableCvItem) => i.id === editingItemId)) {
                        categoryOfEditingItem = catKey;
                        break;
                    }
                }
                if (categoryOfEditingItem) {
                    handleCancelCvItemEdit(categoryOfEditingItem, editingItemId);
                }
            }
            setEditingItemId(null); setOriginalCvItemData(null);
        } else {
            if (!profileData || !profileData.user) {
                setPageError("Cannot enter edit mode: Profile data missing."); return;
            }
            setIsEditingPage(true);
            setEditError(null); setEditSuccess(null);
            setSelectedProfileImageFile(null); setProfileImagePreview(null);
            if (profileData) initializeEditableData(profileData);

            const categoriesToMakeVisible = new Set(visibleCategories);
            const allCategoryKeys = Object.keys(categoryMetadata) as CategoryKey[];
            allCategoryKeys.forEach(key => {
                const categoryItems = profileData[key] as EditableCvItem[] | undefined;
                if (categoryItems && categoryItems.length > 0) {
                    categoriesToMakeVisible.add(key);
                }
            });
            setVisibleCategories(categoriesToMakeVisible);
            setEditingItemId(null); setOriginalCvItemData(null);
            setChangedItemIds(new Set());
        }
    }, [isEditingPage, profileData, initializeEditableData, editingItemId, originalCvItemData, visibleCategories, editableData, handleCancelCvItemEdit]);

    const handleUserDetailChange = useCallback((e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setEditableData(prev => {
            if (!prev || !prev.user) return prev;
            return { ...prev, user: { ...prev.user, [name]: value.trim() === '' && !['name', 'email'].includes(name) ? null : value } };
        });
        setChangedItemIds(prev => new Set(prev).add('user_details'));
    }, []);

    const handleUserDateChange = useCallback((name: 'dateOfBirth', value: string) => {
        setEditableData(prev => {
            if (!prev || !prev.user) return prev;
            return { ...prev, user: { ...prev.user, [name]: value ? new Date(value + "T00:00:00Z") : null } };
        });
        setChangedItemIds(prev => new Set(prev).add('user_details'));
    }, []);

    const handleProfileImageSelect = useCallback((event: ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            const MAX_FILE_SIZE = 2 * 1024 * 1024;
            const ALLOWED_TYPES = ['image/png', 'image/jpeg', 'image/jpg'];
            if (file.size > MAX_FILE_SIZE) { alert('Image size exceeds 2MB.'); event.target.value = ''; return; }
            if (!ALLOWED_TYPES.includes(file.type)) { alert('Invalid image type (PNG, JPG, JPEG only).'); event.target.value = ''; return; }
            setSelectedProfileImageFile(file);
            const reader = new FileReader();
            reader.onloadend = () => setProfileImagePreview(reader.result as string);
            reader.readAsDataURL(file);
            setChangedItemIds(prev => new Set(prev).add('user_profileImage'));
        }
    }, []);

    const handleAddSocialMediaLink = useCallback(() => {
        if (!currentUserId) return;
        setEditableData(prev => {
            if (!prev) return prev;
            const newLink = defaultTempSocialMediaLink(currentUserId);
            return { ...prev, socialMediaLinks: [...(prev.socialMediaLinks || []), newLink] };
        });
        setChangedItemIds(prev => new Set(prev).add('user_socialMediaLinks'));
    }, [currentUserId]);

    const handleSocialMediaLinkChange = useCallback((index: number, field: keyof Pick<TempSocialMediaLink, 'platform' | 'url'>, value: string) => {
        setEditableData(prev => {
            if (!prev || !prev.socialMediaLinks || !prev.socialMediaLinks[index]) return prev;
            const updatedLinks = prev.socialMediaLinks.map((link, i) => i === index ? { ...link, [field]: value } : link);
            return { ...prev, socialMediaLinks: updatedLinks };
        });
        setChangedItemIds(prev => new Set(prev).add('user_socialMediaLinks'));
    }, []);

    const handleDeleteSocialMediaLink = useCallback((index: number) => {
        setEditableData(prev => {
            if (!prev || !prev.socialMediaLinks) return prev;
            return { ...prev, socialMediaLinks: prev.socialMediaLinks.filter((_, i) => i !== index) };
        });
        setChangedItemIds(prev => new Set(prev).add('user_socialMediaLinks'));
    }, []);

    const handleAddItemLocally = useCallback((categoryKey: CategoryKey) => {
        if (!editableData || !currentUserId) return;
        const newItemId = uuidv4();
        let placeholderItem: EditableCvItem;
        const now = new Date();
        const defaultStatus: ApprovalStatus = 'PENDING';

        switch (categoryKey) {
            case 'academicQualifications': placeholderItem = { id: newItemId, degree: '', institution: '', program: '', yearCompleted: now.getFullYear(), diplomaFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempAcademicQualification; break;
            case 'professionalLicenses': placeholderItem = { id: newItemId, examination: '', licenseNumber: '', monthYear: '', expiration: new Date(now.getFullYear() + 1, now.getMonth(), now.getDate()), licenseFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalLicense; break;
            case 'workExperiences': placeholderItem = { id: newItemId, institution: '', position: '', natureOfWork: null, inclusiveYears: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempWorkExperience; break;
            case 'professionalAffiliations': placeholderItem = { id: newItemId, organization: '', position: null, inclusiveYears: '', membershipProofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalAffiliation; break;
            case 'awardsRecognitions': placeholderItem = { id: newItemId, awardName: '', awardingBody: '', yearReceived: now.getFullYear(), certificateUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempAwardRecognition; break;
            case 'professionalDevelopments': placeholderItem = { id: newItemId, title: '', organizer: '', dateLocation: '', certificateFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalDevelopment; break;
            case 'communityInvolvements': placeholderItem = { id: newItemId, engagementTitle: '', role: '', locationDate: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempCommunityInvolvement; break;
            case 'publications': placeholderItem = { id: newItemId, researchTitle: '', journal: '', datePublished: now, doiLink: null, pdfUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempPublication; break;
            case 'conferencePresentations': placeholderItem = { id: newItemId, paperTitle: '', eventName: '', dateLocation: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempConferencePresentation; break;
            default:
                const exhaustiveCheck: never = categoryKey; // Ensures all cases are handled
                console.error(`Add handler not implemented for category: ${exhaustiveCheck}`); return;
        }

        setEditableData(prev => {
            if (!prev) return null;
            const currentCategoryItems = (prev[categoryKey] as EditableCvItem[] | undefined) || [];
            return { ...prev, [categoryKey]: [placeholderItem, ...currentCategoryItems] };
        });
        setEditingItemId(newItemId);
        setOriginalCvItemData(null);
        setChangedItemIds(prev => new Set(prev).add(newItemId));
    }, [editableData, currentUserId]);


    const handleStartEditingCvItem = useCallback((categoryKey: CategoryKey, itemId: string) => {
        if (!editableData || !(editableData[categoryKey] as EditableCvItem[] | undefined)) return;
        const itemToEdit = (editableData[categoryKey] as EditableCvItem[]).find(item => item.id === itemId);
        if (itemToEdit) {
            setOriginalCvItemData(structuredClone(itemToEdit));
            setEditingItemId(itemId);
            setEditError(null);
        }
    }, [editableData]);

    const handleSaveCvItemEdit = useCallback((itemId: string) => {
        setEditingItemId(null);
        setOriginalCvItemData(null);
    }, []);

    const handleCvItemInputChange = useCallback((categoryKey: CategoryKey, itemId: string, fieldName: string, value: any) => {
        setEditableData(prev => {
            if (!prev || !(prev[categoryKey] as EditableCvItem[] | undefined)) return prev;
            const items = prev[categoryKey] as EditableCvItem[];
            const itemIndex = items.findIndex(item => item.id === itemId);
            if (itemIndex === -1) return prev;

            const updatedItems = [...items];
            const updatedItem = { ...updatedItems[itemIndex], [fieldName]: value, updatedAt: new Date() };

            if (['yearCompleted', 'yearReceived'].includes(fieldName)) {
                const numVal = parseInt(value, 10);
                (updatedItem as any)[fieldName] = isNaN(numVal) ? null : numVal;
            } else if (typeof value === 'string' && value.trim() === '' && !['degree', 'examination', 'position', 'title', 'awardName', 'researchTitle', 'paperTitle', 'institution', 'program', 'licenseNumber', 'monthYear', 'inclusiveYears', 'organization', 'organizer', 'dateLocation', 'engagementTitle', 'role', 'journal' ].includes(fieldName)) {
                 (updatedItem as any)[fieldName] = null;
            }

            updatedItems[itemIndex] = updatedItem;
            return { ...prev, [categoryKey]: updatedItems };
        });
        setChangedItemIds(prev => new Set(prev).add(itemId));
    }, []);

    const handleCvItemFileChange = useCallback((categoryKey: CategoryKey, itemId:string, file: File | null | undefined) => {
        setEditableData(prev => {
            if (!prev || !(prev[categoryKey] as EditableCvItem[] | undefined)) return prev;
            const items = prev[categoryKey] as EditableCvItem[];
            const itemIndex = items.findIndex(item => item.id === itemId);
            if (itemIndex === -1) return prev;

            const updatedItems = [...items];
            (updatedItems[itemIndex] as any)._selectedFile = file ?? null;
            (updatedItems[itemIndex] as any).updatedAt = new Date();
            return { ...prev, [categoryKey]: updatedItems };
        });
        setChangedItemIds(prev => new Set(prev).add(itemId));
    }, []);

    const handleAddCategoryToView = useCallback((categoryKey: CategoryKey) => {
        setVisibleCategories(prev => new Set(prev).add(categoryKey));
        setShowCategoryDropdown(false);
    }, []);

    const handleSaveChanges = useCallback(async () => {
        if (!editableData || !currentUserId) {
            setEditError("No data to save or user not identified.");
            return;
        }
        if (editingItemId !== null) {
            setEditError("Please save or cancel the current item edit before saving all changes.");
            return;
        }
        setEditError(null); setEditSuccess(null);

        startSaveTransition(async () => {
            const formData = new FormData();
            let actualChangesMade = false;

            if (selectedProfileImageFile) {
                formData.append('user_profileImageFile', selectedProfileImageFile);
                actualChangesMade = true;
            }

            if (changedItemIds.has('user_details') || selectedProfileImageFile) {
                if (editableData.user) {
                    const userPayload = { ...editableData.user };
                    delete (userPayload as any).socialMediaLinks;
                    delete (userPayload as any).profileImageUrl;
                    formData.append('user_details_json', JSON.stringify(userPayload));
                    actualChangesMade = true;
                }
            }

            if (changedItemIds.has('user_socialMediaLinks') && editableData.socialMediaLinks) {
                 const socialLinksData = editableData.socialMediaLinks.map(link => {
                    const { _isNew, ...rest } = link;
                    return { ...rest, _isNew: !!_isNew, id: link.id.startsWith('temp-') ? undefined : link.id };
                });
                formData.append('socialMediaLinks_json', JSON.stringify(socialLinksData));
                actualChangesMade = true;
            }

            const cvCategoryKeys = Object.keys(categoryMetadata) as CategoryKey[];
            cvCategoryKeys.forEach(categoryKey => {
                const categoryData = editableData[categoryKey] as EditableCvItem[] | undefined;
                const originalCategoryData = profileData?.[categoryKey] as EditableCvItem[] | undefined;
                if (!categoryData) return;

                const itemsToSend: Partial<EditableCvItem & { _isDeleted?: boolean }>[] = [];
                const currentEditableIds = new Set(categoryData.map(item => item.id));

                categoryData.forEach(item => {
                    if ((item as TempCommon)._isNew || changedItemIds.has(item.id)) {
                        itemsToSend.push(item);
                        actualChangesMade = true;
                    }
                });

                originalCategoryData?.forEach(origItem => {
                    if (!currentEditableIds.has(origItem.id)) {
                        itemsToSend.push({ id: origItem.id, _isDeleted: true } as any);
                        actualChangesMade = true;
                    }
                });

                if (itemsToSend.length > 0) {
                    const dataForJson = itemsToSend.map(item => {
                        const { _selectedFile, ...rest } = item as any;
                        const finalRest: any = { ...rest };
                        if ((item as TempCommon)._isNew) finalRest._isNew = true;
                        if ((item as any)._isDeleted) finalRest._isDeleted = true;
                        Object.keys(finalRest).forEach(key => {
                            if (finalRest[key] instanceof Date) {
                                finalRest[key] = (finalRest[key] as Date).toISOString();
                            }
                        });
                        return finalRest;
                    });
                    formData.append(`${categoryKey}_json`, JSON.stringify(dataForJson));

                    itemsToSend.forEach(item => {
                        if (item && '_selectedFile' in item && (item as any)._selectedFile instanceof File) {
                            formData.append(`${categoryKey}_file_${item.id}`, (item as any)._selectedFile);
                        }
                    });
                }
            });

            if (!actualChangesMade) {
                setEditSuccess("No changes detected to save.");
                setIsEditingPage(false);
                setSelectedProfileImageFile(null); setProfileImagePreview(null);
                return;
            }

            try {
                const result = await updateMyProfile(formData);
                if (result.success) {
                    setEditSuccess("Profile updated successfully!");
                    setIsEditingPage(false);
                    await fetchProfileData(false); // Call with false to avoid redundant setIsLoading(true)
                } else {
                    setEditError(result.error || "Failed to save profile changes.");
                }
            } catch (err: any) {
                setEditError(err.message || "An unexpected error occurred during save.");
            }
        });
    }, [editableData, currentUserId, editingItemId, selectedProfileImageFile, changedItemIds, profileData, fetchProfileData]);

    return {
        profileData,
        user: editableData?.user ?? null,
        academicQualifications: editableData?.academicQualifications ?? [],
        professionalLicenses: editableData?.professionalLicenses ?? [],
        workExperiences: editableData?.workExperiences ?? [],
        professionalAffiliations: editableData?.professionalAffiliations ?? [],
        awardsRecognitions: editableData?.awardsRecognitions ?? [],
        professionalDevelopments: editableData?.professionalDevelopments ?? [],
        communityInvolvements: editableData?.communityInvolvements ?? [],
        publications: editableData?.publications ?? [],
        conferencePresentations: editableData?.conferencePresentations ?? [],
        socialMediaLinks: editableData?.socialMediaLinks ?? [],
        isLoading,
        pageError,
        editError,
        editSuccess,
        isEditingPage,
        editingItemId,
        isSaving,
        changedItemIds,
        fetchProfileData,
        handleEditToggle,
        handleSaveChanges,
        handleUserDetailChange,
        handleUserDateChange,
        selectedProfileImageFile,
        profileImagePreview,
        handleProfileImageSelect,
        handleAddSocialMediaLink,
        handleSocialMediaLinkChange,
        handleDeleteSocialMediaLink,
        handleAddItemLocally,
        handleDeleteItemLocally,
        handleStartEditingCvItem,
        handleCancelCvItemEdit,
        handleSaveCvItemEdit,
        handleCvItemInputChange,
        handleCvItemFileChange,
        visibleCategories,
        setVisibleCategories,
        showCategoryDropdown,
        setShowCategoryDropdown,
        handleAddCategoryToView,
    };
}
--- END FILE: src\hooks\useProfileDataManagement.ts ---

--- START FILE: src\lib\actions\approvalActions.ts ---
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../app/api/auth/[...nextauth]/route';
import prisma from '../prisma';
import { revalidatePath } from 'next/cache';
import type { ItemType } from '../../types';
import { Role, ApprovalStatus, type Prisma } from '../../generated/prisma/client';

// Helper: Get Prisma Model Delegate
function getPrismaModel(tx: Prisma.TransactionClient, itemType: ItemType) {
    const modelMap: Record<ItemType, any> = {
        academicQualification: tx.academicQualification,
        professionalLicense: tx.professionalLicense,
        workExperience: tx.workExperience,
        professionalAffiliation: tx.professionalAffiliation,
        awardRecognition: tx.awardRecognition,
        professionalDevelopment: tx.professionalDevelopment,
        communityInvolvement: tx.communityInvolvement,
        publication: tx.publication,
        conferencePresentation: tx.conferencePresentation,
    };
    const model = modelMap[itemType];
    if (!model) {
        throw new Error(`Invalid item type provided: ${itemType}`);
    }
    return model;
}

// Helper to get item title/name for notification message
function getItemDisplayTitleForNotification(item: any, itemType: ItemType): string {
    // Use optional chaining and nullish coalescing for safety
    switch (itemType) {
        case 'academicQualification': return item?.degree ?? `Qualification`;
        case 'professionalLicense': return item?.examination ?? `License`;
        case 'workExperience': return item?.position ?? `Work Experience`;
        case 'professionalAffiliation': return item?.organization ?? `Affiliation`;
        case 'awardRecognition': return item?.awardName ?? `Award/Recognition`;
        case 'professionalDevelopment': return item?.title ?? `Development`;
        case 'communityInvolvement': return item?.engagementTitle ?? `Involvement`;
        case 'publication': return item?.researchTitle ?? `Publication`;
        case 'conferencePresentation': return item?.paperTitle ?? `Presentation`;
        default: return `Item (${itemType})`;
    }
}

// --- Action: Get Pending Submissions ---
export async function getPendingSubmissions() {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized', pendingItems: [] };
    }

    try {
        const itemTypes: ItemType[] = [
            'academicQualification', 'professionalLicense', 'workExperience',
            'professionalAffiliation', 'awardRecognition', 'professionalDevelopment',
            'communityInvolvement', 'publication', 'conferencePresentation'
        ];

        let allPendingItems: any[] = [];

        for (const itemType of itemTypes) {
            const modelKey = itemType;
            const model = (prisma as any)[modelKey];

            if (model && typeof model.findMany === 'function') {
                const pending = await model.findMany({
                    where: { status: 'PENDING' },
                    include: {
                        user: { select: { id: true, name: true, email: true } }
                    },
                    orderBy: { createdAt: 'asc' }
                });
                allPendingItems = allPendingItems.concat(pending.map((item: any) => ({ ...item, itemType })));
            } else {
                console.warn(`Model or findMany not found for itemType: ${itemType}`);
            }
        }
        return { success: true, pendingItems: allPendingItems };
    } catch (error: any) {
        console.error("Error fetching pending submissions:", error);
        return { success: false, error: 'Failed to fetch pending items.', pendingItems: [] };
    }
}


// --- Action: Approve Submission ---
export async function approveSubmission(itemId: string, itemType: ItemType) {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;
    const adminName = session?.user?.name ?? session?.user?.email ?? 'Administrator';

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized' };
    }

    try {
        let facultyUserId: string | null = null;

        await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
            const model = getPrismaModel(tx, itemType);

            // Step 1: Update the item status
            const updatedItemMeta = await model.update({
                where: { id: itemId },
                data: {
                    status: ApprovalStatus.APPROVED,
                    rejectionReason: null,
                },
                // *** Select only the userId needed for revalidation/notification target ***
                select: {
                    userId: true,
                 }
            });

            if (!updatedItemMeta || !updatedItemMeta.userId) {
                // If update failed or didn't return userId, throw error to rollback
                throw new Error(`Failed to update item ${itemId} or retrieve userId.`);
            }
            facultyUserId = updatedItemMeta.userId;

            // Step 2: Fetch minimal data needed for the notification title *after* update
            // Select only the field most likely to contain the title/name
            let selectForTitle: any = { id: true }; // Always select id for safety
            switch (itemType) {
                case 'academicQualification': selectForTitle.degree = true; break;
                case 'professionalLicense': selectForTitle.examination = true; break;
                case 'workExperience': selectForTitle.position = true; break;
                case 'professionalAffiliation': selectForTitle.organization = true; break;
                case 'awardRecognition': selectForTitle.awardName = true; break;
                case 'professionalDevelopment': selectForTitle.title = true; break;
                case 'communityInvolvement': selectForTitle.engagementTitle = true; break;
                case 'publication': selectForTitle.researchTitle = true; break;
                case 'conferencePresentation': selectForTitle.paperTitle = true; break;
            }

            const itemDetailsForNotification = await model.findUnique({
                where: { id: itemId },
                select: selectForTitle,
            });

            const itemTitle = itemDetailsForNotification
                ? getItemDisplayTitleForNotification(itemDetailsForNotification, itemType)
                : `Item (${itemType})`; // Fallback title

            // Step 3: Create Notification for Faculty
            const message = `Your submission "${itemTitle}" has been approved by ${adminName}.`;
            console.log(`Creating approval notification for user ${facultyUserId}: "${message}"`);
            await tx.notification.create({
                data: {
                    userId: facultyUserId!, // facultyUserId is guaranteed to be non-null here
                    message: message,
                    link: '/profile'
                }
            });
        }); // End Transaction

        // Revalidate paths after successful transaction
        revalidatePath('/admin/approvals');
        if (facultyUserId) {
            revalidatePath(`/profile`);
        }

        console.log(`Approved ${itemType} with ID: ${itemId}`);
        return { success: true };

    } catch (error: any) {
        console.error(`Error approving ${itemType} (${itemId}):`, error);
        // Provide a more generic error message to the frontend
        return { success: false, error: `Failed to approve item. Please check server logs.` };
    }
}

// --- Action: Reject Submission ---
export async function rejectSubmission(itemId: string, itemType: ItemType, reason: string) {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;
    const adminName = session?.user?.name ?? session?.user?.email ?? 'Administrator';

    if (userRole !== 'ADMIN') { return { success: false, error: 'Unauthorized' }; }
    if (!reason || reason.trim() === '') { return { success: false, error: 'Rejection reason cannot be empty.' }; }

    try {
        let facultyUserId: string | null = null;

        await prisma.$transaction(async (tx: Prisma.TransactionClient) => {
            const model = getPrismaModel(tx, itemType);

            // Step 1: Update the item status and reason
            const updatedItemMeta = await model.update({
                where: { id: itemId },
                data: {
                    status: ApprovalStatus.REJECTED,
                    rejectionReason: reason.trim(),
                },
                 // *** Select only the userId needed for revalidation/notification target ***
                 select: {
                    userId: true,
                 }
            });

            if (!updatedItemMeta || !updatedItemMeta.userId) {
                 throw new Error(`Failed to update item ${itemId} or retrieve userId.`);
            }
            facultyUserId = updatedItemMeta.userId;

            // Step 2: Fetch minimal data needed for the notification title *after* update
            let selectForTitle: any = { id: true };
             switch (itemType) {
                case 'academicQualification': selectForTitle.degree = true; break;
                case 'professionalLicense': selectForTitle.examination = true; break;
                case 'workExperience': selectForTitle.position = true; break;
                case 'professionalAffiliation': selectForTitle.organization = true; break;
                case 'awardRecognition': selectForTitle.awardName = true; break;
                case 'professionalDevelopment': selectForTitle.title = true; break;
                case 'communityInvolvement': selectForTitle.engagementTitle = true; break;
                case 'publication': selectForTitle.researchTitle = true; break;
                case 'conferencePresentation': selectForTitle.paperTitle = true; break;
            }
            const itemDetailsForNotification = await model.findUnique({
                where: { id: itemId },
                select: selectForTitle,
            });
            const itemTitle = itemDetailsForNotification
                ? getItemDisplayTitleForNotification(itemDetailsForNotification, itemType)
                : `Item (${itemType})`; // Fallback title


            // Step 3: Create Notification for Faculty
            const message = `Your submission "${itemTitle}" was rejected by ${adminName}. Reason: ${reason.trim()}`;
            console.log(`Creating rejection notification for user ${facultyUserId}: "${message}"`);
            await tx.notification.create({
                data: {
                    userId: facultyUserId!, // facultyUserId is guaranteed to be non-null here
                    message: message,
                    link: '/profile'
                }
            });
        }); // End Transaction

        // Revalidate paths after successful transaction
        revalidatePath('/admin/approvals');
        if (facultyUserId) {
            revalidatePath(`/profile`);
        }

        console.log(`Rejected ${itemType} with ID: ${itemId}`);
        return { success: true };

    } catch (error: any) {
        console.error(`Error rejecting ${itemType} (${itemId}):`, error);
        return { success: false, error: `Failed to reject item. Please check server logs.` };
    }
}
--- END FILE: src\lib\actions\approvalActions.ts ---

--- START FILE: src\lib\actions\authActions.ts ---
// Action: Modify src/lib/actions/authActions.ts

'use server';

import prisma from '@/lib/prisma';
import crypto from 'crypto'; // For generating secure random tokens
import bcrypt from 'bcrypt'; // For hashing the token AND new password
import { z } from 'zod'; // For input validation
import { revalidatePath } from 'next/cache'; // May not be strictly needed here, but good practice

// --- Request Reset Types/Action (Keep existing) ---
interface RequestPasswordResetResponse {
    success: boolean;
    message: string;
}
const EmailSchema = z.string().email({ message: "Invalid email address." });
export async function requestPasswordReset(formData: FormData): Promise<RequestPasswordResetResponse> {
    const emailValue = formData.get('email');
    const validationResult = EmailSchema.safeParse(emailValue);
    if (!validationResult.success) {
        console.warn("Password reset attempt with invalid email format:", emailValue);
        return { success: true, message: "If an account with that email exists, a password reset link has been sent." };
    }
    const email = validationResult.data.toLowerCase().trim();
    console.log(`Password reset requested for email: ${email}`);
    try {
        const user = await prisma.user.findUnique({
            where: { email: email },
            select: { id: true }
        });
        if (user) {
            console.log(`User found with ID: ${user.id}. Proceeding with token generation.`);
            const resetToken = crypto.randomBytes(32).toString('hex');
            const saltRounds = 10;
            const hashedToken = await bcrypt.hash(resetToken, saltRounds);
            const expires = new Date(Date.now() + 3600 * 1000); // 1 hour
            await prisma.$transaction([
                prisma.passwordResetToken.deleteMany({ where: { userId: user.id } }),
                prisma.passwordResetToken.create({
                    data: { userId: user.id, token: hashedToken, expires: expires }
                })
            ]);
            console.log(`Stored hashed password reset token for user ${user.id}. Expiration: ${expires.toISOString()}`);
            const resetLink = `${process.env.NEXTAUTH_URL}/reset-password?token=${resetToken}`;
            console.log("--------------------------------------------------");
            console.log("--- SIMULATED EMAIL ---");
            console.log(`To: ${email}`);
            console.log(`Subject: Reset Your SMLS-SFMS Password`);
            console.log(`Body: Click the link below to reset your password:\n${resetLink}`);
            console.log(`(Unhashed Token for link: ${resetToken})`);
            console.log("--------------------------------------------------");
        } else {
            console.log(`Password reset requested for non-existent email: ${email}. No action taken.`);
        }
        return { success: true, message: "If an account with that email exists, a password reset link has been sent." };
    } catch (error: any) {
        console.error("Error during password reset request:", error);
        return { success: false, message: "An error occurred while processing your request. Please try again later." };
    }
}


// --- *** NEW: Perform Password Reset Action *** ---

// Define the expected shape of the response
interface PerformPasswordResetResponse {
    success: boolean;
    message: string; // User-facing message
}

// Define a schema for the reset form data validation using Zod
const ResetPasswordSchema = z.object({
    token: z.string().min(1, { message: "Token is required." }),
    password: z.string().min(8, { message: "Password must be at least 8 characters long." }),
    confirmPassword: z.string()
}).refine(data => data.password === data.confirmPassword, {
    message: "Passwords do not match.",
    path: ["confirmPassword"], // Point error to the confirmation field
});

export async function performPasswordReset(formData: FormData): Promise<PerformPasswordResetResponse> {
    const rawFormData = {
        token: formData.get('token'),
        password: formData.get('password'),
        confirmPassword: formData.get('confirmPassword'),
    };

    // 1. Validate Form Input
    const validationResult = ResetPasswordSchema.safeParse(rawFormData);
    if (!validationResult.success) {
        // Combine multiple errors if necessary, or just take the first one
        const firstError = validationResult.error.errors[0]?.message || "Invalid input.";
        console.warn("Password reset validation failed:", validationResult.error.flatten());
        return { success: false, message: firstError };
    }

    const { token, password } = validationResult.data;
    console.log(`Attempting password reset with token (first 8 chars): ${token.substring(0, 8)}...`);

    try {
        // 2. Find the corresponding HASHED token in the database
        // We need to iterate through potential tokens or use a more direct lookup if possible.
        // Since we stored the HASHED token, we cannot directly query `where: { token: hashedToken }`
        // because bcrypt generates a different hash each time even for the same input.
        // The standard secure approach is:
        // a) Hash the token from the URL *before* storing it. (We did this in requestPasswordReset)
        // b) Find the token record by its *hashed* value.

        // Let's re-evaluate: We stored the HASHED token. The URL contains the UNHASHED token.
        // We CANNOT efficiently find the DB record using the unhashed token.
        // The CORRECT secure flow is usually:
        //   - Store HASHED token in DB.
        //   - Send UNHASHED token in URL.
        //   - When user submits: Hash the token from URL AGAIN, then find the DB record matching this NEW HASH.
        // This seems counter-intuitive but prevents timing attacks.
        // HOWEVER, bcrypt salts hashes, meaning hashing the same token twice yields DIFFERENT hashes.
        // THEREFORE, the standard secure method is actually:
        //   - Generate token. Store HASHED token in DB. Send UNHASHED token in URL.
        //   - When user submits: Find the potential DB token record(s) by USER ID (if possible, or other non-secret identifier).
        //   - Use `bcrypt.compare(unhashedTokenFromUrl, hashedTokenFromDb)` to verify.

        // Let's adjust the logic: We can't easily find the token by its value.
        // A common workaround (less ideal than finding by user ID if the token page required login)
        // is to fetch recent, unexpired tokens and compare. This is inefficient.

        // *** A BETTER APPROACH (REQUIRING SCHEMA CHANGE which we already did): ***
        // Find the token record by the *hashed* token value. We need to hash the incoming token first.
        // THIS IS WRONG - bcrypt compare is needed.

        // *** CORRECTED APPROACH: Find token records and compare ***
        // This is still inefficient if many tokens exist. A better real-world solution
        // might involve linking the token request to a session or adding a non-secret identifier.
        // For this implementation, let's fetch recent tokens and compare.

        const potentialTokens = await prisma.passwordResetToken.findMany({
            where: {
                expires: { gt: new Date() } // Only consider non-expired tokens
            },
            include: { user: { select: { id: true } } } // Include user ID
        });

        let validTokenRecord = null;
        for (const dbToken of potentialTokens) {
            const isValid = await bcrypt.compare(token, dbToken.token);
            if (isValid) {
                validTokenRecord = dbToken;
                break; // Found the matching token
            }
        }

        // 3. Validate Token Existence and Expiry
        if (!validTokenRecord) {
            console.log("Password reset failed: Token not found or expired/invalid.");
            return { success: false, message: "Invalid or expired password reset link." };
        }

        // Check expiry again just in case (though the query should handle it)
        if (new Date() > validTokenRecord.expires) {
            console.log(`Password reset failed: Token expired at ${validTokenRecord.expires.toISOString()}`);
             // Clean up expired token (optional, could run a cron job)
             await prisma.passwordResetToken.delete({ where: { id: validTokenRecord.id } });
            return { success: false, message: "Password reset link has expired." };
        }

        const userId = validTokenRecord.userId;
        console.log(`Valid token found for user ID: ${userId}. Proceeding to update password.`);

        // 4. Hash the New Password
        const saltRounds = 10;
        const hashedNewPassword = await bcrypt.hash(password, saltRounds);

        // 5. Update User Password and Delete Token (Transaction)
        await prisma.$transaction([
            // Update user's password
            prisma.user.update({
                where: { id: userId },
                data: { password: hashedNewPassword }
            }),
            // Delete the used reset token
            prisma.passwordResetToken.delete({
                where: { id: validTokenRecord.id }
            })
        ]);

        console.log(`Successfully reset password for user ID: ${userId} and deleted token.`);

        // 6. Return Success
        return { success: true, message: "Password has been reset successfully." };

    } catch (error: any) {
        console.error("Error during password reset execution:", error);
        // Handle potential errors like user deletion between token validation and update
        if (error.code === 'P2025') { // Record not found during update/delete
             return { success: false, message: "User not found or token already used." };
        }
        return { success: false, message: "An error occurred while resetting your password. Please try again." };
    }
}
// --- *** END: Perform Password Reset Action *** ---
--- END FILE: src\lib\actions\authActions.ts ---

--- START FILE: src\lib\actions\dashboardActions.ts ---
// Action: Modify src/lib/actions/dashboardActions.ts

'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { Role } from '@/generated/prisma'; // Import Role enum
// Import the centralized types, including the renamed response type for the matrix
import type { GetMatrixDataResponse, FacultyLinkedSpecialization } from '@/types'; // Ensure GetMatrixDataResponse is imported

// --- Get Faculty Specialization Data (Uses Links) ---
// This action now fetches explicitly linked specializations for the matrix display
// AND fetches all defined specialization names for consistent headers.
export async function getFacultySpecializationData(): Promise<GetMatrixDataResponse> { // <-- Use the renamed type here
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization Check
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Fetching linked specialization data and all specialization names for matrix...");

    try {
        // 2. Fetch all Faculty Users and include their linked Specializations
        const facultyUsersPromise = prisma.user.findMany({
            where: {
                role: Role.FACULTY,
            },
            include: {
                specializations: {
                    select: { name: true },
                    orderBy: { name: 'asc' }
                }
            },
            orderBy: { name: 'asc' }
        });

        // *** ADDED: Fetch all defined specialization names ***
        const allSpecializationsPromise = prisma.specialization.findMany({
            select: { name: true },
            orderBy: { name: 'asc' }
        });
        // *** END ADDED ***

        // 3. Execute queries concurrently
        const [facultyUsers, allDbSpecializations] = await Promise.all([
            facultyUsersPromise,
            allSpecializationsPromise
        ]);

        const allSpecializationNames = allDbSpecializations.map(spec => spec.name);

        console.log(`Found ${facultyUsers.length} faculty users and ${allSpecializationNames.length} total specializations.`);

        // 4. Process faculty data into the desired structure
        const specializationData: FacultyLinkedSpecialization[] = facultyUsers.map(user => {
            const linkedNames = user.specializations.map(spec => spec.name).sort((a, b) => a.localeCompare(b));
            return {
                userId: user.id,
                name: user.name,
                email: user.email,
                linkedSpecializationNames: linkedNames,
            };
        });

        console.log("Successfully processed linked specialization data.");
        // *** MODIFIED: Return both faculty data and all specialization names ***
        return {
            success: true,
            data: specializationData,
            allSpecializationNames: allSpecializationNames // Include the list here
        };
        // *** END MODIFICATION ***

    } catch (error: any) {
        console.error("Error fetching matrix data:", error);
        // *** MODIFIED: Ensure error response structure matches interface ***
        return {
            success: false,
            error: `Failed to get matrix data. ${error.message}`,
            data: undefined, // Explicitly set to undefined on error
            allSpecializationNames: undefined // Explicitly set to undefined on error
        };
        // *** END MODIFICATION ***
    }
}

// --- Get Admin Dashboard Stats ---
interface AdminDashboardStats {
    totalFaculty: number;
    pendingApprovals: number;
}

interface GetAdminDashboardStatsResponse {
    success: boolean;
    stats?: AdminDashboardStats;
    error?: string;
}

export async function getAdminDashboardStats(): Promise<GetAdminDashboardStatsResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Fetching admin dashboard stats...");

    try {
        // 2. Count Faculty Users
        const facultyCount = await prisma.user.count({
            where: { role: Role.FACULTY },
        });

        // 3. Count Pending Submissions (Iterate through relevant models)
        let pendingCount = 0;
        const modelsToCheck: (keyof typeof prisma)[] = [
            'academicQualification', 'professionalLicense', 'workExperience',
            'professionalAffiliation', 'awardRecognition', 'professionalDevelopment',
            'communityInvolvement', 'publication', 'conferencePresentation'
        ];

        for (const modelName of modelsToCheck) {
            // Type assertion needed as prisma client type doesn't directly support indexed access with string keys well
            const model = prisma[modelName] as any;
            if (model && typeof model.count === 'function') {
                const count = await model.count({
                    where: { status: 'PENDING' },
                });
                pendingCount += count;
            } else {
                 console.warn(`Model or count function not found for: ${String(modelName)} while calculating pending stats.`);
            }
        }

        console.log(`Dashboard Stats - Faculty: ${facultyCount}, Pending: ${pendingCount}`);

        // 4. Return Stats
        return {
            success: true,
            stats: {
                totalFaculty: facultyCount,
                pendingApprovals: pendingCount,
            },
        };

    } catch (error: any) {
        console.error("Error fetching admin dashboard stats:", error);
        return { success: false, error: 'Failed to fetch dashboard statistics.' };
    }
}

// --- *** NEW: Generate Matrix CSV Data *** ---
interface GenerateMatrixCsvResponse {
    success: boolean;
    csvData?: string;
    error?: string;
}

// Helper function to safely quote CSV fields if needed
function escapeCsvField(field: string | null | undefined): string {
    const str = String(field ?? ''); // Convert null/undefined to empty string
    // Quote if it contains comma, double quote, or newline
    if (str.includes(',') || str.includes('"') || str.includes('\n') || str.includes('\r')) {
        // Escape existing double quotes by doubling them, then wrap in double quotes
        return `"${str.replace(/"/g, '""')}"`;
    }
    return str; // Return as is if no special characters
}


export async function generateMatrixCsv(): Promise<GenerateMatrixCsvResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Generating CSV data for specialization matrix...");

    try {
        // 2. Fetch necessary data (reuse or adapt logic from getFacultySpecializationData)
        // Fetch all faculty with their linked specializations
        const facultyUsers = await prisma.user.findMany({
            where: { role: Role.FACULTY },
            include: {
                specializations: {
                    select: { name: true }, // Only need names
                    orderBy: { name: 'asc' }
                }
            },
            orderBy: { name: 'asc' }
        });

        // Fetch all unique specialization names to build headers consistently
        const allDbSpecializations = await prisma.specialization.findMany({
            select: { name: true },
            orderBy: { name: 'asc' }
        });
        const allSpecializationNames = allDbSpecializations.map(spec => spec.name);

        // 3. Build CSV Header
        const header = [
            "Faculty Name",
            "Email",
            ...allSpecializationNames.map(escapeCsvField) // Escape header names too
        ].join(',');

        // 4. Build CSV Data Rows
        const dataRows = facultyUsers.map(user => {
            const linkedSpecsSet = new Set(user.specializations.map(spec => spec.name));
            const row = [
                escapeCsvField(user.name),
                escapeCsvField(user.email),
                // For each known specialization, mark 'X' if the user has it linked
                ...allSpecializationNames.map(specName =>
                    linkedSpecsSet.has(specName) ? '"X"' : '""' // Use "X" or empty quoted string
                )
            ];
            return row.join(',');
        });

        // 5. Combine Header and Rows
        const csvData = [header, ...dataRows].join('\n');

        console.log("Successfully generated CSV data.");
        return { success: true, csvData: csvData };

    } catch (error: any) {
        console.error("Error generating matrix CSV data:", error);
        return { success: false, error: `Failed to generate CSV data. ${error.message}` };
    }
}
// --- *** END: Generate Matrix CSV Data *** ---
--- END FILE: src\lib\actions\dashboardActions.ts ---

--- START FILE: src\lib\actions\facultyActions.ts ---
// src/lib/actions/facultyActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import {
    Role,
    User, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment, Specialization,
    CommunityInvolvement, Publication, ConferencePresentation,
    Course,
    SocialMediaLink
 } from '@/generated/prisma';
import bcrypt from 'bcrypt';

// Define Match Strength Type
type CourseMatchStrength = 'FULL_MATCH' | 'PARTIAL_MATCH' | 'NO_MATCH';

// --- Action: Get All Faculty Users ---
export async function getAllFaculty() {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized', faculty: [] };
    }

    try {
        const facultyUsers = await prisma.user.findMany({
            where: {
                role: Role.FACULTY,
            },
            select: {
                id: true,
                name: true,
                email: true,
                createdAt: true,
            },
            orderBy: {
                name: 'asc',
            },
        });

        return { success: true, faculty: facultyUsers };

    } catch (error: any) {
        console.error("Error fetching faculty list:", error);
        return { success: false, error: 'Failed to fetch faculty list.', faculty: [] };
    }
}

// --- Get Faculty Profile By ID ---
// Updated interface to include new User fields
interface FacultyProfileData {
    user: {
        id: string;
        name: string | null;
        email: string | null;
        role: Role | null;
        createdAt: Date;
        specializations: Specialization[];
        profileImageUrl: string | null;
        dateOfBirth: Date | null;
        civilStatus: string | null;
        nationality: string | null;
        contactNumber: string | null;
        address: string | null;
        employeeId: string | null;
        bio: string | null;
        socialMediaLinks: SocialMediaLink[];
    };
    potentialCourses: (Course & {
        requiredSpecializations: Pick<Specialization, 'id' | 'name'>[];
        matchStrength: CourseMatchStrength;
    })[];
    suggestedTeachingAreas: string[];
    academicQualifications: AcademicQualification[];
    professionalLicenses: ProfessionalLicense[];
    workExperiences: WorkExperience[];
    professionalAffiliations: ProfessionalAffiliation[];
    awardsRecognitions: AwardRecognition[];
    professionalDevelopments: ProfessionalDevelopment[];
    communityInvolvements: CommunityInvolvement[];
    publications: Publication[];
    conferencePresentations: ConferencePresentation[];
}

interface GetFacultyProfileResponse {
    success: boolean;
    facultyProfile?: FacultyProfileData;
    error?: string;
}

export async function getFacultyProfileById(facultyId: string): Promise<GetFacultyProfileResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== Role.ADMIN) {
        console.warn(`Unauthorized attempt to fetch faculty profile by non-admin. User role: ${userRole}`);
        return { success: false, error: 'Unauthorized' };
    }

    if (!facultyId || typeof facultyId !== 'string') {
        console.error('getFacultyProfileById called without a valid facultyId.');
        return { success: false, error: 'Invalid Faculty ID provided.' };
    }

    console.log(`Admin fetching profile (including specializations and new personal info) for faculty ID: ${facultyId}`);

    try {
        const facultyUser = await prisma.user.findUnique({
            where: {
                id: facultyId,
            },
            include: {
                specializations: { orderBy: { name: 'asc' } },
                academicQualifications: { orderBy: { yearCompleted: 'desc' } },
                professionalLicenses: { orderBy: { expiration: 'desc' } },
                workExperiences: { orderBy: { createdAt: 'desc' } },
                professionalAffiliations: { orderBy: { createdAt: 'desc' } },
                awardsRecognitions: { orderBy: { yearReceived: 'desc' } },
                professionalDevelopments: { orderBy: { createdAt: 'desc' } },
                communityInvolvements: { orderBy: { createdAt: 'desc' } },
                publications: { orderBy: { datePublished: 'desc' } },
                conferencePresentations: { orderBy: { createdAt: 'desc' } },
                socialMediaLinks: { orderBy: { platform: 'asc' } },
            },
        });

        const allCourses = await prisma.course.findMany({
            include: {
                requiredSpecializations: { select: { id: true, name: true } }
            },
        });

        if (!facultyUser) {
            console.warn(`Faculty profile not found for ID: ${facultyId}`);
            return { success: false, error: 'Faculty member not found.' };
        }

        const specializationNames = (facultyUser.specializations ?? []).map(spec => spec.name);
        const facultySpecializationIds = new Set((facultyUser.specializations ?? []).map(spec => spec.id));

        const potentialCoursesList: (Course & {
            requiredSpecializations: Pick<Specialization, 'id' | 'name'>[];
            matchStrength: CourseMatchStrength;
        })[] = [];

        if (facultySpecializationIds.size > 0 || allCourses.some(c => !c.requiredSpecializations || c.requiredSpecializations.length === 0)) {
            allCourses.forEach(course => {
                let matchStrength: CourseMatchStrength = 'NO_MATCH';
                let facultyHasAtLeastOneRequiredSpec = false;
                let facultyHasAllRequiredSpecs = true;

                if (!course.requiredSpecializations || course.requiredSpecializations.length === 0) {
                    matchStrength = 'FULL_MATCH';
                    potentialCoursesList.push({ ...course, matchStrength });
                    return;
                }

                for (const reqSpec of course.requiredSpecializations) {
                    if (facultySpecializationIds.has(reqSpec.id)) {
                        facultyHasAtLeastOneRequiredSpec = true;
                    } else {
                        facultyHasAllRequiredSpecs = false;
                    }
                }

                if (facultyHasAllRequiredSpecs) {
                    matchStrength = 'FULL_MATCH';
                } else if (facultyHasAtLeastOneRequiredSpec) {
                    matchStrength = 'PARTIAL_MATCH';
                }

                if (matchStrength === 'FULL_MATCH' || matchStrength === 'PARTIAL_MATCH') {
                    potentialCoursesList.push({ ...course, matchStrength });
                }
            });
        }

        const profileData: FacultyProfileData = {
            user: {
                id: facultyUser.id,
                name: facultyUser.name,
                email: facultyUser.email,
                role: facultyUser.role,
                createdAt: facultyUser.createdAt,
                specializations: facultyUser.specializations ?? [],
                profileImageUrl: facultyUser.profileImageUrl,
                dateOfBirth: facultyUser.dateOfBirth,
                civilStatus: facultyUser.civilStatus,
                nationality: facultyUser.nationality,
                contactNumber: facultyUser.contactNumber,
                address: facultyUser.address,
                employeeId: facultyUser.employeeId,
                bio: facultyUser.bio,
                socialMediaLinks: facultyUser.socialMediaLinks ?? [],
            },
            suggestedTeachingAreas: specializationNames,
            potentialCourses: potentialCoursesList.sort((a, b) => a.name.localeCompare(b.name)),
            academicQualifications: facultyUser.academicQualifications ?? [],
            professionalLicenses: facultyUser.professionalLicenses ?? [],
            workExperiences: facultyUser.workExperiences ?? [],
            professionalAffiliations: facultyUser.professionalAffiliations ?? [],
            awardsRecognitions: facultyUser.awardsRecognitions ?? [],
            professionalDevelopments: facultyUser.professionalDevelopments ?? [],
            communityInvolvements: facultyUser.communityInvolvements ?? [],
            publications: facultyUser.publications ?? [],
            conferencePresentations: facultyUser.conferencePresentations ?? [],
        };

        console.log(`Successfully fetched profile for faculty: ${facultyUser.email}, Suggested Areas: ${specializationNames.join(', ')}`);
        return { success: true, facultyProfile: profileData };

    } catch (error: any) {
        console.error(`Error fetching faculty profile for ID ${facultyId}:`, error);
        return { success: false, error: `Failed to fetch faculty profile. ${error.message}` };
    }
}

// --- Create Faculty User ---
interface CreateFacultyResponse {
    success: boolean;
    error?: string;
    user?: { id: string; email: string | null };
}

export async function createFacultyUser(formData: FormData): Promise<CreateFacultyResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    const name = formData.get('name') as string | null;
    const email = formData.get('email') as string | null;
    const password = formData.get('password') as string | null;

    if (!email || typeof email !== 'string') {
        return { success: false, error: 'Email is required and must be a string.' };
    }
    if (!password || typeof password !== 'string') {
        return { success: false, error: 'Password is required and must be a string.' };
    }
    if (!/\S+@\S+\.\S+/.test(email)) {
        return { success: false, error: 'Invalid email format.' };
    }
    if (password.length < 8) {
        return { success: false, error: 'Password must be at least 8 characters long.' };
    }
    if (name && typeof name !== 'string') {
         return { success: false, error: 'Name must be a string if provided.' };
    }

    try {
        const existingUser = await prisma.user.findUnique({
            where: { email: email },
        });
        if (existingUser) {
            return { success: false, error: 'Email address is already in use.' };
        }

        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        const newUser = await prisma.user.create({
            data: {
                name: name?.trim() || null,
                email: email.toLowerCase().trim(),
                password: hashedPassword,
                role: Role.FACULTY,
                // Initially, new personal fields will be null
                profileImageUrl: null,
                dateOfBirth: null,
                civilStatus: null,
                nationality: null,
                contactNumber: null,
                address: null,
            },
            select: {
                id: true,
                email: true,
            }
        });

        console.log(`Admin created new faculty user: ${newUser.email} (ID: ${newUser.id})`);
        revalidatePath('/admin/faculty');
        return { success: true, user: newUser };

    } catch (error: any) {
        console.error("Error creating faculty user:", error);
        if (error.code === 'P2002') {
             return { success: false, error: 'Email address is already in use.' };
        }
        return { success: false, error: `Failed to create faculty user. ${error.message}` };
    }
}

// --- Delete Faculty User ---
interface DeleteUserResponse {
    success: boolean;
    error?: string;
}

export async function deleteFacultyUser(facultyId: string): Promise<DeleteUserResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;
    const currentUserId = (session?.user as any)?.id;

    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }
    if (!facultyId || typeof facultyId !== 'string') {
        return { success: false, error: 'Faculty ID is missing or invalid.' };
    }
    if (facultyId === currentUserId) {
        return { success: false, error: 'Administrators cannot delete their own account.' };
    }

    console.log(`Admin (ID: ${currentUserId}) attempting to delete faculty user ID: ${facultyId}`);

    try {
        const userToDelete = await prisma.user.findUnique({
            where: { id: facultyId },
            select: { role: true, email: true }
        });

        if (!userToDelete) {
            console.warn(`Attempted to delete non-existent user ID: ${facultyId}. Assuming success.`);
            revalidatePath('/admin/faculty');
            return { success: true };
        }

        await prisma.user.delete({
            where: { id: facultyId },
        });

        console.log(`Successfully deleted user ID: ${facultyId} (Email: ${userToDelete.email})`);
        revalidatePath('/admin/faculty');
        return { success: true };

    } catch (error: any) {
        console.error(`Error deleting user ${facultyId}:`, error);
        if (error.code === 'P2025') {
            console.warn(`Record not found during deletion attempt for user ID: ${facultyId}. Assuming success.`);
            revalidatePath('/admin/faculty');
            return { success: true };
        }
        return { success: false, error: 'Failed to delete faculty user.' };
    }
}

// --- Link Specialization to Faculty ---
interface LinkResponse {
    success: boolean;
    error?: string;
}

export async function linkSpecializationToFaculty(facultyId: string, specializationId: string): Promise<LinkResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }
    if (!facultyId || !specializationId) {
        return { success: false, error: 'Faculty ID and Specialization ID are required.' };
    }

    console.log(`Admin linking Specialization ${specializationId} to Faculty ${facultyId}`);

    try {
        await prisma.user.update({
            where: { id: facultyId },
            data: {
                specializations: {
                    connect: {
                        id: specializationId
                    }
                }
            },
        });

        console.log(`Successfully linked Specialization ${specializationId} to Faculty ${facultyId}`);
        revalidatePath(`/admin/faculty/${facultyId}`);
        revalidatePath('/admin/matrix');
        return { success: true };

    } catch (error: any) {
        console.error(`Error linking specialization ${specializationId} to faculty ${facultyId}:`, error);
        if (error.code === 'P2025') {
             return { success: false, error: 'Faculty member or Specialization not found.' };
        }
        if (error.code === 'P2016') {
             console.warn(`Attempted to link already linked specialization ${specializationId} to faculty ${facultyId}. Assuming success.`);
             return { success: true };
        }
        return { success: false, error: `Failed to link specialization. ${error.message}` };
    }
}

// --- Unlink Specialization from Faculty ---
export async function unlinkSpecializationFromFaculty(facultyId: string, specializationId: string): Promise<LinkResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }
    if (!facultyId || !specializationId) {
        return { success: false, error: 'Faculty ID and Specialization ID are required.' };
    }

    console.log(`Admin unlinking Specialization ${specializationId} from Faculty ${facultyId}`);

    try {
        await prisma.user.update({
            where: { id: facultyId },
            data: {
                specializations: {
                    disconnect: {
                        id: specializationId
                    }
                }
            },
        });

        console.log(`Successfully unlinked Specialization ${specializationId} from Faculty ${facultyId}`);
        revalidatePath(`/admin/faculty/${facultyId}`);
        revalidatePath('/admin/matrix');
        return { success: true };

    } catch (error: any) {
        console.error(`Error unlinking specialization ${specializationId} from faculty ${facultyId}:`, error);
         if (error.code === 'P2025') {
             console.warn(`Attempted to unlink non-existent link between specialization ${specializationId} and faculty ${facultyId}. Assuming success.`);
             return { success: true };
         }
        return { success: false, error: `Failed to unlink specialization. ${error.message}` };
    }
}

// --- Update Faculty Name ---
interface UpdateFacultyNameResponse {
    success: boolean;
    user?: { id: string; name: string | null };
    error?: string;
}

export async function updateFacultyName(formData: FormData): Promise<UpdateFacultyNameResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    const facultyId = formData.get('facultyId') as string | null;
    const newName = formData.get('name') as string | null;

    if (!facultyId || typeof facultyId !== 'string') {
        return { success: false, error: 'Faculty ID is missing or invalid.' };
    }
    const trimmedName = newName?.trim() || null;
     if (trimmedName && trimmedName.length > 255) {
         return { success: false, error: 'Name is too long.' };
     }

    console.log(`Admin attempting to update name for faculty ID: ${facultyId} to "${trimmedName}"`);

    try {
        const updatedUser = await prisma.user.update({
            where: { id: facultyId },
            data: {
                name: trimmedName,
            },
            select: {
                id: true,
                name: true,
            }
        });

        console.log(`Successfully updated name for user ID: ${updatedUser.id}`);
        revalidatePath(`/admin/faculty`);
        revalidatePath(`/admin/faculty/${facultyId}`);
        return { success: true, user: updatedUser };

    } catch (error: any) {
        console.error(`Error updating name for faculty ${facultyId}:`, error);
        if (error.code === 'P2025') {
            return { success: false, error: 'Faculty member not found.' };
        }
        return { success: false, error: 'Failed to update faculty name.' };
    }
}
--- END FILE: src\lib\actions\facultyActions.ts ---

--- START FILE: src\lib\actions\notificationActions.ts ---
// src/lib/actions/notificationActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../app/api/auth/[...nextauth]/route';
import prisma from '../prisma';
import { revalidatePath } from 'next/cache';
import type { Notification } from '../../generated/prisma/client';

// --- Get Notifications for Current User ---
interface GetNotificationsResponse {
    success: boolean;
    notifications?: Notification[];
    unreadCount?: number; // Optionally return the count directly
    error?: string;
}

export async function getMyNotifications(): Promise<GetNotificationsResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        return { success: false, error: 'Not authenticated' };
    }

    try {
        const notifications = await prisma.notification.findMany({
            where: {
                userId: userId,
            },
            orderBy: {
                createdAt: 'desc', // Show newest first
            },
            take: 20, // Limit the number of notifications fetched initially
        });

        // Calculate unread count separately or from the fetched list
        const unreadCount = await prisma.notification.count({
            where: {
                userId: userId,
                isRead: false,
            },
        });

        return { success: true, notifications: notifications, unreadCount: unreadCount };

    } catch (error: any) {
        console.error("Error fetching notifications:", error);
        return { success: false, error: 'Failed to fetch notifications.' };
    }
}

// --- Mark a Single Notification as Read ---
interface MarkReadResponse {
    success: boolean;
    error?: string;
}

export async function markNotificationAsRead(notificationId: string): Promise<MarkReadResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        return { success: false, error: 'Not authenticated' };
    }
    if (!notificationId) {
        return { success: false, error: 'Notification ID is required.' };
    }

    try {
        // IMPORTANT: Update only if the notification belongs to the current user
        const result = await prisma.notification.updateMany({
            where: {
                id: notificationId,
                userId: userId, // Ensure user owns the notification
                isRead: false,   // Only update if it's currently unread
            },
            data: {
                isRead: true,
            },
        });

        if (result.count === 0) {
            // This could mean the notification didn't exist, wasn't owned by the user,
            // or was already read. We don't treat this as a hard error usually.
            console.log(`Notification ${notificationId} not updated (possibly already read or not found/owned).`);
        } else {
             console.log(`Marked notification ${notificationId} as read for user ${userId}.`);
             // Revalidate paths that might display the unread count or notification list
             // Revalidating the header path might be tricky, might need client-side update instead
             // revalidatePath('/'); // Example - adjust as needed
        }

        return { success: true };

    } catch (error: any) {
        console.error(`Error marking notification ${notificationId} as read:`, error);
        return { success: false, error: 'Failed to mark notification as read.' };
    }
}


// --- Mark All Notifications as Read ---
export async function markAllNotificationsAsRead(): Promise<MarkReadResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        return { success: false, error: 'Not authenticated' };
    }

    try {
        const result = await prisma.notification.updateMany({
            where: {
                userId: userId,
                isRead: false, // Only target unread notifications
            },
            data: {
                isRead: true,
            },
        });

        console.log(`Marked ${result.count} notifications as read for user ${userId}.`);
        // Revalidate paths if needed
        // revalidatePath('/'); // Example

        return { success: true };

    } catch (error: any) {
        console.error(`Error marking all notifications as read for user ${userId}:`, error);
        return { success: false, error: 'Failed to mark all notifications as read.' };
    }
}
--- END FILE: src\lib\actions\notificationActions.ts ---

--- START FILE: src\lib\actions\specializationActions.ts ---
// src/lib/actions/specializationActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { Role, Specialization } from '@/generated/prisma'; // Import Role enum and Specialization type

// --- Create Specialization ---
interface CreateSpecializationResponse {
    success: boolean;
    specialization?: Specialization; // Return the created specialization
    error?: string;
}

export async function createSpecialization(formData: FormData): Promise<CreateSpecializationResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization Check
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Extract Data
    const name = formData.get('name') as string | null;
    const description = formData.get('description') as string | null; // Optional

    // 3. Validation
    if (!name || typeof name !== 'string' || name.trim().length === 0) {
        return { success: false, error: 'Specialization name is required.' };
    }
    if (description && typeof description !== 'string') {
        // Should not happen with standard form data, but good practice
        return { success: false, error: 'Description must be a string if provided.' };
    }

    const trimmedName = name.trim();
    const trimmedDescription = description?.trim() || null; // Store null if empty/whitespace

    console.log(`Admin attempting to create specialization: "${trimmedName}"`);

    try {
        // --- MODIFIED DUPLICATE CHECK ---
        // 4. Fetch potential matches based on name (case-sensitive by default in SQLite via Prisma)
        // We fetch any specialization to compare names manually later.
        const potentialMatches = await prisma.specialization.findMany({
            where: {
                 // We can't use mode: 'insensitive' with SQLite directly here.
                 // A simple 'equals' might miss case variations.
                 // Fetching based on a broader filter or just fetching all and filtering in code
                 // might be necessary if strict case-insensitivity is required before creation.
                 // For simplicity now, let's check for an exact match first.
                 // A better approach might be to fetch all and filter below.
                 name: trimmedName // Check exact match first
            }
         });

        // If an exact match exists, error out immediately
        if (potentialMatches.length > 0) {
             console.warn(`Specialization with the exact name "${trimmedName}" already exists.`);
             return { success: false, error: `Specialization "${trimmedName}" already exists.` };
        }

        // Optional: If you need strict case-insensitive check *before* creating,
        // you might need to fetch all specializations and check in code.
        // This can be inefficient for many specializations.
        /*
        const allSpecs = await prisma.specialization.findMany({ select: { name: true } });
        const existingSpec = allSpecs.find(spec => spec.name.toLowerCase() === trimmedName.toLowerCase());
        if (existingSpec) {
             console.warn(`Specialization with name "${trimmedName}" (case-insensitive) already exists.`);
            return { success: false, error: `Specialization "${trimmedName}" already exists.` };
        }
        */
        // For now, we rely on the database's unique constraint (which IS case-sensitive in SQLite)
        // and the exact match check above.

        // 5. Create in Database
        const newSpecialization = await prisma.specialization.create({
            data: {
                name: trimmedName,
                description: trimmedDescription,
            },
        });
        // --- END MODIFIED DUPLICATE CHECK ---

        console.log(`Successfully created specialization: ${newSpecialization.name} (ID: ${newSpecialization.id})`);

        // 6. Revalidate the path for the specializations list page
        revalidatePath('/admin/specializations');

        // 7. Return Success
        return { success: true, specialization: newSpecialization };

    } catch (error: any) {
        console.error("Error creating specialization:", error);
         // Catch unique constraint violation (case-sensitive in SQLite)
         if (error.code === 'P2002' && error.meta?.target?.includes('name')) {
             // Catch unique constraint violation specifically on 'name'
             return { success: false, error: `Specialization "${trimmedName}" already exists.` };
         }
        return { success: false, error: `Failed to create specialization. ${error.message}` };
    }
}

// --- Get All Specializations ---
interface GetSpecializationsResponse {
    success: boolean;
    specializations?: Specialization[]; // Array of Specialization records
    error?: string;
}

export async function getSpecializations(): Promise<GetSpecializationsResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // Authorization: Ensure only admins can fetch this list
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    console.log("Admin fetching list of all specializations...");

    try {
        const specializations = await prisma.specialization.findMany({
            orderBy: {
                name: 'asc', // Order alphabetically by name
            },
        });

        console.log(`Found ${specializations.length} specializations.`);
        return { success: true, specializations: specializations };

    } catch (error: any) {
        console.error("Error fetching specializations:", error);
        return { success: false, error: `Failed to fetch specializations. ${error.message}` };
    }
}

// --- Update Specialization ---
interface UpdateSpecializationResponse {
    success: boolean;
    specialization?: Specialization;
    error?: string;
}

export async function updateSpecialization(formData: FormData): Promise<UpdateSpecializationResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Extract Data
    const id = formData.get('id') as string | null;
    const name = formData.get('name') as string | null;
    const description = formData.get('description') as string | null;

    // 3. Validation
    if (!id || typeof id !== 'string') {
        return { success: false, error: 'Specialization ID is missing or invalid.' };
    }
    if (!name || typeof name !== 'string' || name.trim().length === 0) {
        return { success: false, error: 'Specialization name is required.' };
    }
    const trimmedName = name.trim();
    const trimmedDescription = description?.trim() || null;

    console.log(`Admin attempting to update specialization ID: ${id} to Name: "${trimmedName}"`);

    try {
        // 4. Check for Duplicate Name (excluding the current item being edited)
        const existingSpec = await prisma.specialization.findFirst({
            where: {
                name: trimmedName,
                id: { not: id } // Exclude the record we are currently editing
            }
        });

        if (existingSpec) {
            return { success: false, error: `Another specialization with the name "${trimmedName}" already exists.` };
        }

        // 5. Update in Database
        const updatedSpecialization = await prisma.specialization.update({
            where: { id: id },
            data: {
                name: trimmedName,
                description: trimmedDescription,
            },
        });

        console.log(`Successfully updated specialization: ${updatedSpecialization.name} (ID: ${updatedSpecialization.id})`);

        // 6. Revalidate Paths
        revalidatePath('/admin/specializations');
        revalidatePath('/admin/matrix'); // Matrix uses specialization names
        // Revalidate all faculty pages might be too broad, but safer if names are displayed there
        // Consider revalidating specific faculty if performance is an issue later
        revalidatePath('/admin/faculty');


        // 7. Return Success
        return { success: true, specialization: updatedSpecialization };

    } catch (error: any) {
        console.error(`Error updating specialization ${id}:`, error);
        if (error.code === 'P2025') { // Record to update not found
            return { success: false, error: 'Specialization not found.' };
        }
         if (error.code === 'P2002' && error.meta?.target?.includes('name')) {
             // Should be caught by the check above, but as a fallback
             return { success: false, error: `Another specialization with the name "${trimmedName}" already exists.` };
         }
        return { success: false, error: `Failed to update specialization. ${error.message}` };
    }
}

// --- Delete Specialization ---
interface DeleteSpecializationResponse {
    success: boolean;
    error?: string;
}

export async function deleteSpecialization(id: string): Promise<DeleteSpecializationResponse> {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    // 1. Authorization
    if (userRole !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    // 2. Validation
    if (!id || typeof id !== 'string') {
        return { success: false, error: 'Specialization ID is missing or invalid.' };
    }

    console.log(`Admin attempting to delete specialization ID: ${id}`);

    try {
        // 3. Delete from Database
        // Prisma will automatically handle disconnecting the relation from Users
        // based on the schema definition for the many-to-many relation.
        await prisma.specialization.delete({
            where: { id: id },
        });

        console.log(`Successfully deleted specialization ID: ${id}`);

        // 4. Revalidate Paths
        revalidatePath('/admin/specializations');
        revalidatePath('/admin/matrix');
        revalidatePath('/admin/faculty'); // Faculty profiles might no longer show this spec


        // 5. Return Success
        return { success: true };

    } catch (error: any) {
        console.error(`Error deleting specialization ${id}:`, error);
        if (error.code === 'P2025') { // Record to delete not found
            // It's already gone, consider it a success from the user's perspective
            console.warn(`Attempted to delete non-existent specialization ID: ${id}. Assuming success.`);
            revalidatePath('/admin/specializations'); // Still revalidate
             revalidatePath('/admin/matrix');
             revalidatePath('/admin/faculty');
            return { success: true };
        }
        return { success: false, error: `Failed to delete specialization. ${error.message}` };
    }
}
--- END FILE: src\lib\actions\specializationActions.ts ---

--- START FILE: src\lib\auth.ts ---
[EMPTY FILE]
--- END FILE: src\lib\auth.ts ---

--- START FILE: src\lib\courseActions.ts ---
// src/lib/actions/courseActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { Role, type Course, type Specialization } from '@/generated/prisma'; // Import Role, Course, Specialization types
import { z } from 'zod'; // For input validation

// --- Zod Schema for Course Validation ---
const CourseSchema = z.object({
  name: z.string().min(1, { message: "Course name is required." }).max(191),
  code: z.string().max(50).optional().nullable(), // Optional, but if provided, max 50 chars
  description: z.string().optional().nullable(),
  // Array of specialization IDs (strings)
  specializationIds: z.array(z.string().cuid({ message: "Invalid specialization ID." })).optional(),
});


// --- Response Types ---
interface CourseResponse {
    success: boolean;
    course?: Course & { requiredSpecializations?: Pick<Specialization, 'id' | 'name'>[] }; // Include basic spec info
    error?: string;
}

interface CoursesResponse {
    success: boolean;
    courses?: (Course & { requiredSpecializations?: Pick<Specialization, 'id' | 'name'>[] })[];
    error?: string;
}

interface SimpleSuccessResponse {
    success: boolean;
    error?: string;
}


// --- Action: Create Course ---
export async function createCourse(formData: FormData): Promise<CourseResponse> {
    const session = await getServerSession(authOptions);
    if ((session?.user as any)?.role !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    const rawFormData = {
        name: formData.get('name'),
        code: formData.get('code') || null, // Handle empty string as null
        description: formData.get('description') || null,
        // specializationIds might come as a comma-separated string or multiple entries
        // For simplicity, assume frontend sends it as JSON stringified array if complex, or handle multiple form entries
        // Let's assume it's sent as a JSON string for now for easier handling of array
        specializationIds: JSON.parse(formData.get('specializationIds') as string || '[]') as string[],
    };

    const validationResult = CourseSchema.safeParse(rawFormData);
    if (!validationResult.success) {
        console.error("Create course validation error:", validationResult.error.flatten());
        return { success: false, error: validationResult.error.errors.map(e => e.message).join(', ') };
    }
    const { name, code, description, specializationIds } = validationResult.data;

    try {
        // Check for existing course name or code (if code is provided and meant to be unique)
        const existingByName = await prisma.course.findUnique({ where: { name } });
        if (existingByName) return { success: false, error: `Course with name "${name}" already exists.` };
        if (code) {
            const existingByCode = await prisma.course.findUnique({ where: { code } });
            if (existingByCode) return { success: false, error: `Course with code "${code}" already exists.` };
        }

        const newCourse = await prisma.course.create({
            data: {
                name,
                code,
                description,
                requiredSpecializations: specializationIds && specializationIds.length > 0
                    ? { connect: specializationIds.map(id => ({ id })) }
                    : undefined,
            },
            include: { requiredSpecializations: { select: { id: true, name: true } } }
        });
        revalidatePath('/admin/courses'); // Revalidate the courses list page
        return { success: true, course: newCourse };
    } catch (error: any) {
        console.error("Error creating course:", error);
        return { success: false, error: `Failed to create course. ${error.message}` };
    }
}

// --- Action: Get All Courses ---
export async function getCourses(): Promise<CoursesResponse> {
    // No admin check here as faculty might need to see course lists in future?
    // Or add admin check if strictly admin-only view for now.
    // For now, let's assume public or at least authenticated view.
    // const session = await getServerSession(authOptions);
    // if (!session) return { success: false, error: 'Unauthorized' };

    try {
        const courses = await prisma.course.findMany({
            orderBy: { name: 'asc' },
            include: {
                requiredSpecializations: {
                    select: { id: true, name: true }, // Select only id and name
                    orderBy: { name: 'asc' }
                }
            }
        });
        return { success: true, courses };
    } catch (error: any) {
        console.error("Error fetching courses:", error);
        return { success: false, error: 'Failed to fetch courses.' };
    }
}

// --- Action: Get Course By ID (Example, might not be needed if edit form fetches all) ---
export async function getCourseById(id: string): Promise<CourseResponse> {
     const session = await getServerSession(authOptions);
    if ((session?.user as any)?.role !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }
    if (!id) return { success: false, error: "Course ID is required." };

    try {
        const course = await prisma.course.findUnique({
            where: { id },
            include: { requiredSpecializations: { select: { id: true, name: true }, orderBy: {name: 'asc'} } }
        });
        if (!course) return { success: false, error: 'Course not found.' };
        return { success: true, course };
    } catch (error: any) {
        console.error(`Error fetching course ${id}:`, error);
        return { success: false, error: 'Failed to fetch course.' };
    }
}


// --- Action: Update Course ---
export async function updateCourse(courseId: string, formData: FormData): Promise<CourseResponse> {
    const session = await getServerSession(authOptions);
    if ((session?.user as any)?.role !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    if (!courseId) return { success: false, error: "Course ID is required for update." };

    const rawFormData = {
        name: formData.get('name'),
        code: formData.get('code') || null,
        description: formData.get('description') || null,
        specializationIds: JSON.parse(formData.get('specializationIds') as string || '[]') as string[],
    };

    const validationResult = CourseSchema.safeParse(rawFormData);
    if (!validationResult.success) {
        console.error("Update course validation error:", validationResult.error.flatten());
        return { success: false, error: validationResult.error.errors.map(e => e.message).join(', ') };
    }
    const { name, code, description, specializationIds } = validationResult.data;

    try {
        // Check for existing course name or code (excluding current course)
        const existingByName = await prisma.course.findFirst({ where: { name, id: { not: courseId } } });
        if (existingByName) return { success: false, error: `Another course with name "${name}" already exists.` };
        if (code) {
            const existingByCode = await prisma.course.findFirst({ where: { code, id: { not: courseId } } });
            if (existingByCode) return { success: false, error: `Another course with code "${code}" already exists.` };
        }

        const updatedCourse = await prisma.course.update({
            where: { id: courseId },
            data: {
                name,
                code,
                description,
                // 'set' will replace all existing links with the new set of specialization IDs
                requiredSpecializations: specializationIds && specializationIds.length > 0
                    ? { set: specializationIds.map(id => ({ id })) }
                    : { set: [] }, // If empty array passed, disconnect all
            },
            include: { requiredSpecializations: { select: { id: true, name: true } } }
        });
        revalidatePath('/admin/courses');
        revalidatePath('/admin/faculty'); // Faculty detail pages might show potential courses
        return { success: true, course: updatedCourse };
    } catch (error: any) {
        console.error(`Error updating course ${courseId}:`, error);
        if (error.code === 'P2025') return { success: false, error: "Course not found for update." };
        return { success: false, error: `Failed to update course. ${error.message}` };
    }
}

// --- Action: Delete Course ---
export async function deleteCourse(courseId: string): Promise<SimpleSuccessResponse> {
    const session = await getServerSession(authOptions);
    if ((session?.user as any)?.role !== Role.ADMIN) {
        return { success: false, error: 'Unauthorized' };
    }

    if (!courseId) return { success: false, error: "Course ID is required for deletion." };

    try {
        // Prisma will automatically handle disconnecting relations in the join table.
        await prisma.course.delete({
            where: { id: courseId },
        });
        revalidatePath('/admin/courses');
        revalidatePath('/admin/faculty');
        return { success: true };
    } catch (error: any) {
        console.error(`Error deleting course ${courseId}:`, error);
        if (error.code === 'P2025') return { success: false, error: "Course not found for deletion." };
        return { success: false, error: 'Failed to delete course.' };
    }
}
--- END FILE: src\lib\courseActions.ts ---

--- START FILE: src\lib\db.ts ---
[EMPTY FILE]
--- END FILE: src\lib\db.ts ---

--- START FILE: src\lib\prisma.ts ---
// src/lib/prisma.ts
import { PrismaClient } from '@/generated/prisma';

// Declare a global variable to hold the Prisma Client instance.
// We use 'globalThis' which works in different environments (Node, browser, edge).
// We add '_prisma' to avoid potential naming conflicts.
declare global {
  // eslint-disable-next-line no-var
  var _prisma: PrismaClient | undefined;
}

// Check if we already have an instance in the global scope.
// If not, create a new one. In development, due to Next.js hot reloading,
// 'global._prisma' might already exist, so we reuse it to avoid creating too many connections.
const prisma = globalThis._prisma ?? new PrismaClient();

// In non-production environments, assign the instance to the global scope.
if (process.env.NODE_ENV !== 'production') {
  globalThis._prisma = prisma;
}

// Export the single instance.
export default prisma;
--- END FILE: src\lib\prisma.ts ---

--- START FILE: src\lib\profileUtils.ts ---
// src/lib/profileUtils.ts
import {
    AcademicCapIcon,
    BriefcaseIcon,
    IdentificationIcon,
    StarIcon,
    SparklesIcon,
    UsersIcon,
    DocumentTextIcon,
    PresentationChartBarIcon,
} from '@heroicons/react/24/outline';
import type { CategoryKey } from '@/types'; // Import CategoryKey

// Import all your Display and Form component types if you want stricter typing here,
// or use React.ElementType for now.
// For simplicity, we'll use React.ElementType for icons.
// The actual component mapping can be done within CvSection.tsx or a similar component.

interface CategoryMeta {
    title: string;
    icon: React.ElementType; // For Heroicons
    // We can add component references here later if needed,
    // but for now, CvSection.tsx will handle dynamic component loading.
    // displayComponent: React.FC<any>;
    // formComponent: React.FC<any>;
}

export const categoryMetadata: Record<CategoryKey, CategoryMeta> = {
    academicQualifications: {
        title: 'Academic Qualifications',
        icon: AcademicCapIcon,
    },
    professionalLicenses: {
        title: 'Professional Licenses',
        icon: IdentificationIcon,
    },
    workExperiences: {
        title: 'Work Experience',
        icon: BriefcaseIcon,
    },
    professionalAffiliations: {
        title: 'Professional Affiliations',
        icon: UsersIcon, // Can be differentiated later if needed
    },
    awardsRecognitions: {
        title: 'Awards & Recognitions',
        icon: StarIcon,
    },
    professionalDevelopments: {
        title: 'Professional Development',
        icon: SparklesIcon,
    },
    communityInvolvements: {
        title: 'Community Involvement',
        icon: UsersIcon, // Can be differentiated later if needed
    },
    publications: {
        title: 'Publications',
        icon: DocumentTextIcon,
    },
    conferencePresentations: {
        title: 'Conference Presentations',
        icon: PresentationChartBarIcon,
    },
    // Add other categories here if they exist and are managed similarly
};

// Helper function to format date (can be moved here or kept in components if only used there)
export const formatDate = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        return new Date(date).toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        });
    } catch (e) {
        console.error("Error formatting date:", date, e);
        return 'Invalid Date';
    }
};

export const formatDateForInput = (date: string | Date | null | undefined): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return ''; // Check for invalid date
        return d.toISOString().split('T')[0];
    } catch (e) {
        console.error("Error formatting date for input:", date, e);
        return '';
    }
};

// You can add other profile-related utility functions here as needed.
// For example, validation helpers, default item structures, etc.

export const defaultTempSocialMediaLink = (userId: string): import('@/types').TempSocialMediaLink => ({
    id: `temp-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`, // More unique temp ID
    platform: '',
    url: '',
    userId: userId,
    createdAt: new Date(),
    updatedAt: new Date(),
    _isNew: true,
});
--- END FILE: src\lib\profileUtils.ts ---

--- START FILE: src\lib\userActions.ts ---
// src/lib/userActions.ts
"use server";

import { getServerSession } from 'next-auth/next';
import { authOptions } from '../app/api/auth/[...nextauth]/route';
import prisma from './prisma';
import {
    Role,
    User as PrismaUser,
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation,
    ApprovalStatus, SocialMediaLink, Specialization // Added Specialization for clarity if used in includes
} from '@/generated/prisma';
import { revalidatePath } from 'next/cache';
import fs from 'fs/promises';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

import type { UserProfilePageData, ProfileUser, CategoryKey } from '@/types';

// --- Helper Functions ---

async function ensureUploadDirExists(subDir: string, userId: string): Promise<string> {
    const userDirPath = path.join(process.cwd(), 'public', 'uploads', subDir, userId);
    try {
        await fs.mkdir(userDirPath, { recursive: true });
        return userDirPath;
    } catch (error) {
        console.error(`Error creating upload directory (${userDirPath}):`, error);
        throw new Error(`Could not create upload directory for ${subDir}.`);
    }
}

async function safeDeleteFile(filePath: string | null | undefined) {
    if (!filePath || !filePath.startsWith('/uploads/')) {
        // console.warn(`safeDeleteFile: Invalid or non-upload path provided: ${filePath}`); // Can be noisy
        return;
    }
    try {
        const localFilePath = path.join(process.cwd(), 'public', filePath);
        await fs.unlink(localFilePath);
        console.log(`Successfully deleted file: ${localFilePath}`);
    } catch (error: any) {
        if (error.code === 'ENOENT') {
            console.warn(`File not found during deletion attempt: ${filePath}`);
        } else {
            console.error(`Error deleting file ${filePath}:`, error.message);
        }
    }
}

async function uploadFile(file: File, userId: string, subDir: string): Promise<string> {
    try {
        const MAX_FILE_SIZE = 5 * 1024 * 1024;
        const ALLOWED_TYPES = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];

        if (file.size > MAX_FILE_SIZE) {
            throw new Error(`File size exceeds limit (${(file.size / (1024*1024)).toFixed(2)}MB) for ${file.name}. Max is 5MB.`);
        }
        if (!ALLOWED_TYPES.includes(file.type)) {
            throw new Error(`Invalid file type (${file.type}) for ${file.name}. Allowed: PDF, PNG, JPG.`);
        }

        const uploadDir = await ensureUploadDirExists(subDir, userId);
        const fileExtension = path.extname(file.name);
        const uniqueFilename = `${uuidv4()}${fileExtension}`;
        const localFilePath = path.join(uploadDir, uniqueFilename);
        const fileBuffer = Buffer.from(await file.arrayBuffer());
        await fs.writeFile(localFilePath, fileBuffer);
        const relativeUrl = `/uploads/${subDir}/${userId}/${uniqueFilename}`;
        console.log(`File uploaded successfully: ${relativeUrl}`);
        return relativeUrl;
    } catch (uploadError: any) {
        console.error(`Error uploading file (${file.name}) to subdir (${subDir}):`, uploadError);
        throw new Error(`Failed to upload file ${file.name}: ${uploadError.message}`);
    }
}

function parseJsonData<T>(jsonString: string | null, arrayName: string): T[] {
    if (!jsonString) return [];
    try {
        const isoDateRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3}Z)?$/;
        const simpleDateRegex = /^\d{4}-\d{2}-\d{2}$/;

        const parsedWithDates = JSON.parse(jsonString, (key, value) => {
            if (typeof value === 'string') {
                if (isoDateRegex.test(value) || simpleDateRegex.test(value)) { // Check both ISO and simple date
                    const date = new Date(value);
                    if (!isNaN(date.getTime())) return date; // Return Date object if valid
                }
            }
            return value;
        });
        if (!Array.isArray(parsedWithDates)) throw new Error(`${arrayName} data is not an array.`);
        return parsedWithDates;
    } catch (e: any) {
        console.error(`Error parsing ${arrayName} JSON:`, e.message, "String:", jsonString);
        throw new Error(`Invalid ${arrayName} data format. ${e.message}`);
    }
}

function areDatesEqual(d1: Date | string | null | undefined, d2: Date | string | null | undefined): boolean {
    if (d1 === null && d2 === null) return true;
    if (d1 === undefined && d2 === undefined) return true;
    if (!d1 || !d2) return false;
    try {
        const date1 = new Date(d1);
        const date2 = new Date(d2);
        if (isNaN(date1.getTime()) && isNaN(date2.getTime())) return true; // Both invalid, consider equal
        if (isNaN(date1.getTime()) || isNaN(date2.getTime())) return false;
        return date1.toISOString().split('T')[0] === date2.toISOString().split('T')[0];
    } catch (e) {
        return false; // Error in date parsing
    }
}

function getItemDisplayTitle(item: any, sectionKey: string): string {
    const idSuffix = item?.id ? ` (ID: ${String(item.id).substring(0, 6)}...)` : '';
    switch (sectionKey) {
        case 'academicQualifications': return (item?.degree || 'Qualification') + idSuffix;
        case 'professionalLicenses': return (item?.examination || 'License') + idSuffix;
        case 'workExperiences': return (item?.position || 'Work Exp.') + idSuffix;
        case 'professionalAffiliations': return (item?.organization || 'Affiliation') + idSuffix;
        case 'awardsRecognitions': return (item?.awardName || 'Award') + idSuffix;
        case 'professionalDevelopments': return (item?.title || 'Development') + idSuffix;
        case 'communityInvolvements': return (item?.engagementTitle || 'Involvement') + idSuffix;
        case 'publications': return (item?.researchTitle || 'Publication') + idSuffix;
        case 'conferencePresentations': return (item?.paperTitle || 'Presentation') + idSuffix;
        default: return 'Item' + idSuffix;
    }
}

interface UpdateProfileResponse { success: boolean; error?: string; }

export async function updateMyProfile(formData: FormData): Promise<UpdateProfileResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;
    const userName = session?.user?.name ?? session?.user?.email ?? `User ${userId}`;

    if (!userId) { return { success: false, error: 'Not authenticated' }; }
    console.log(`\n--- Starting updateMyProfile for user: ${userId} (${userName}) ---`);

    const uploadDirs: Record<CategoryKey, string> = {
        academicQualifications: 'qualifications',
        professionalLicenses: 'licenses',
        workExperiences: 'workexp',
        professionalAffiliations: 'affiliations',
        awardsRecognitions: 'awards',
        professionalDevelopments: 'profdev',
        communityInvolvements: 'community',
        publications: 'publications',
        conferencePresentations: 'presentations',
    };
    const urlFieldNames: Record<CategoryKey, keyof any> = {
        academicQualifications: 'diplomaFileUrl',
        professionalLicenses: 'licenseFileUrl',
        workExperiences: 'proofUrl',
        professionalAffiliations: 'membershipProofUrl',
        awardsRecognitions: 'certificateUrl',
        professionalDevelopments: 'certificateFileUrl',
        communityInvolvements: 'proofUrl',
        publications: 'pdfUrl',
        conferencePresentations: 'proofUrl',
    };
    const requiredFieldsMap: Record<CategoryKey, string[]> = {
        academicQualifications: ['degree', 'institution', 'program', 'yearCompleted'],
        professionalLicenses: ['examination', 'licenseNumber', 'monthYear', 'expiration'],
        workExperiences: ['institution', 'position', 'inclusiveYears'],
        professionalAffiliations: ['organization', 'inclusiveYears'],
        awardsRecognitions: ['awardName', 'awardingBody', 'yearReceived'],
        professionalDevelopments: ['title', 'organizer', 'dateLocation'],
        communityInvolvements: ['engagementTitle', 'role', 'locationDate'],
        publications: ['researchTitle', 'journal', 'datePublished'],
        conferencePresentations: ['paperTitle', 'eventName', 'dateLocation'],
    };
    const dateFields: Record<CategoryKey, string[]> = {
        professionalLicenses: ['expiration'],
        publications: ['datePublished'],
        academicQualifications: [], workExperiences: [], professionalAffiliations: [],
        awardsRecognitions: [], professionalDevelopments: [], communityInvolvements: [],
        conferencePresentations: [],
    };

    let filesToDeleteOnError: string[] = [];
    let filesToDeleteOnSuccess: string[] = [];
    let newProfileImageUrl: string | undefined;
    let incomingCvCategoryData: Record<string, any[]> = {}; // Parsed CV data from form

    try {
        const profileImageFile = formData.get('user_profileImageFile') as File | null;
        if (profileImageFile) {
            newProfileImageUrl = await uploadFile(profileImageFile, userId, 'profile-images');
            filesToDeleteOnError.push(newProfileImageUrl); // Add to error list in case transaction fails
            const currentUser = await prisma.user.findUnique({ where: { id: userId }, select: { profileImageUrl: true } });
            if (currentUser?.profileImageUrl) filesToDeleteOnSuccess.push(currentUser.profileImageUrl); // Old image to delete on success
            // console.log("Profile image processed. New URL (pending save):", newProfileImageUrl); // Already logged by uploadFile
        }

        const cvCategoryKeys = Object.keys(uploadDirs) as CategoryKey[];
        for (const key of cvCategoryKeys) {
            const jsonKey = `${key}_json`;
            if (formData.has(jsonKey)) {
                console.log(`Parsing JSON for category: ${key}`);
                incomingCvCategoryData[key] = parseJsonData<any>(formData.get(jsonKey) as string | null, key); // Use updated parseJsonData
            }
        }
        // --- End Pre-Transaction ---

    } catch (error: any) {
        console.error("Pre-transaction error:", error.message); // Simpler log from INPUT
        await Promise.all(filesToDeleteOnError.map(safeDeleteFile)); // Use updated safeDeleteFile
        return { success: false, error: `Preparation error: ${error.message}` };
    }

    try {
        const result = await prisma.$transaction(async (tx) => {
            console.log("Starting database transaction...");
            if (newProfileImageUrl) {
                await tx.user.update({ where: { id: userId }, data: { profileImageUrl: newProfileImageUrl } });
            }
            // Logic for user_details_json (from CONTEXT, as INPUT had placeholder)
            const userDetailsJsonString = formData.get('user_details_json') as string | null;
            if (userDetailsJsonString) {
                const parsedUserDetails = JSON.parse(userDetailsJsonString);
                // console.log(`[TX] Updating user details for ${userId}:`, parsedUserDetails);
                const userDetailsToUpdate: Partial<PrismaUser> = {};
                const allowedUserFields: (keyof PrismaUser)[] = ['name', 'dateOfBirth', 'civilStatus', 'nationality', 'contactNumber', 'address', 'employeeId', 'bio'];
                allowedUserFields.forEach(key => {
                    if (parsedUserDetails.hasOwnProperty(key)) {
                        if (key === 'dateOfBirth' && parsedUserDetails[key]) {
                            const dob = new Date(parsedUserDetails[key]);
                            (userDetailsToUpdate as any)[key] = isNaN(dob.getTime()) ? null : dob;
                        } else {
                            (userDetailsToUpdate as any)[key] = parsedUserDetails[key] === '' ? null : parsedUserDetails[key];
                        }
                    }
                });
                if (Object.keys(userDetailsToUpdate).length > 0) {
                    // console.log(`[TX] User details payload for DB:`, userDetailsToUpdate);
                    await tx.user.update({ where: { id: userId }, data: userDetailsToUpdate });
                }
            }
            // Logic for socialMediaLinks_json (from CONTEXT, as INPUT had placeholder)
            const socialMediaLinksJsonString = formData.get('socialMediaLinks_json') as string | null;
            if (socialMediaLinksJsonString) {
                const incomingSocialLinks = JSON.parse(socialMediaLinksJsonString) as Array<Partial<SocialMediaLink> & { _isNew?: boolean; id?: string }>;
                // console.log(`[TX] Updating social media links for ${userId}:`, incomingSocialLinks);

                const currentDbSocialLinks = await tx.socialMediaLink.findMany({ where: { userId: userId } });
                const currentDbLinkIds = new Set(currentDbSocialLinks.map(link => link.id));
                const incomingClientIds = new Set(incomingSocialLinks.filter(link => link.id && !link.id.startsWith('temp-')).map(link => link.id!));
                const linksToDeleteIds = Array.from(currentDbLinkIds).filter(id => !incomingClientIds.has(id));

                if (linksToDeleteIds.length > 0) {
                    await tx.socialMediaLink.deleteMany({ where: { id: { in: linksToDeleteIds }, userId: userId } });
                    // console.log(`[TX] Deleted social media links:`, linksToDeleteIds);
                }
                for (const link of incomingSocialLinks) {
                    const { _isNew, id: clientId, userId: linkUserIdIgnored, createdAt, updatedAt, ...dataToSave } = link;
                    const linkPayload = { ...dataToSave, platform: dataToSave.platform || '', url: dataToSave.url || '', userId: userId };
                    if (!linkPayload.platform || !linkPayload.url) continue;
                    if (_isNew || (clientId && clientId.startsWith('temp-'))) {
                        // console.log(`[TX] Creating social media link:`, linkPayload);
                        await tx.socialMediaLink.create({ data: linkPayload as any });
                    } else if (clientId) {
                        // console.log(`[TX] Updating social media link ${clientId}:`, linkPayload);
                        await tx.socialMediaLink.update({ where: { id: clientId, userId: userId }, data: linkPayload as any });
                    }
                }
            }

            const adminUsers = await tx.user.findMany({ where: { role: Role.ADMIN }, select: { id: true } });
            const adminIds = adminUsers.map(admin => admin.id);
            const cvCategoryKeys = Object.keys(uploadDirs) as CategoryKey[];

            for (const sectionKey of cvCategoryKeys) {
                const incomingItemsForCategory = incomingCvCategoryData[sectionKey] as Array<any & { id: string; _isNew?: boolean; _selectedFile?: File | null }> | undefined; // Type from INPUT
                
                // If a category's JSON was not sent, it means no changes (add, edit, delete) were made to it. So, skip.
                if (incomingItemsForCategory === undefined) {
                    console.log(`No data submitted for category: ${sectionKey}. DB items untouched for this category.`); // Log from INPUT
                    continue;
                }
                console.log(`Processing category: ${sectionKey} with ${incomingItemsForCategory.length} incoming items.`);

                let modelNameForPrisma: string;
                // ... (switch statement for modelNameForPrisma remains the same)
                switch (sectionKey) {
                    // --- CORRECTED MODEL NAME LOGIC ---
                    case 'academicQualifications': modelNameForPrisma = 'academicQualification'; break;
                    case 'professionalLicenses': modelNameForPrisma = 'professionalLicense'; break;
                    case 'workExperiences': modelNameForPrisma = 'workExperience'; break;
                    case 'professionalAffiliations': modelNameForPrisma = 'professionalAffiliation'; break;
                    case 'awardsRecognitions': modelNameForPrisma = 'awardRecognition'; break;
                    case 'professionalDevelopments': modelNameForPrisma = 'professionalDevelopment'; break;
                    case 'communityInvolvements': modelNameForPrisma = 'communityInvolvement'; break;
                    case 'publications': modelNameForPrisma = 'publication'; break;
                    case 'conferencePresentations': modelNameForPrisma = 'conferencePresentation'; break;
                    default:
                        console.warn(`[TX] Unknown sectionKey for Prisma model mapping: ${sectionKey}.`); // Log from INPUT
                        continue;
                }
                
                const prismaModelClient = (tx as any)[modelNameForPrisma]; // Use the mapped singular name
                if (!prismaModelClient) {
                    console.warn(`[TX] Prisma model client not found for ${modelNameForPrisma}.`); // Log from INPUT
                    continue;
                }

                const urlFieldName = urlFieldNames[sectionKey] as string; // Assert as string
                const subDir = uploadDirs[sectionKey];
                const requiredFields = requiredFieldsMap[sectionKey] || [];
                const sectionDateFields = dateFields[sectionKey] || [];

                // Get current DB items for this user and category
                const currentDbItems = await prismaModelClient.findMany({ where: { userId: userId } });
                // const currentDbItemMap = new Map(currentDbItems.map((item: any) => [item.id, item])); // From CONTEXT, not used in INPUT's loop structure
                const incomingItemClientSideIds = new Set(incomingItemsForCategory.map((item: any) => item.id)); // From INPUT

                // --- Deletions: Items in DB but not in incoming data for this category ---
                for (const dbItem of currentDbItems) {
                    if (!incomingItemClientSideIds.has(dbItem.id)) {
                        console.log(`[${sectionKey}] Deleting DB item ${dbItem.id} (not in client's submitted list for this category).`); // Log from INPUT
                        if (urlFieldName && (dbItem as any)[urlFieldName]) {
                            filesToDeleteOnSuccess.push((dbItem as any)[urlFieldName]);
                        }
                        await prismaModelClient.delete({ where: { id: dbItem.id } });
                    }
                }

                // --- Upserts: Add new or Update existing items ---
                for (const incomingItem of incomingItemsForCategory) {
                    const fileKey = `${sectionKey}_file_${incomingItem.id}`; // Assuming ID for new items is a temp UUID from client
                    const file = formData.get(fileKey) as File | null;
                    let uploadedFileUrl: string | null | undefined = undefined;

                    if (file) {
                        console.log(`[${sectionKey}] File found for item ${incomingItem.id}, uploading...`);
                        const tempUploadedUrl = await uploadFile(file, userId, subDir);
                        filesToDeleteOnError.push(tempUploadedUrl);
                        uploadedFileUrl = tempUploadedUrl;
                    }

                    // Destructuring from INPUT
                    const { _isNew, id: itemIdFromClient, _selectedFile, userId: ignoredUserId, createdAt: ignoredCreatedAt, updatedAt: ignoredUpdatedAt, status: ignoredStatus, rejectionReason: ignoredRejectionReason, ...dataToProcess } = incomingItem;
                    
                    const finalDataForPrisma: any = { ...dataToProcess, userId: userId }; // From INPUT
                    Object.keys(finalDataForPrisma).forEach(key => { // Data cleaning from INPUT (similar to CONTEXT)
                        // Data cleaning and type conversion
                        if (['yearCompleted', 'yearReceived'].includes(key) && typeof finalDataForPrisma[key] === 'string') { const num = parseInt(finalDataForPrisma[key], 10); finalDataForPrisma[key] = isNaN(num) ? null : num; }
                        if (typeof finalDataForPrisma[key] === 'string' && finalDataForPrisma[key].trim() === '' && !requiredFields.includes(key)) { finalDataForPrisma[key] = null; }
                        if (sectionDateFields.includes(key)) { if (finalDataForPrisma[key] && !(finalDataForPrisma[key] instanceof Date)) { try { const d = new Date(finalDataForPrisma[key]); finalDataForPrisma[key] = !isNaN(d.getTime()) ? d : null; } catch { finalDataForPrisma[key] = null; } } else if (finalDataForPrisma[key] instanceof Date && isNaN(finalDataForPrisma[key].getTime())) { finalDataForPrisma[key] = null; } }
                    });

                    let notifyAdmin = false;
                    // Fetch existing item inside the loop (from INPUT)
                    // Note: This is less performant than using a pre-fetched map (as in CONTEXT) for larger datasets.
                    const existingDbItem = await prismaModelClient.findUnique({ where: { id: itemIdFromClient } });

                    if (_isNew || !existingDbItem) { // Create new
                        console.log(`[${sectionKey}] Creating new item (ID: ${itemIdFromClient}).`); // Log from INPUT
                        for (const field of requiredFields) { if (finalDataForPrisma[field] === null || finalDataForPrisma[field] === undefined || String(finalDataForPrisma[field]).trim() === '') throw new Error(`Missing required field "${field}" for new ${sectionKey}.`); }
                        finalDataForPrisma.status = ApprovalStatus.PENDING;
                        finalDataForPrisma.rejectionReason = null;
                        if (urlFieldName) finalDataForPrisma[urlFieldName] = uploadedFileUrl ?? null; // Use new file or null
                        
                        // Ensure ID is provided if it's a client-generated UUID for a new item (from INPUT)
                        if (_isNew && !finalDataForPrisma.id) finalDataForPrisma.id = itemIdFromClient; 

                        await prismaModelClient.create({ data: finalDataForPrisma });
                        notifyAdmin = true;
                    } else { // Update existing
                        const updatePayload: any = {}; 
                        let needsDbUpdate = false; let significantChange = false;
                        const currentFileUrlOnDb = urlFieldName ? (existingDbItem as any)[urlFieldName] : undefined;

                        if (uploadedFileUrl !== undefined) {
                            (updatePayload as any)[urlFieldName] = uploadedFileUrl;
                            if (currentFileUrlOnDb) filesToDeleteOnSuccess.push(currentFileUrlOnDb);
                            significantChange = true; needsDbUpdate = true;
                        }
                        
                        Object.keys(finalDataForPrisma).forEach(key => { // Field comparison from INPUT
                            if (key !== 'userId' && key !== 'id' && key !== urlFieldName) { // Exclude ID and URL field if handled by file upload
                                const clientVal = finalDataForPrisma[key];
                                const dbVal = (existingDbItem as any)[key];
                                const fieldHasChanged = sectionDateFields.includes(key) ? !areDatesEqual(clientVal, dbVal) : clientVal !== dbVal;
                                if (fieldHasChanged) {
                                    // console.log(`[${sectionKey}] Item ${itemIdFromClient}, field '${key}' changed from '${dbVal}' to '${clientVal}'`); // Optional detailed log
                                    updatePayload[key] = clientVal; needsDbUpdate = true;
                                    const keyFieldsForStatusReset = [...requiredFields, 'degree', 'program', 'examination', 'title', 'awardName', 'researchTitle', 'paperTitle', 'position'];
                                    if (keyFieldsForStatusReset.includes(key)) significantChange = true;
                                }
                            }
                        });
                        
                        // Status update logic from INPUT
                        if (significantChange && existingDbItem.status !== ApprovalStatus.PENDING) {
                            updatePayload.status = ApprovalStatus.PENDING; updatePayload.rejectionReason = null;
                            notifyAdmin = true; // needsDbUpdate is true if significantChange is true
                        } else if (existingDbItem.status === ApprovalStatus.REJECTED && needsDbUpdate && !significantChange) {
                            updatePayload.status = ApprovalStatus.PENDING; updatePayload.rejectionReason = null;
                            notifyAdmin = true;
                        }
                        else if (needsDbUpdate && !updatePayload.status) { // If status not already set by above, preserve
                             updatePayload.status = existingDbItem.status; 
                             updatePayload.rejectionReason = existingDbItem.rejectionReason;
                        }

                        if (needsDbUpdate) {
                            console.log(`[${sectionKey}] Updating item ${itemIdFromClient}. Payload:`, updatePayload);
                            await prismaModelClient.update({ where: { id: itemIdFromClient }, data: updatePayload });
                        } else {
                            console.log(`[${sectionKey}] No database update needed for item ${itemIdFromClient}.`);
                        }
                    }

                    // Notification logic (from CONTEXT, as INPUT had placeholder)
                    if (notifyAdmin && adminIds.length > 0) {
                        const itemTitle = getItemDisplayTitle(incomingItem, sectionKey);
                        const message = `${userName} submitted "${itemTitle}" (${sectionKey.replace(/([A-Z])/g, ' $1').trim()}) for approval.`;
                        await tx.notification.createMany({
                            data: adminIds.map(adminId => ({ userId: adminId, message: message, link: '/admin/approvals' }))
                        });
                    }
                    
                    // If file was successfully processed and part of DB op, remove from error deletion list
                    if (uploadedFileUrl) {
                        filesToDeleteOnError = filesToDeleteOnError.filter(f => f !== uploadedFileUrl);
                    }
                }
            }
            return { success: true };
        });
        // End Prisma Transaction

        if (result.success && filesToDeleteOnSuccess.length > 0) {
            const uniqueFilesToDelete = [...new Set(filesToDeleteOnSuccess.filter(f => f))];
            console.log("Post-transaction: Attempting to delete old/replaced files:", uniqueFilesToDelete); // Log from INPUT
            await Promise.all(uniqueFilesToDelete.map(safeDeleteFile)); // Use updated safeDeleteFile
        }
        // Revalidation from CONTEXT (same as INPUT)
        if (result.success) {
            revalidatePath('/profile');
            revalidatePath('/admin/approvals');
            revalidatePath('/documents');
        }
        console.log(`--- Finished updateMyProfile for user: ${userId} ---`);
        return { success: result.success };

    } catch (error: any) {
        console.error("Error in updateMyProfile transaction or file ops:", error); // Log from INPUT
        // console.log("Attempting to delete files uploaded during this failed attempt:", filesToDeleteOnError); // This log was in CONTEXT, not INPUT
        await Promise.all(filesToDeleteOnError.map(safeDeleteFile)); // Use updated safeDeleteFile
        return { success: false, error: error.message || 'Update profile error.' }; // Error message from INPUT
    }
}

export async function getMyProfileData(): Promise<UserProfilePageData | { error: string }> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;

    if (!userId) {
        // console.error("getMyProfileData: User not authenticated."); // INPUT doesn't log here
        return { error: 'Not authenticated' };
    }

    try {
        console.log(`getMyProfileData: Fetching profile data for user ${userId}`); // Log from INPUT
        const userWithRelations = await prisma.user.findUnique({
            where: { id: userId },
            include: {
                academicQualifications: { orderBy: { yearCompleted: 'desc' } },
                professionalLicenses: { orderBy: { createdAt: 'desc' } },
                workExperiences: { orderBy: { createdAt: 'desc' } },
                professionalAffiliations: { orderBy: { createdAt: 'desc' } },
                awardsRecognitions: { orderBy: { yearReceived: 'desc' } },
                professionalDevelopments: { orderBy: { createdAt: 'desc' } },
                communityInvolvements: { orderBy: { createdAt: 'desc' } },
                publications: { orderBy: { datePublished: 'desc' } },
                conferencePresentations: { orderBy: { createdAt: 'desc' } },
                socialMediaLinks: { orderBy: { platform: 'asc' } },
                // NOTE: 'notifications', 'passwordResetTokens', 'specializations' are NOT included here
                // because ProfileUser type does not expect them. If they were needed, they'd be added here.
            }
        });

        if (!userWithRelations) {
            // console.error(`getMyProfileData: User not found with ID ${userId}`); // INPUT doesn't log here
            return { error: 'User not found' };
        }

        const {
            password, // Excluded from ProfileUser
            // The following are relations not part of ProfileUser, so they are correctly excluded by `...userCoreFields`
            // if not explicitly listed in the `include` for ProfileUser's specific needs.
            // notifications, (if it were included above)
            // passwordResetTokens, (if it were included above)
            // specializations, (if it were included above)

            // Relational arrays that are part of UserProfilePageData, but not ProfileUser directly
            academicQualifications: aq,
            professionalLicenses: pl,
            workExperiences: we,
            professionalAffiliations: pa,
            awardsRecognitions: ar,
            professionalDevelopments: pd,
            communityInvolvements: ci,
            publications: pub,
            conferencePresentations: cp,
            socialMediaLinks: sml, // This IS part of ProfileUser
            ...userCoreFields // These are the direct, scalar fields of the User model
        } = userWithRelations;

        const profileUser: ProfileUser = {
            ...userCoreFields, // Spread the core, non-relational fields
            socialMediaLinks: sml || [], // Add the socialMediaLinks array as it's part of ProfileUser
        };

        return {
            user: profileUser,
            academicQualifications: aq || [],
            professionalLicenses: pl || [],
            workExperiences: we || [],
            professionalAffiliations: pa || [],
            awardsRecognitions: ar || [],
            professionalDevelopments: pd || [],
            communityInvolvements: ci || [],
            publications: pub || [],
            conferencePresentations: cp || [],
        };

    } catch (e: any) {
        console.error(`getMyProfileData Error for user ${userId}:`, e); // Log from INPUT
        return { error: `Failed to fetch profile data: ${e.message}` }; // Error message from INPUT
    }
}
--- END FILE: src\lib\userActions.ts ---

--- START FILE: src\lib\utils.ts ---
[EMPTY FILE]
--- END FILE: src\lib\utils.ts ---

--- START FILE: src\types\index.ts ---
// src/types/index.ts
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation,
    SocialMediaLink,
    ApprovalStatus, Specialization, Course // Added Course
} from '@/generated/prisma'; // Assuming this is the correct path to your Prisma-generated types
import type { Role as PrismaRole } from '@/generated/prisma';
import prisma from '@/lib/prisma'; // Assuming prisma client is available for model key mapping

// Common temporary properties used during editing state
export type TempCommon = {
    _isNew?: boolean; // Flag to indicate if the item was added locally
    id: string;      // Needs ID (can be temporary UUID for new items or real ID for existing)
};

// Specific temporary types for each section
// Ensure these include all fields from Prisma types + TempCommon + _selectedFile + status + rejectionReason
export type TempAcademicQualification = AcademicQualification & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalDevelopment = ProfessionalDevelopment & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalLicense = ProfessionalLicense & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempWorkExperience = WorkExperience & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalAffiliation = ProfessionalAffiliation & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempAwardRecognition = AwardRecognition & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempCommunityInvolvement = CommunityInvolvement & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempPublication = Publication & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempConferencePresentation = ConferencePresentation & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempSocialMediaLink = SocialMediaLink & TempCommon & { _isNew?: boolean; };


// Union type representing any possible item within the editableData state arrays for CV sections
export type EditableCvItem =
    | TempAcademicQualification
    | TempProfessionalLicense
    | TempWorkExperience
    | TempProfessionalAffiliation
    | TempAwardRecognition
    | TempProfessionalDevelopment
    | TempCommunityInvolvement
    | TempPublication
    | TempConferencePresentation;

// Type mapping for item types used in admin actions and profile page logic
export type ItemType =
    | 'academicQualification'
    | 'professionalLicense'
    | 'workExperience'
    | 'professionalAffiliation'
    | 'awardRecognition'
    | 'professionalDevelopment'
    | 'communityInvolvement'
    | 'publication'
    | 'conferencePresentation';

// Key type for CV categories, derived from the ItemType for consistency
// This will be used for categoryMetadata and managing CV sections.
export type CategoryKey =
    | 'academicQualifications'
    | 'professionalLicenses'
    | 'workExperiences'
    | 'professionalAffiliations'
    | 'awardsRecognitions'
    | 'professionalDevelopments'
    | 'communityInvolvements'
    | 'publications'
    | 'conferencePresentations';


// --- Define Evidence Source (Used by old keyword scanning, might be obsolete but kept from context) ---
export interface EvidenceSource {
    source: string;
    evidence: string;
}

// --- Define Faculty Specialization Detail (Used by old keyword scanning, might be obsolete but kept from context) ---
export interface FacultySpecializationDetail {
    userId: string;
    name: string | null;
    email: string | null;
    specializationDetails: {
        [specializationKeyword: string]: EvidenceSource[];
    };
}

// --- Define Admin Actions Response Type (For old keyword scanning, might be obsolete but kept from context) ---
export interface GetSpecializationResponse { // This name might be confusing if it's for the matrix
    success: boolean;
    data?: FacultySpecializationDetail[];
    error?: string;
}

// --- Type for data returned by the REVISED getFacultySpecializationData action for the matrix ---
export interface FacultyLinkedSpecialization {
    userId: string;
    name: string | null;
    email: string | null;
    linkedSpecializationNames: string[];
}

// --- Response type for the REVISED getFacultySpecializationData action (Matrix Data) ---
export interface GetMatrixDataResponse {
    success: boolean;
    data?: FacultyLinkedSpecialization[];
    allSpecializationNames?: string[];
    error?: string;
}

// Helper function to map Prisma model names to ItemType strings
// (Useful for admin actions if needed, but Prisma client uses camelCase keys directly)
export function getModelKeyFromItemType(itemType: ItemType): keyof typeof prisma {
    const map: Record<ItemType, keyof typeof prisma> = {
        academicQualification: 'academicQualification',
        professionalLicense: 'professionalLicense',
        workExperience: 'workExperience',
        professionalAffiliation: 'professionalAffiliation',
        awardRecognition: 'awardRecognition',
        professionalDevelopment: 'professionalDevelopment',
        communityInvolvement: 'communityInvolvement',
        publication: 'publication',
        conferencePresentation: 'conferencePresentation',
    };
    return map[itemType];
}

// --- Response type for the action that gets ALL specializations (Prisma Specialization type) ---
export interface GetAllSpecializationsResponse { // Renamed for clarity
    success: boolean;
    specializations?: Specialization[];
    error?: string;
}

// Type for User object within ProfileData, including socialMediaLinks
// This should align with what getMyProfileData and getFacultyProfileById return for the 'user' field.
export interface ProfileUser extends Omit<import('@/generated/prisma').User, 'password' | 'emailVerified' | 'notifications' | 'passwordResetTokens' | 'specializations' | 'academicQualifications' | 'professionalLicenses' | 'workExperiences' | 'professionalAffiliations' | 'awardsRecognitions' | 'professionalDevelopments' | 'communityInvolvements' | 'publications' | 'conferencePresentations'> {
    socialMediaLinks: SocialMediaLink[]; // Explicitly include this
    // Add other fields if they are directly on the user object and needed, e.g., specializations if fetched directly with user
}

// Type for the overall profile data structure fetched by getMyProfileData
export interface UserProfilePageData {
    user: ProfileUser | null; // Use the more specific ProfileUser type
    academicQualifications: AcademicQualification[];
    professionalLicenses: ProfessionalLicense[];
    workExperiences: WorkExperience[];
    professionalAffiliations: ProfessionalAffiliation[];
    awardsRecognitions: AwardRecognition[];
    professionalDevelopments: ProfessionalDevelopment[];
    communityInvolvements: CommunityInvolvement[];
    publications: Publication[];
    conferencePresentations: ConferencePresentation[];
    // socialMediaLinks are part of the user object now
    error?: string; // For actions returning this structure with a potential error
}

// Type for editable data on the profile page, mirroring UserProfilePageData but with Temp types
export type EditableProfilePageData = {
    user?: Partial<ProfileUser> | null; // User details can be partially updated
    academicQualifications?: TempAcademicQualification[];
    professionalLicenses?: TempProfessionalLicense[];
    workExperiences?: TempWorkExperience[];
    professionalAffiliations?: TempProfessionalAffiliation[];
    awardsRecognitions?: TempAwardRecognition[];
    professionalDevelopments?: TempProfessionalDevelopment[];
    communityInvolvements?: TempCommunityInvolvement[];
    publications?: TempPublication[];
    conferencePresentations?: TempConferencePresentation[];
    socialMediaLinks?: TempSocialMediaLink[]; // Social media links are also editable
};
--- END FILE: src\types\index.ts ---

--- START FILE: src\middleware.ts ---
// Action: Modify src/middleware.ts

import { withAuth } from "next-auth/middleware";
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import type { JWT } from "next-auth/jwt";

// Export the default middleware function configured with withAuth
export default withAuth(
    // `withAuth` augments your `Request` with the user's token.
    // This inner function runs ONLY if the user is authenticated (token exists).
    function middleware(req) {
        const token = req.nextauth.token as JWT & { role?: string }; // Token is guaranteed here
        const { pathname } = req.nextUrl;

        // --- Redirect authenticated users from homepage ---
        if (pathname === '/') {
            const userRole = token.role;
            const targetUrl = userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard';
            console.log(`Authenticated user on '/', redirecting to ${targetUrl}`);
            return NextResponse.redirect(new URL(targetUrl, req.url));
        }

        // --- Role-Based Access Control for /admin ---
        if (pathname.startsWith('/admin')) {
            if (token?.role !== 'ADMIN') {
                console.warn(`Unauthorized access attempt to ${pathname} by user role: ${token?.role}`);
                 return NextResponse.redirect(new URL('/dashboard', req.url));
            }
             return NextResponse.next();
        }

        // --- General Authenticated Access ---
        // For any other authenticated route covered by the matcher (like /dashboard, /profile)
        // allow the request to proceed.
        return NextResponse.next();
    },
    {
        callbacks: {
            authorized: ({ token }) => !!token
        },
        pages: {
            signIn: "/login",
        },
    }
);

// --- Route Matching ---
// *** UPDATED MATCHER ***
// Exclude API, static files, images, favicon, AND public auth pages.
export const config = {
    matcher: [
        /*
         * Match all request paths except for the ones starting with:
         * - api (API routes including /api/auth)
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         * - login (the login page itself)
         * - forgot-password (password reset request page)
         * - reset-password (password reset page)
         * The negative lookahead `(?!...)` correctly excludes these.
         * The pattern `.*` after the lookahead WILL match the root path '/'.
         */
        '/((?!api|_next/static|_next/image|favicon.ico|login|forgot-password|reset-password).*)',

        // Keep explicit protected paths if you prefer strictness, though the pattern covers them.
        '/dashboard/:path*',
        '/profile/:path*',
        '/documents/:path*',
        '/admin/:path*',
    ],
};
--- END FILE: src\middleware.ts ---

--- START FILE: .gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# Local Uploads (Development Only!)
/public/uploads/

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

--- END FILE: .gitignore ---

--- START FILE: create_context.ps1 ---
# Define directories/files/extensions to exclude
$excludeDirs = @("node_modules", ".git", ".next", "generated") # Directories containing these names will be excluded
$excludeFiles = @(".env*", "package-lock.json", "yarn.lock", "create_context.ps1", "project_context.txt") # Specific files/patterns to exclude by name
$excludeExtensions = @(".png", ".jpg", ".jpeg", ".gif", ".webp", ".ico", ".svg", ".woff", ".woff2", ".ttf", ".eot", ".pdf", ".zip", ".exe", ".dll", ".db") # Exclude common binary/generated/database files

# Output file path
$outputFile = ".\project_context.txt"
Write-Host "--- Starting Context Script ---"
Write-Host "Output file target: $outputFile"
$currentDir = $PWD.Path
Write-Host "Running in directory: $currentDir"

# Clear output file or create if not exists
if (Test-Path $outputFile) {
    Clear-Content -Path $outputFile
    Write-Host "Cleared existing output file."
} else {
    New-Item -Path $outputFile -ItemType File -Force | Out-Null
    Write-Host "Created new output file."
}


# Get all files recursively
Write-Host "Searching for files..."
try {
    $allFiles = Get-ChildItem -Path . -Recurse -File -ErrorAction SilentlyContinue
    Write-Host "Found $($allFiles.Count) total items initially."
} catch {
     Write-Error "Failed to list files initially: $($_.Exception.Message)"
     exit 1
}


$processedCount = 0
$excludedCount = 0

# Process each file found
foreach ($item in $allFiles) {
    $filePath = $item.FullName
    # Ensure relative path calculation is robust
    if ($filePath.StartsWith($currentDir)) {
         $relativePath = $item.FullName.Substring($currentDir.Length).TrimStart('\/')
         if ($relativePath -eq "") { $relativePath = $item.Name } # Handle files in root
    } else {
         $relativePath = $item.FullName # Fallback
    }

    # --- Exclusion Checks ---
    $isExcluded = $false
    $exclusionReason = ""

    # Check if path contains any excluded directory names (Improved Check)
    foreach ($dir in $excludeDirs) {
        # Check if any part of the directory path matches the excluded dir name
        if (($item.DirectoryName -split '[\\/]') -contains $dir) {
            $isExcluded = $true
            $exclusionReason = "Directory ($dir)"
            break
        }
    }

    # Check if file name matches excluded patterns (if not already excluded)
    if (-not $isExcluded) {
        foreach ($filePattern in $excludeFiles) {
            if ($item.Name -like $filePattern) {
                $isExcluded = $true
                $exclusionReason = "File Pattern ($filePattern)"
                break
            }
        }
    }

    # Check if file extension matches excluded extensions (if not already excluded)
     if (-not $isExcluded) {
        foreach ($ext in $excludeExtensions) {
             if ($item.Extension -eq $ext) {
                 $isExcluded = $true
                 $exclusionReason = "Extension ($ext)"
                 break
             }
        }
    }

    # --- Processing or Skipping ---
    if ($isExcluded) {
        $excludedCount++
        # Write-Host "Skipping (Excluded: $exclusionReason): $relativePath"
    } else {
        # File is not excluded, try to process it
        Write-Host "Processing: $relativePath"
        $processedCount++
        $fileContentRead = $false
        $content = "[ERROR: Could not read file content]" # Default error message

        try {
            # Add file header to output first
            Add-Content -Path $outputFile -Value "--- START FILE: $relativePath ---"

            # Check if file has content before reading
            if ($item.Length -gt 0) {
                # Attempt 1: Use -LiteralPath and -Encoding UTF8 (Most robust)
                try {
                    $content = Get-Content -LiteralPath $filePath -Encoding UTF8 -ErrorAction Stop | Out-String
                    $fileContentRead = $true
                    # Write-Host "Read using -LiteralPath -Encoding UTF8" # Debugging
                } catch {
                     Write-Warning "WARNING: Failed using -LiteralPath -Encoding UTF8 for '$relativePath'. Error: $($_.Exception.Message)"
                    # Attempt 2: Use -LiteralPath without explicit Encoding
                    try {
                         $content = Get-Content -LiteralPath $filePath -ErrorAction Stop | Out-String
                         $fileContentRead = $true
                         Write-Host "Read using -LiteralPath (no encoding specified)" # Debugging
                    } catch {
                         Write-Warning "WARNING: Failed using -LiteralPath for '$relativePath'. Error: $($_.Exception.Message)"
                         # Attempt 3: Original path without -LiteralPath (fallback)
                         try {
                              $content = Get-Content -Path $filePath -Encoding UTF8 -ErrorAction Stop | Out-String
                              $fileContentRead = $true
                              Write-Host "Read using -Path -Encoding UTF8 (fallback)" # Debugging
                         } catch {
                              Write-Warning "WARNING: Failed using -Path -Encoding UTF8 for '$relativePath'. Error: $($_.Exception.Message)"
                              try {
                                   $content = Get-Content -Path $filePath -ErrorAction Stop | Out-String
                                   $fileContentRead = $true
                                   Write-Host "Read using -Path (no encoding, fallback)" # Debugging
                              } catch {
                                   # Final failure
                                    Write-Error "ERROR: All attempts failed to read file '$relativePath'. Error: $($_.Exception.Message)"
                                    # Keep default error message for $content
                              }
                         }
                    }
                }
            } else {
                # File is empty
                 $content = "[EMPTY FILE]"
                 $fileContentRead = $true # Mark as "read" since we know it's empty
            }

            # Add the content (or error message) to the output file
            Add-Content -Path $outputFile -Value $content

            # Add file footer to output
            Add-Content -Path $outputFile -Value "`n--- END FILE: $relativePath ---`n"

        } catch {
            # Catch any broader error during the Add-Content stages etc.
            $errorMessage = "ERROR processing block for file '$relativePath': $($_.Exception.Message)"
            Write-Error $errorMessage
            # Ensure footer is added even on outer error
            Add-Content -Path $outputFile -Value $errorMessage
            Add-Content -Path $outputFile -Value "`n--- END FILE: $relativePath ---`n"
        }
    }
}

Write-Host "--- Script Finished ---"
Write-Host "Processed $processedCount files."
Write-Host "Excluded $excludedCount files."
Write-Host "Output saved to: $outputFile"

# Optional: Copy to clipboard (Windows) - Uncomment if desired
# Get-Content -Path $outputFile | Set-Clipboard
# if ($?) { Write-Host "Output also copied to clipboard." }
--- END FILE: create_context.ps1 ---

--- START FILE: eslint.config.mjs ---
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

--- END FILE: eslint.config.mjs ---

--- START FILE: generate-tree.cjs ---
const fs = require('fs').promises;
const path = require('path');

// --- Configuration ---
const rootDir = '.'; // Use '.' for the current directory
const outputFile = 'project-tree.txt';
const ignoreList = [
    // Core ignores
    'node_modules',
    '.next',
    '.git',
    // Build/Cache/Output
    'dist',
    'build',
    'out',
    'coverage',
    '.swc',
    // Editor/OS specific
    '.vscode',
    '.idea',
    '.DS_Store',
    'Thumbs.db',
    // Logs & Environment files (often sensitive or noisy)
    '.env',
    '.env.local',
    '.env.development',
    '.env.production',
    '.env.test',
    'npm-debug.log*',
    'yarn-debug.log*',
    'yarn-error.log*',
    '*.log',

    // --- NEWLY ADDED / REFINED IGNORES ---
    'migrations',         // Ignore prisma migrations directory
    'dev.db',             // Ignore local dev database file
    'uploads',            // Ignore user uploads directory within public/
    'generated',          // Ignore generated code directories (like Prisma client in src/generated)
    'package-lock.json',  // Ignore lock files (add others if needed: yarn.lock, pnpm-lock.yaml)
    'yarn.lock',
    'pnpm-lock.yaml',
    'next-env.d.ts',      // Ignore Next.js auto-generated types
    'generate-tree.js',   // Ignore this script itself
    // --- End NEWLY ADDED / REFINED IGNORES ---

    outputFile // Ignore the script's own output file (already present)
];
// --- End Configuration ---

const ignoreSet = new Set(ignoreList);

async function generateTree(dir, prefix = '') {
    let output = '';
    let entries;

    try {
        // Read directory contents, getting file types directly
        entries = await fs.readdir(dir, { withFileTypes: true });
    } catch (err) {
        // Handle potential permission errors gracefully
        console.warn(`\n[Warning] Could not read directory: ${dir} (${err.code || err.message})`);
        return `${prefix}└── [Error reading directory]\n`;
    }

    // Filter out ignored entries
    const filteredEntries = entries.filter(entry => !ignoreSet.has(entry.name));

    // Sort entries: directories first, then files, alphabetically
    filteredEntries.sort((a, b) => {
        if (a.isDirectory() && !b.isDirectory()) return -1;
        if (!a.isDirectory() && b.isDirectory()) return 1;
        return a.name.localeCompare(b.name);
    });

    for (let i = 0; i < filteredEntries.length; i++) {
        const entry = filteredEntries[i];
        const connector = i === filteredEntries.length - 1 ? '└── ' : '├── ';
        const entryPath = path.join(dir, entry.name);

        output += prefix + connector + entry.name + '\n';

        if (entry.isDirectory()) {
            const newPrefix = prefix + (i === filteredEntries.length - 1 ? '    ' : '│   ');
            // Recursively call for subdirectories
            output += await generateTree(entryPath, newPrefix);
        }
        // Files are just listed, no further recursion needed
    }
    return output;
}

async function main() {
    const resolvedRootDir = path.resolve(rootDir);
    console.log(`Generating project tree for: ${resolvedRootDir}`);
    console.log(`Ignoring: ${Array.from(ignoreSet).join(', ')}`);

    // Start the tree output with the root directory name
    let treeOutput = path.basename(resolvedRootDir) + '\n';
    treeOutput += await generateTree(resolvedRootDir); // Pass resolved path

    try {
        await fs.writeFile(outputFile, treeOutput);
        console.log(`\nProject tree successfully saved to: ${outputFile}`);
    } catch (err) {
        console.error(`\n[Error] Failed to write output file: ${outputFile}`, err);
    }
}

main().catch(console.error);
--- END FILE: generate-tree.cjs ---

--- START FILE: next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

--- END FILE: next-env.d.ts ---

--- START FILE: next.config.ts ---
// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  // The 'images' configuration block
  images: {
    // Keep your existing SVG settings if needed
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",

    // Configure allowed external image domains here
    remotePatterns: [
      // Keep existing patterns if you still need them (e.g., for ucarecdn)
      {
        protocol: 'https',
        hostname: 'ucarecdn.com', // Google logo source
        port: '',
        pathname: '/**', // Allow any path on this host
      },

      // --- THIS IS THE NEW PATTERN YOU NEED TO ADD ---
      {
        protocol: 'https',                // Protocol used by the site (usually https)
        hostname: 'www.spcdavao.edu.ph',  // The specific domain name
        port: '',                         // Leave empty for default ports (80/443)
        pathname: '/wp-content/uploads/**', // Allow images specifically from the uploads path
                                          // Using '/**' would allow any path, '/wp-content/uploads/**' is slightly more specific/secure
      },
      // --- END OF NEW PATTERN ---

      // Add any other domains you might need here in the future
    ],
  },
  // Add other Next.js configurations here if you have them (e.g., reactStrictMode)
};

// Export the configuration object
export default nextConfig;
--- END FILE: next.config.ts ---

--- START FILE: package.json ---
{
  "name": "smls-sfms",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "seed": "node prisma/seed.cjs",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.6.0",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^3.0.2",
    "next": "15.3.1",
    "next-auth": "^4.24.11",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "uuid": "^11.1.0",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20.17.32",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "postcss": "^8.5.3",
    "prisma": "^6.6.0",
    "tailwindcss": "^3.4.17",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  }
}

--- END FILE: package.json ---

--- START FILE: postcss.config.mjs ---
// postcss.config.mjs (Using export default for ES Module compatibility)
const config = {
  plugins: {
    tailwindcss: {}, // For v3
    autoprefixer: {}, // For v3
  }
};
export default config; // Use export default
--- END FILE: postcss.config.mjs ---

--- START FILE: tailwind.config.ts ---
// tailwind.config.ts
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-inter)', 'sans-serif'],
      },
      colors: {
        'spc-blue': {
          main: '#003153',
          light: '#004A7C',
          lighter: '#E0F2FE',
          darker: '#002742',
        },
        'smls-gold': {
          DEFAULT: '#FFB81C',
          light: '#FFD466',
          dark: '#E6A000',
        },
      },
      // textShadow can be kept or removed for now if you suspect it
      textShadow: {
        sm: '0 1px 2px var(--tw-shadow-color)',
        DEFAULT: '0 2px 4px var(--tw-shadow-color)',
        lg: '0 8px 16px var(--tw-shadow-color)',
      },
    },
  },
  plugins: [
    function ({ matchUtilities, theme }: { matchUtilities: any, theme: any }) {
      matchUtilities(
        {
          'text-shadow': (value: any) => ({
            textShadow: value,
          }),
        },
        { values: theme('textShadow') }
      )
    },
  ],
};
export default config;
--- END FILE: tailwind.config.ts ---

--- START FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "prisma/seed.cjs"],
  "exclude": ["node_modules"]
}

--- END FILE: tsconfig.json ---


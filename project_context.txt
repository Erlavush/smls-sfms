--- Project Context for smls-sfms ---
--- Generated on: 2025-05-02T10:13:09.743Z ---
--- Root Directory: c:\Users\user\smls-sfms ---

--- START FILE: .roo\mcp.json ---
{
  "mcpServers": {}
}
--- END FILE: .roo\mcp.json ---

--- START FILE: prisma\schema.prisma ---
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Keep custom output path
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define the possible roles for users
enum Role {
  FACULTY
  ADMIN
}

// --- ADDED: Approval Status Enum ---
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
// --- END ADDED ---

// Define the User model
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(FACULTY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  academicQualifications AcademicQualification[]
  professionalLicenses   ProfessionalLicense[]
  workExperiences        WorkExperience[]
  professionalAffiliations ProfessionalAffiliation[]
  awardsRecognitions     AwardRecognition[]
  professionalDevelopments ProfessionalDevelopment[]
  communityInvolvements  CommunityInvolvement[]
  publications           Publication[]
  conferencePresentations ConferencePresentation[]
}

// --- CV Related Models (Add status and rejectionReason to ALL below) ---

model AcademicQualification {
  id            String   @id @default(cuid())
  degree        String
  institution   String
  program       String
  yearCompleted Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diplomaFileUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ProfessionalLicense {
  id            String   @id @default(cuid())
  examination   String
  monthYear     String
  licenseNumber String   @unique
  expiration    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseFileUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model WorkExperience {
  id             String   @id @default(cuid())
  institution    String
  position       String
  natureOfWork   String?
  inclusiveYears String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl       String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ProfessionalAffiliation {
  id                String   @id @default(cuid())
  organization      String
  position          String?
  inclusiveYears    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  membershipProofUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model AwardRecognition {
  id             String   @id @default(cuid())
  awardName      String
  awardingBody   String
  yearReceived   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ProfessionalDevelopment {
  id                String   @id @default(cuid())
  title             String
  organizer         String
  dateLocation      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateFileUrl String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model CommunityInvolvement {
  id              String   @id @default(cuid())
  engagementTitle String
  role            String
  locationDate    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl        String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model Publication {
  id            String   @id @default(cuid())
  researchTitle String
  journal       String
  datePublished DateTime
  doiLink       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfUrl        String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}

model ConferencePresentation {
  id            String   @id @default(cuid())
  paperTitle    String
  eventName     String
  dateLocation  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proofUrl      String?

  // --- ADDED ---
  status          ApprovalStatus @default(PENDING)
  rejectionReason String?
  // --- END ADDED ---
}
--- END FILE: prisma\schema.prisma ---

--- START FILE: src\app\(auth)\login\page.tsx ---
'use client';
import React, { useState, FormEvent } from 'react';
import { signIn, getSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image'; // Ensure next/image is imported

export default function LoginPage() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const router = useRouter();

    // Handler for credential-based form submission (remains the same)
    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
        // ... (submission logic remains the same)
        event.preventDefault();
        setError(null);
        setIsLoading(true);
        try {
            const result = await signIn('credentials', {
                redirect: false,
                email,
                password,
            });

            if (result?.error) {
                setIsLoading(false);
                setError("Invalid email or password. Please try again.");
                console.error("SignIn Error:", result.error);
            } else if (result?.ok) {
                const session = await getSession();
                const userRole = (session?.user as any)?.role;
                console.log("Login successful, Role:", userRole);
                router.push(userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard');
            } else {
                setIsLoading(false);
                setError("Login failed due to an unknown error. Please try again.");
                console.error("SignIn Unknown State:", result);
            }
        } catch (err) {
            setIsLoading(false);
            setError("An unexpected error occurred. Please check your connection and try again.");
            console.error("Login Catch Error:", err);
        }
    };

    // Placeholder handler for Google Sign-In button (remains the same)
    const handleGoogleSignIn = () => {
       alert("Google Sign-In is not configured yet.");
    }

    return (
        // Main container: Apply gradient background
        <div className="flex min-h-screen w-full items-center justify-center bg-gradient-to-br from-sky-100 to-blue-200 px-4 py-8 font-poppins">

            {/* Wrapper for the three-column layout on larger screens */}
            <div className="flex w-full max-w-6xl items-center justify-center lg:justify-between">

                 {/* Left Column (SPC Logo): Hidden on screens smaller than 'lg' */}
                 <div className="hidden lg:flex lg:w-1/4 items-center justify-center p-4">
                     <Image
                        src="/spc-logo.png"
                        alt="San Pedro College Logo"
                        width={250}
                        height={300}
                        className="object-contain"
                    />
                 </div>

                 {/* Center Column (Login Form Card) */}
                 <div className="w-full max-w-md lg:w-1/2 lg:max-w-md lg:px-8 flex justify-center">
                     {/* Container for the card */}
                     <div className="w-full">
                         {/* Gradient border effect - Using softer blues */}
                         <div className="rounded-3xl bg-gradient-to-r from-sky-400 to-blue-500 p-1 shadow-2xl"> {/* Changed gradient, increased shadow */}
                             {/* Inner white card - Kept white for contrast */}
                            <div className="rounded-[22px] bg-white p-8 sm:p-10">

                                <h1 className="cursor-default pb-6 text-center text-4xl font-bold text-gray-800"> {/* Slightly lighter text */}
                                    Log in
                                </h1>

                                <form onSubmit={handleSubmit} className="space-y-5">
                                    {error && (
                                        <div className="rounded border border-red-300 bg-red-50 p-3 text-center text-sm font-medium text-red-700" role="alert">
                                            {error}
                                        </div>
                                    )}
                                    {/* Email Input */}
                                    <div>
                                        <label htmlFor="email" className="mb-1.5 block text-sm font-medium text-gray-600">Email</label> {/* Lighter label */}
                                        <input
                                            id="email" name="email" type="email" placeholder="Email" required disabled={isLoading}
                                            value={email} onChange={(e) => setEmail(e.target.value)}
                                            className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50" // Adjusted text color
                                        />
                                    </div>
                                    {/* Password Input */}
                                    <div>
                                        <label htmlFor="password" className="mb-1.5 block text-sm font-medium text-gray-600">Password</label> {/* Lighter label */}
                                        <input
                                            id="password" name="password" type="password" placeholder="Password" required disabled={isLoading}
                                            value={password} onChange={(e) => setPassword(e.target.value)}
                                            className="w-full rounded-lg border border-gray-300 px-3 py-2.5 text-base text-gray-700 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 disabled:opacity-50" // Adjusted text color
                                        />
                                    </div>
                                    {/* Forget Password Link - Adjusted color */}
                                    <div className="text-right">
                                        <Link href="#" className="text-sm text-sky-600 hover:text-sky-700 hover:underline"> Forget your password? </Link>
                                    </div>
                                    {/* Submit Button - Matching softer gradient */}
                                    <button
                                        type="submit" disabled={isLoading}
                                        className="mt-6 w-full rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2.5 text-sm font-semibold uppercase tracking-wider text-white shadow-md transition duration-300 ease-in-out hover:from-sky-600 hover:to-blue-700 disabled:opacity-60 disabled:cursor-not-allowed"> {/* Changed gradient and hover */}
                                        {isLoading ? 'LOGGING IN...' : 'LOG IN'}
                                    </button>
                                </form>
                                {/* Sign Up - Adjusted color */}
                               <div className="mt-5 text-center text-sm">
                                    <span className="text-gray-500">Don't have an account?{' '}</span> {/* Lighter text */}
                                    <Link href="#" className="font-semibold text-sky-600 hover:text-sky-700 hover:underline"> Sign Up </Link>
                               </div>
                                {/* Separator - Adjusted color */}
                               <div className="my-6 flex items-center">
                                    <hr className="flex-grow border-t border-gray-300" /> {/* Slightly darker line */}
                                    <span className="px-2 text-xs font-medium text-gray-500 uppercase">OR CONTINUE WITH</span> {/* Darker text */}
                                    <hr className="flex-grow border-t border-gray-300" />
                               </div>
                                {/* Google Button - Kept neutral */}
                               <div className="flex justify-center">
                                    <button
                                        onClick={handleGoogleSignIn} disabled={isLoading} title="Sign in with Google"
                                        className="m-1 inline-flex items-center justify-center rounded-lg border border-gray-300 bg-white p-2 shadow-sm transition duration-300 ease-in-out hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-400 disabled:opacity-60">
                                        <Image src="https://ucarecdn.com/8f25a2ba-bdcf-4ff1-b596-088f330416ef/" alt="Google" width={22} height={22} />
                                    </button>
                               </div>
                                {/* Terms - Adjusted color and link color */}
                                <div className="mt-6 text-center text-xs text-gray-500"> {/* Lighter text */}
                                    <p> By signing in, you agree to our{' '} <Link className="font-medium text-sky-600 hover:underline" href="#">Terms</Link> {' '}and{' '} <Link className="font-medium text-sky-600 hover:underline" href="#">Privacy Policy</Link>. </p>
                                </div>
                            </div> {/* End Inner Card */}
                        </div> {/* End Gradient Border */}
                    </div> {/* End Form Container */}
                 </div> {/* End Center Column */}

                 {/* Right Column (SMLS Logo): Hidden on screens smaller than 'lg' */}
                 <div className="hidden lg:flex lg:w-1/4 items-center justify-center p-4 relative">
                     {/* ... optional background ... */}
                     <div className="relative z-10">
                        <Image
                            src="/smls-logo.png"
                            alt="School of Medical Laboratory Science Logo"
                            width={200}
                            height={200}
                            className="object-contain"
                        />
                     </div>
                 </div>

             </div> {/* End Three-column Wrapper */}

        </div> // End Main Container
    );
}
--- END FILE: src\app\(auth)\login\page.tsx ---

--- START FILE: src\app\(auth)\layout.tsx ---
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

--- END FILE: src\app\(auth)\layout.tsx ---

--- START FILE: src\app\(protected)\(faculty)\dashboard\page.tsx ---
// src/app/(protected)/(faculty)/dashboard/page.tsx
'use client';

import Link from 'next/link';
import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { getMyProfileData } from '@/lib/userActions'; // Assuming this fetches all needed data
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, ApprovalStatus
} from '@/generated/prisma';

import {
    UserCircleIcon,
    DocumentTextIcon,
    CalendarDaysIcon, // Keep for future events
    ArrowRightIcon,
    ClockIcon, // For pending items
    ExclamationTriangleIcon, // For alerts
    BellIcon, // For announcements
    CheckCircleIcon // For approved items
} from '@heroicons/react/24/outline';
import { XCircleIcon } from '@heroicons/react/24/outline';
// Define a type for items with status
type ItemWithStatus = {
    id: string;
    status: ApprovalStatus;
    // Add fields needed for display title (adjust as needed)
    degree?: string;
    examination?: string;
    position?: string;
    awardName?: string;
    title?: string;
    engagementTitle?: string;
    researchTitle?: string;
    paperTitle?: string;
};

// Helper to get a display name for different item types
function getItemDisplayName(item: ItemWithStatus): string {
     return item.degree ?? item.examination ?? item.title ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? `Item ID: ${item.id}`;
}


export default function FacultyDashboardPage() {
    const { data: session, status } = useSession();
    // State to hold dashboard-specific data (pending items, counts)
    const [dashboardData, setDashboardData] = useState<{
        pendingItems: ItemWithStatus[];
        approvedCount: number;
        pendingCount: number;
        rejectedCount: number;
    } | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (status === 'authenticated') {
            setIsLoading(true);
            setError(null);
            getMyProfileData()
                .then(data => {
                    if (data.error || !data.user) {
                        setError(data.error || 'Failed to load profile data.');
                        setDashboardData(null);
                    } else {
                        // Process data to get counts and pending items
                        let pending: ItemWithStatus[] = [];
                        let approved = 0;
                        let rejected = 0;
                        const allItems = [
                            ...(data.academicQualifications ?? []),
                            ...(data.professionalLicenses ?? []),
                            ...(data.workExperiences ?? []),
                            ...(data.professionalAffiliations ?? []),
                            ...(data.awardsRecognitions ?? []),
                            ...(data.professionalDevelopments ?? []),
                            ...(data.communityInvolvements ?? []),
                            ...(data.publications ?? []),
                            ...(data.conferencePresentations ?? []),
                        ];

                        allItems.forEach(item => {
                            if (item.status === 'PENDING') {
                                pending.push(item as ItemWithStatus);
                            } else if (item.status === 'APPROVED') {
                                approved++;
                            } else if (item.status === 'REJECTED') {
                                rejected++;
                            }
                        });

                        setDashboardData({
                            pendingItems: pending,
                            approvedCount: approved,
                            pendingCount: pending.length,
                            rejectedCount: rejected,
                        });
                    }
                })
                .catch(err => {
                    console.error("Dashboard fetch error:", err);
                    setError("An error occurred while loading dashboard data.");
                    setDashboardData(null);
                })
                .finally(() => {
                    setIsLoading(false);
                });
        } else if (status === 'unauthenticated') {
            setIsLoading(false);
            // Middleware should handle redirect, but good to have a fallback state
             setError("Access Denied. Please log in.");
        }
    }, [status]); // Re-run effect when session status changes

    // --- Loading State ---
    if (isLoading || status === 'loading') {
        return (
            <div className="flex min-h-[calc(100vh-4rem)] items-center justify-center p-6 bg-gray-50">
                <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading dashboard...</span>
                </div>
            </div>
        );
    }

    // --- Error or Unauthenticated State ---
    if (error || status === 'unauthenticated') {
         return (
             <div className="flex min-h-[calc(100vh-4rem)] flex-col items-center justify-center p-6 text-center bg-red-50">
                <ExclamationTriangleIcon className="h-12 w-12 text-red-400 mb-4" />
                 <p className="mb-4 text-xl font-semibold text-red-700">Access Denied or Error</p>
                 <p className="mb-6 text-red-600">{error || "You must be signed in to view this page."}</p>
                 <Link href="/login">
                     <button className="inline-flex items-center gap-2 rounded-md bg-red-600 px-5 py-2.5 text-sm font-medium text-white shadow-sm transition hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                         Go to Login
                         <ArrowRightIcon className="h-4 w-4" />
                     </button>
                 </Link>
             </div>
        );
    }

    // --- Authenticated State ---
    const userRole = (session?.user as any)?.role;
    const greetingName = session?.user?.name ? session.user.name.split(' ')[0] : (session?.user?.email ?? 'Faculty Member');

    return (
        // Main container with background and padding
        <div className="min-h-[calc(100vh-4rem)] bg-gradient-to-br from-sky-50 via-white to-blue-50 p-4 sm:p-6 lg:p-8">
            <div className="mx-auto max-w-7xl">
                {/* Header Section */}
                <div className="mb-8">
                    <h1 className="text-2xl font-semibold leading-tight text-gray-800 sm:text-3xl">
                        Welcome back, {greetingName}!
                    </h1>
                    <p className="mt-1 text-sm text-gray-500">
                        Your central hub for managing skills and documents.
                    </p>
                </div>

                {/* Main Content Grid - Adjusted layout */}
                <div className="grid grid-cols-1 gap-6 lg:grid-cols-3 lg:gap-8">

                    {/* Left Column (Wider) - Pending Items & Quick Links */}
                    <div className="lg:col-span-2 space-y-6">

                        {/* Pending Approvals Card */}
                        {dashboardData && dashboardData.pendingCount > 0 && (
                            <div className="rounded-lg border border-yellow-200 bg-yellow-50 shadow-sm overflow-hidden">
                                <div className="flex items-center gap-3 border-b border-yellow-200 bg-yellow-100 px-4 py-3">
                                    <ClockIcon className="h-6 w-6 text-yellow-700" />
                                    <h2 className="text-lg font-semibold text-yellow-800">
                                        Items Pending Approval ({dashboardData.pendingCount})
                                    </h2>
                                </div>
                                <div className="p-4">
                                    {dashboardData.pendingItems.length > 0 ? (
                                        <ul className="space-y-3">
                                            {dashboardData.pendingItems.slice(0, 5).map(item => ( // Show first 5
                                                <li key={item.id} className="text-sm text-yellow-900 flex justify-between items-center">
                                                    <span>{getItemDisplayName(item)}</span>
                                                    <Link href="/profile" className="text-xs text-blue-600 hover:underline">
                                                        View in Profile
                                                    </Link>
                                                </li>
                                            ))}
                                            {dashboardData.pendingItems.length > 5 && (
                                                <li className="text-center text-xs text-gray-500 pt-2">
                                                    <Link href="/profile" className="hover:underline">
                                                        + {dashboardData.pendingItems.length - 5} more pending...
                                                    </Link>
                                                </li>
                                            )}
                                        </ul>
                                    ) : (
                                        <p className="text-sm text-yellow-700 italic">No items currently pending.</p> // Should not happen if count > 0, but safe fallback
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Quick Links Card */}
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                             {/* Profile Card */}
                             <Link href="/profile" className="group flex flex-col justify-between rounded-lg border border-gray-200 bg-white p-5 shadow-sm transition duration-300 ease-in-out hover:shadow-md hover:border-blue-300">
                                <div>
                                    <div className="mb-2 flex items-center gap-3">
                                        <UserCircleIcon className="h-7 w-7 text-blue-600" />
                                        <h2 className="text-lg font-semibold text-gray-800">
                                            My Profile
                                        </h2>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        View and manage your CV, qualifications, and details.
                                    </p>
                                </div>
                                <div className="mt-4 flex items-center justify-end text-sm font-medium text-blue-600 group-hover:underline">
                                    Go to Profile
                                    <ArrowRightIcon className="ml-1 h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
                                </div>
                            </Link>

                            {/* Documents Card */}
                            <Link href="/documents" className="group flex flex-col justify-between rounded-lg border border-gray-200 bg-white p-5 shadow-sm transition duration-300 ease-in-out hover:shadow-md hover:border-green-300">
                                <div>
                                    <div className="mb-2 flex items-center gap-3">
                                        <DocumentTextIcon className="h-7 w-7 text-green-600" />
                                        <h2 className="text-lg font-semibold text-gray-800">
                                            My Documents
                                        </h2>
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        Upload and manage your supporting credentials.
                                    </p>
                                </div>
                                <div className="mt-4 flex items-center justify-end text-sm font-medium text-green-600 group-hover:underline">
                                    Manage Documents
                                    <ArrowRightIcon className="ml-1 h-4 w-4 transition-transform duration-200 group-hover:translate-x-1" />
                                </div>
                            </Link>
                        </div>
                    </div>

                    {/* Right Column (Sidebar) - Stats & Announcements */}
                    <div className="space-y-6">
                        {/* Profile Summary/Stats Card */}
                         <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm">
                             <h2 className="text-base font-semibold text-gray-700 mb-3">Profile Summary</h2>
                             {dashboardData ? (
                                <div className="space-y-2 text-sm">
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-1.5"><CheckCircleIcon className="h-4 w-4 text-green-500"/> Approved Items:</span>
                                        <span className="font-medium text-gray-800">{dashboardData.approvedCount}</span>
                                    </div>
                                    <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-1.5"><ClockIcon className="h-4 w-4 text-yellow-500"/> Pending Items:</span>
                                        <span className="font-medium text-yellow-700">{dashboardData.pendingCount}</span>
                                    </div>
                                     <div className="flex justify-between items-center">
                                        <span className="text-gray-600 flex items-center gap-1.5"><XCircleIcon className="h-4 w-4 text-red-500"/> Rejected Items:</span>
                                        <span className="font-medium text-red-600">{dashboardData.rejectedCount}</span>
                                    </div>
                                    {/* Add more stats here - e.g., Last Updated */}
                                </div>
                             ) : (
                                 <p className="text-sm text-gray-500 italic">Summary unavailable.</p>
                             )}
                         </div>

                        {/* Announcements Card (Placeholder) */}
                        <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm">
                            <div className="flex items-center gap-2 mb-3">
                                <BellIcon className="h-5 w-5 text-indigo-600" />
                                <h2 className="text-base font-semibold text-gray-700">Announcements</h2>
                            </div>
                            <div className="mt-2 rounded-md border border-dashed border-gray-300 bg-gray-50 p-4 text-center text-sm italic text-gray-500">
                                No recent announcements.
                            </div>
                            {/* Later: Map over actual announcements */}
                        </div>

                         {/* Upcoming Events Card (Placeholder) */}
                        <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm">
                            <div className="flex items-center gap-2 mb-3">
                                <CalendarDaysIcon className="h-5 w-5 text-purple-600" />
                                <h2 className="text-base font-semibold text-gray-700">Upcoming Events</h2>
                            </div>
                            <div className="mt-2 rounded-md border border-dashed border-gray-300 bg-gray-50 p-4 text-center text-sm italic text-gray-500">
                                No upcoming events scheduled.
                            </div>
                        </div>
                    </div>

                </div> {/* End Main Grid */}
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\dashboard\page.tsx ---

--- START FILE: src\app\(protected)\(faculty)\documents\page.tsx ---
// src/app/(faculty)/documents/page.tsx
'use client';

import React from 'react';
import { useSession } from 'next-auth/react';

// We might need specific types for document data later
// import type { DocumentData } from '@/types';

export default function DocumentsPage() {
    const { data: session, status } = useSession();

    if (status === 'loading') {
        return <div className="p-6">Loading documents page...</div>;
    }

    if (status === 'unauthenticated') {
        return <div className="p-6">Access Denied. Please sign in.</div>;
    }

    // Placeholder state for file handling (will expand later)
    // const [selectedFile, setSelectedFile] = useState<File | null>(null);
    // const [uploading, setUploading] = useState(false);
    // const [documents, setDocuments] = useState<DocumentData[]>([]); // To display existing docs

    // Placeholder function for upload logic
    const handleUpload = async (event: React.FormEvent) => {
        event.preventDefault();
        // TODO: Implement actual file upload logic
        // - Get file from state
        // - Validate file type/size
        // - Send file to a backend API route or Server Action
        // - Handle response (success/error)
        // - Update the list of documents
        alert('Upload functionality not implemented yet.');
    };

    return (
        <div className="p-6">
            <h1 className="mb-6 text-2xl font-semibold text-[#003153]">
                My Documents & Credentials
            </h1>

            {/* Section for Uploading New Documents */}
            <div className="mb-8 rounded border border-gray-200 bg-white p-6 shadow-md">
                <h2 className="mb-4 text-lg font-medium text-gray-800">Upload New Document</h2>
                <form onSubmit={handleUpload}>
                    <div className="mb-4">
                        <label htmlFor="documentFile" className="mb-2 block text-sm font-medium text-gray-700">
                            Select File (.pdf, .png, .jpg)
                        </label>
                        <input
                            type="file"
                            id="documentFile"
                            name="documentFile"
                            accept=".pdf,.png,.jpg,.jpeg" // Specify accepted formats
                            className="block w-full text-sm text-gray-500 file:mr-4 file:rounded file:border-0 file:bg-[#003153] file:px-4 file:py-2 file:text-white hover:file:bg-[#002742] disabled:opacity-50"
                            // onChange={(e) => setSelectedFile(e.target.files ? e.target.files[0] : null)}
                            required
                            disabled // Disable upload for now
                        />
                         {/* TODO: Add fields for document type/category (e.g., Academic, Seminar, Award) */}
                    </div>
                    <button
                        type="submit"
                        className="rounded bg-[#003153] px-4 py-2 text-white shadow hover:bg-[#002742] focus:outline-none focus:ring-2 focus:ring-[#003153] focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                        disabled // Disable upload for now
                        // disabled={!selectedFile || uploading}
                    >
                        {/* {uploading ? 'Uploading...' : 'Upload Document'} */}
                        Upload Document (Coming Soon)
                    </button>
                </form>
            </div>

            {/* Section for Displaying Existing Documents */}
            <div className="rounded border border-gray-200 bg-white p-6 shadow-md">
                <h2 className="mb-4 text-lg font-medium text-gray-800">Uploaded Documents</h2>
                {/* TODO: Fetch and display list of user's documents */}
                <p className="text-gray-500">Your uploaded documents will appear here.</p>
                 {/* Example structure for later:
                 <ul className="space-y-2">
                    {documents.map((doc) => (
                        <li key={doc.id} className="flex justify-between items-center border-b pb-1">
                            <span>{doc.fileName} ({doc.category})</span>
                            <button className="text-red-500 hover:text-red-700 text-sm">Delete</button>
                        </li>
                    ))}
                </ul>
                */}
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\(faculty)\documents\page.tsx ---

--- START FILE: src\app\(protected)\(faculty)\profile\page.tsx ---
// src/app/(protected)/(faculty)/profile/page.tsx
'use client';

import React, { useState, useEffect, useCallback, useTransition } from 'react';
import { useSession } from 'next-auth/react';
import { getMyProfileData, updateMyProfile } from '@/lib/userActions';
import type {
    User, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation, ApprovalStatus
} from '@/generated/prisma';
import type {
    EditableItem, TempAcademicQualification, TempProfessionalDevelopment,
    TempProfessionalLicense, TempWorkExperience, TempProfessionalAffiliation,
    TempAwardRecognition, TempCommunityInvolvement, TempPublication, TempConferencePresentation
} from '@/types';
import {
    PlusIcon, PencilSquareIcon, XCircleIcon, CheckCircleIcon, AcademicCapIcon, BriefcaseIcon,
    IdentificationIcon, StarIcon, SparklesIcon, UsersIcon, DocumentTextIcon, PresentationChartBarIcon, TrashIcon, PencilIcon, PaperClipIcon,
    CheckIcon, XMarkIcon, InformationCircleIcon
} from '@heroicons/react/24/outline';
import { v4 as uuidv4 } from 'uuid';

// --- Import Display/Form components ---
import AcademicQualificationDisplay from '@/components/profile/AcademicQualificationDisplay';
import AcademicQualificationForm from '@/components/profile/AcademicQualificationForm';
import ProfessionalDevelopmentDisplay from '@/components/profile/ProfessionalDevelopmentDisplay';
import ProfessionalDevelopmentForm from '@/components/profile/ProfessionalDevelopmentForm';
import ProfessionalLicenseDisplay from '@/components/profile/ProfessionalLicenseDisplay';
import ProfessionalLicenseForm from '@/components/profile/ProfessionalLicenseForm';
import WorkExperienceDisplay from '@/components/profile/WorkExperienceDisplay';
import WorkExperienceForm from '@/components/profile/WorkExperienceForm';
import ProfessionalAffiliationDisplay from '@/components/profile/ProfessionalAffiliationDisplay';
import ProfessionalAffiliationForm from '@/components/profile/ProfessionalAffiliationForm';
import AwardRecognitionDisplay from '@/components/profile/AwardRecognitionDisplay';
import AwardRecognitionForm from '@/components/profile/AwardRecognitionForm';
import CommunityInvolvementDisplay from '@/components/profile/CommunityInvolvementDisplay';
import CommunityInvolvementForm from '@/components/profile/CommunityInvolvementForm';
import PublicationDisplay from '@/components/profile/PublicationDisplay';
import PublicationForm from '@/components/profile/PublicationForm';
import ConferencePresentationDisplay from '@/components/profile/ConferencePresentationDisplay';
import ConferencePresentationForm from '@/components/profile/ConferencePresentationForm';
// StatusDisplay is now used internally by the *Display components

// --- Interfaces & Metadata ---
interface ProfileData { user: { id: string; name: string | null; email: string | null; role: string | null; } | null; academicQualifications: AcademicQualification[]; professionalLicenses: ProfessionalLicense[]; workExperiences: WorkExperience[]; professionalAffiliations: ProfessionalAffiliation[]; awardsRecognitions: AwardRecognition[]; professionalDevelopments: ProfessionalDevelopment[]; communityInvolvements: CommunityInvolvement[]; publications: Publication[]; conferencePresentations: ConferencePresentation[]; error?: string; }
const categoryMetadata = { academicQualifications: { title: 'Academic Qualifications', icon: AcademicCapIcon }, professionalLicenses: { title: 'Professional Licenses', icon: IdentificationIcon }, workExperiences: { title: 'Work Experience', icon: BriefcaseIcon }, professionalAffiliations: { title: 'Professional Affiliations', icon: UsersIcon }, awardsRecognitions: { title: 'Awards & Recognitions', icon: StarIcon }, professionalDevelopments: { title: 'Professional Development', icon: SparklesIcon }, communityInvolvements: { title: 'Community Involvement', icon: UsersIcon }, publications: { title: 'Publications', icon: DocumentTextIcon }, conferencePresentations: { title: 'Conference Presentations', icon: PresentationChartBarIcon }, } as const;
type CategoryKey = keyof typeof categoryMetadata;
type EditableProfileData = Omit<ProfileData, 'user' | 'error'>;

// --- Helper Functions ---
const formatDate = (date: string | Date | null | undefined): string => { if (!date) return 'N/A'; try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' }); } catch (e) { console.error("Error formatting date:", date, e); return 'Invalid Date'; } };
const formatDateForInput = (date: string | Date | null | undefined): string => { if (!date) return ''; try { const d = new Date(date); if (isNaN(d.getTime())) return ''; return d.toISOString().split('T')[0]; } catch (e) { console.error("Error formatting date for input:", date, e); return ''; } };

// --- Main Component ---
export default function ProfilePage() {
    // --- State Hooks ---
    const { status: sessionStatus } = useSession();
    const [profileData, setProfileData] = useState<ProfileData | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [pageError, setPageError] = useState<string | null>(null);
    const [isEditing, setIsEditing] = useState(false);
    const [isPending, startTransition] = useTransition();
    const [editError, setEditError] = useState<string | null>(null);
    const [editSuccess, setEditSuccess] = useState<string | null>(null);
    const [editableData, setEditableData] = useState<EditableProfileData | null>(null);
    const [visibleCategories, setVisibleCategories] = useState<Set<CategoryKey>>(new Set());
    const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
    const [editingItemId, setEditingItemId] = useState<string | null>(null);
    const [originalItemData, setOriginalItemData] = useState<EditableItem | null>(null);

    // --- Data Fetching ---
    const fetchProfileData = useCallback(async (showLoading = true) => { if (showLoading) setIsLoading(true); setPageError(null); setEditError(null); setEditSuccess(null); try { const data = await getMyProfileData(); if (data.error) { setPageError(data.error); setProfileData(null); setVisibleCategories(new Set()); } else { setProfileData(data); const initialVisible = new Set<CategoryKey>(); (Object.keys(categoryMetadata) as CategoryKey[]).forEach(key => { if (data[key] && Array.isArray(data[key]) && data[key].length > 0) { initialVisible.add(key); } }); setVisibleCategories(initialVisible); setIsEditing(false); setEditableData(null); setEditingItemId(null); setOriginalItemData(null); } } catch (err) { console.error("Failed fetch:", err); setPageError("Unexpected fetch error."); setProfileData(null); setVisibleCategories(new Set()); } finally { if (showLoading) setIsLoading(false); } }, []);
    useEffect(() => { if (sessionStatus === 'authenticated') { if (!profileData && isLoading) { fetchProfileData(); } else if (profileData && isLoading) { setIsLoading(false); } } else if (sessionStatus === 'unauthenticated') { setIsLoading(false); setPageError("Access Denied."); setProfileData(null); setVisibleCategories(new Set()); } else { setIsLoading(true); } }, [sessionStatus, profileData, isLoading, fetchProfileData]);

    // --- Edit Mode Toggles ---
    const handleEditToggle = () => { if (isEditing) { handleCancelEdit(); } else { if (!profileData || !profileData.user) { setPageError("Cannot enter edit mode."); return; } setIsEditing(true); setEditError(null); setEditSuccess(null); const dataToEdit: EditableProfileData = { academicQualifications: structuredClone(profileData.academicQualifications), professionalLicenses: structuredClone(profileData.professionalLicenses), workExperiences: structuredClone(profileData.workExperiences), professionalAffiliations: structuredClone(profileData.professionalAffiliations), awardsRecognitions: structuredClone(profileData.awardsRecognitions), professionalDevelopments: structuredClone(profileData.professionalDevelopments), communityInvolvements: structuredClone(profileData.communityInvolvements), publications: structuredClone(profileData.publications), conferencePresentations: structuredClone(profileData.conferencePresentations), }; setEditableData(dataToEdit); const categoriesToMakeVisible = new Set(visibleCategories); (Object.keys(dataToEdit) as CategoryKey[]).forEach(key => { if (dataToEdit[key]?.length > 0) { categoriesToMakeVisible.add(key); } }); setVisibleCategories(categoriesToMakeVisible); setEditingItemId(null); setOriginalItemData(null); } };
    const handleCancelEdit = () => { setIsEditing(false); setEditableData(null); setEditingItemId(null); setOriginalItemData(null); setEditError(null); setEditSuccess(null); };

    // --- Save Changes ---
    const handleSaveChanges = () => { if (!editableData) { setEditError("No changes to save."); return; } setEditError(null); setEditSuccess(null); startTransition(async () => { try { const formData = new FormData(); const categoriesWithFiles: CategoryKey[] = [ 'academicQualifications', 'professionalDevelopments', 'professionalLicenses', 'workExperiences', 'professionalAffiliations', 'awardsRecognitions', 'communityInvolvements', 'publications', 'conferencePresentations' ]; (Object.keys(categoryMetadata) as CategoryKey[]).forEach(categoryKey => { const categoryData = editableData[categoryKey] as EditableItem[] | undefined; if (categoryData) { const dataToSend = categoryData.map(item => { const { _selectedFile, ...rest } = item as any; const finalRest = { ...rest }; if (item._isNew) { finalRest._isNew = true; } const cleanedRest: { [key: string]: any } = {}; for (const key in finalRest) { const value = finalRest[key]; if (value instanceof Date) { cleanedRest[key] = !isNaN(value.getTime()) ? value.toISOString() : null; } else { cleanedRest[key] = value; } } return cleanedRest; }); formData.append(`${categoryKey}_json`, JSON.stringify(dataToSend)); if (categoriesWithFiles.includes(categoryKey)) { categoryData.forEach((item) => { if (item && '_selectedFile' in item && item._selectedFile && (item._isNew || editingItemId === item.id)) { formData.append(`${categoryKey}_file_${item.id}`, item._selectedFile); } }); } } }); const result = await updateMyProfile(formData); if (result.success) { setEditSuccess("Profile updated successfully!"); setIsEditing(false); setEditableData(null); setEditingItemId(null); setOriginalItemData(null); await fetchProfileData(false); } else { setEditError(result.error || "Failed to save profile changes."); } } catch (err: any) { console.error("Save error:", err); setEditError(err.message || "An unexpected error occurred while saving."); } }); };

    // --- Category/Item Local Edit Handlers ---
    const handleAddCategory = (categoryKey: CategoryKey) => { setVisibleCategories(prev => new Set(prev).add(categoryKey)); setShowCategoryDropdown(false); };
    const handleDeleteItemLocally = (category: CategoryKey, id: string) => { if (!editableData) return; setEditableData(prevData => { if (!prevData || !Array.isArray(prevData[category])) return prevData; const updatedEditableData = { ...prevData }; updatedEditableData[category] = (updatedEditableData[category] as any[]).filter(item => item.id !== id); return updatedEditableData; }); if (editingItemId === id) { setEditingItemId(null); setOriginalItemData(null); } };
    const handleAddItemLocally = (category: CategoryKey) => { if (!editableData || !profileData?.user?.id) return; const newEditableData = { ...editableData }; const newItemId = uuidv4(); let placeholderItem: EditableItem; const now = new Date(); const currentUserId = profileData.user.id; const nextYear = new Date(now); nextYear.setFullYear(nextYear.getFullYear() + 1); const defaultStatus: ApprovalStatus = 'PENDING'; switch (category) { case 'academicQualifications': placeholderItem = { id: newItemId, degree: '', institution: '', program: '', yearCompleted: now.getFullYear(), diplomaFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempAcademicQualification; break; case 'professionalLicenses': placeholderItem = { id: newItemId, examination: '', monthYear: '', licenseNumber: '', expiration: nextYear, licenseFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalLicense; break; case 'workExperiences': placeholderItem = { id: newItemId, institution: '', position: '', natureOfWork: null, inclusiveYears: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempWorkExperience; break; case 'professionalAffiliations': placeholderItem = { id: newItemId, organization: '', position: null, inclusiveYears: '', membershipProofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalAffiliation; break; case 'awardsRecognitions': placeholderItem = { id: newItemId, awardName: '', awardingBody: '', yearReceived: now.getFullYear(), certificateUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempAwardRecognition; break; case 'professionalDevelopments': placeholderItem = { id: newItemId, title: '', organizer: '', dateLocation: '', certificateFileUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempProfessionalDevelopment; break; case 'communityInvolvements': placeholderItem = { id: newItemId, engagementTitle: '', role: '', locationDate: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempCommunityInvolvement; break; case 'publications': placeholderItem = { id: newItemId, researchTitle: '', journal: '', datePublished: now, doiLink: null, pdfUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempPublication; break; case 'conferencePresentations': placeholderItem = { id: newItemId, paperTitle: '', eventName: '', dateLocation: '', proofUrl: null, userId: currentUserId, createdAt: now, updatedAt: now, status: defaultStatus, rejectionReason: null, _isNew: true, _selectedFile: null } as TempConferencePresentation; break; default: console.error(`Add handler not implemented for: ${category}`); return; } if (!Array.isArray(newEditableData[category])) { newEditableData[category] = []; } (newEditableData[category] as EditableItem[]) = [placeholderItem, ...(newEditableData[category] as EditableItem[])]; setEditableData(newEditableData); handleStartEditingItem(category, newItemId); };
    const handleInputChange = (category: CategoryKey, itemId: string, fieldName: string, value: string | number | Date | null) => { if (!editableData) return; setEditableData(prevData => { if (!prevData || !prevData[category]) return prevData; const updatedCategoryData = structuredClone(prevData[category]) as any[]; const itemIndex = updatedCategoryData.findIndex(item => item.id === itemId); if (itemIndex === -1) { console.warn(`Item ${itemId} not found in ${category}`); return prevData; } const numericFields = ['yearCompleted', 'yearReceived']; let finalValue = value; if (typeof value === 'string' && value.trim() === '') { const requiredFields: { [key: string]: string[] } = { professionalLicenses: ['examination', 'licenseNumber', 'monthYear', 'expiration'], academicQualifications: ['degree', 'institution', 'program', 'yearCompleted'], /* ... other required fields ... */ }; if (!requiredFields[category]?.includes(fieldName)) { finalValue = null; } } else if (numericFields.includes(fieldName)) { finalValue = typeof value === 'string' ? parseInt(value, 10) : value; if (isNaN(finalValue as number)) finalValue = null; } updatedCategoryData[itemIndex] = { ...updatedCategoryData[itemIndex], [fieldName]: finalValue, updatedAt: new Date() }; return { ...prevData, [category]: updatedCategoryData }; }); };
    const handleFileChange = (category: CategoryKey, itemId: string, file: File | null | undefined) => { const categoriesWithFiles: CategoryKey[] = [ 'academicQualifications', 'professionalDevelopments', 'professionalLicenses', 'workExperiences', 'professionalAffiliations', 'awardsRecognitions', 'communityInvolvements', 'publications', 'conferencePresentations' ]; if (!categoriesWithFiles.includes(category)) { console.warn(`File change not supported for: ${category}`); return; } if (!editableData || !editableData[category]) { console.warn(`Cannot handle file change: Category ${category} not found`); return; } const MAX_FILE_SIZE = 5 * 1024 * 1024; const ALLOWED_TYPES = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg']; if (file && file.size > MAX_FILE_SIZE) { alert(`File size exceeds limit.`); return; } if (file && !ALLOWED_TYPES.includes(file.type)) { alert('Invalid file type.'); return; } setEditableData(prevData => { if (!prevData) return null; const updatedCategoryData = structuredClone(prevData[category]) as EditableItem[]; const itemIndex = updatedCategoryData.findIndex(item => item.id === itemId); if (itemIndex === -1) return prevData; const currentItem = updatedCategoryData[itemIndex]; if (currentItem && '_selectedFile' in currentItem) { updatedCategoryData[itemIndex] = { ...currentItem, _selectedFile: file ?? null, updatedAt: new Date() }; } else if (file) { console.warn(`Attempted file assign for category ${category} w/o _selectedFile`); updatedCategoryData[itemIndex] = { ...currentItem, updatedAt: new Date() }; } else { updatedCategoryData[itemIndex] = { ...currentItem, updatedAt: new Date() }; } return { ...prevData, [category]: updatedCategoryData }; }); };
    const handleStartEditingItem = (category: CategoryKey, itemId: string) => { if (!editableData || !editableData[category]) return; const itemToEdit = (editableData[category] as EditableItem[]).find(item => item.id === itemId); if (itemToEdit) { setOriginalItemData(structuredClone(itemToEdit)); setEditingItemId(itemId); setEditError(null); } else { console.error("Item not found:", itemId); } };
    const handleCancelItemEdit = (category: CategoryKey, itemId: string) => { if (!editableData || !originalItemData || originalItemData.id !== itemId || !editableData[category]) { setEditingItemId(null); setOriginalItemData(null); return; }; setEditableData(prevData => { if (!prevData) return null; const updatedCategoryData = structuredClone(prevData[category]) as EditableItem[]; const itemIndex = updatedCategoryData.findIndex(item => item.id === itemId); if (itemIndex !== -1) { updatedCategoryData[itemIndex] = originalItemData; } return { ...prevData, [category]: updatedCategoryData }; }); setEditingItemId(null); setOriginalItemData(null); };
    const handleSaveEditedItem = (itemId: string) => { setEditingItemId(null); setOriginalItemData(null); };

    // --- Render Loading/Error States ---
    if (isLoading || sessionStatus === 'loading') { return <div className="p-6 animate-pulse text-center text-gray-500">Loading profile data...</div>; }
    if (pageError || sessionStatus === 'unauthenticated' || !profileData || !profileData.user) { return <div className="p-6 text-center text-red-600 bg-red-50 border border-red-200 rounded-md">Error: {pageError || "Could not load profile data or access denied."}</div>; }

    // --- Determine data source ---
    const dataToDisplay = isEditing ? editableData : profileData;
    const finalData = (isEditing && dataToDisplay) ? dataToDisplay : profileData;
    const isNewItem = (item: any): boolean => !!item._isNew;

    return (
        <div className="p-4 sm:p-6 lg:p-8 bg-gray-50 min-h-screen">
            {/* === Page Header & Actions === */}
            <div className="mb-6 flex flex-wrap items-center justify-between gap-4 border-b border-gray-200 pb-4">
                 <h1 className="text-2xl sm:text-3xl font-bold text-gray-800">My Profile</h1>
                 <div className="flex items-center gap-2 flex-wrap">
                     {/* Edit/Cancel Button */}
                     <button
                         onClick={handleEditToggle}
                         disabled={isPending}
                         className={`inline-flex items-center gap-1.5 rounded-md px-3 py-1.5 text-sm font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-70 ${ isEditing ? 'bg-gray-600 hover:bg-gray-700 focus:ring-gray-500' : 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-600' }`}>
                         {isEditing ? ( <><XCircleIcon className="h-4 w-4" /> Cancel</> ) : ( <><PencilSquareIcon className="h-4 w-4" /> Edit Profile</> )}
                     </button>
                      {/* Save Changes Button */}
                     {isEditing && (
                         <button
                             onClick={handleSaveChanges}
                             disabled={isPending || editingItemId !== null}
                             className="inline-flex items-center gap-1.5 rounded-md bg-green-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed" >
                             {isPending ? ( <> <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> Saving... </> ) : ( <><CheckCircleIcon className="h-4 w-4" /> Save Changes</> )}
                         </button>
                     )}
                     {/* Add Section Button */}
                     <div className="relative">
                         <button onClick={() => setShowCategoryDropdown(!showCategoryDropdown)} disabled={isPending || isEditing} className="inline-flex items-center gap-1 rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-60 disabled:cursor-not-allowed" aria-haspopup="true" aria-expanded={showCategoryDropdown} >
                             <PlusIcon className="h-4 w-4" /> Add Section
                         </button>
                         {showCategoryDropdown && ( <div className="absolute right-0 z-20 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu"> <div className="py-1" role="none"> {(Object.keys(categoryMetadata) as CategoryKey[]).filter(key => !visibleCategories.has(key)).length > 0 ? ((Object.keys(categoryMetadata) as CategoryKey[]).filter(key => !visibleCategories.has(key)).map(key => ( <button key={key} onClick={() => handleAddCategory(key)} className="block w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100" role="menuitem" > {categoryMetadata[key].title} </button> ))) : ( <p className="px-4 py-2 text-sm text-gray-500">All sections added.</p> )} </div> </div> )}
                     </div>
                 </div>
                 {/* Inline Edit Warning */}
                 {isEditing && editingItemId !== null && ( <p className="mt-2 text-xs text-yellow-700 bg-yellow-50 p-2 rounded border border-yellow-200 w-full flex items-center gap-1"> <InformationCircleIcon className='h-4 w-4 flex-shrink-0'/> Finish editing the current item (<CheckIcon className='inline h-3 w-3 text-blue-600'/> <XMarkIcon className='inline h-3 w-3 text-gray-600'/>) before saving all profile changes. </p> )}
            </div>

            {/* === Status Messages === */}
            {editSuccess && <div className="mb-4 rounded-md bg-green-100 p-3 text-sm font-medium text-green-700 border border-green-200">{editSuccess}</div>}
            {editError && <div className="mb-4 rounded-md bg-red-100 p-3 text-sm font-medium text-red-700 border border-red-200">{editError}</div>}
            {pageError && !editError && <div className="mb-4 rounded-md bg-red-100 p-3 text-sm font-medium text-red-700 border border-red-200">{pageError}</div>}

            {/* === Basic Information Card === */}
            <div className="mb-8 rounded-2xl bg-white shadow-lg overflow-hidden transition duration-300 ease-in-out hover:shadow-xl">
                 <div className="flex items-center gap-5 p-6 sm:p-7 bg-gradient-to-r from-sky-600 to-cyan-500 text-white">
                    <div className="flex items-center justify-center w-11 h-11 sm:w-12 sm:h-12 rounded-xl bg-white/20 flex-shrink-0">
                        <InformationCircleIcon className="h-6 w-6 sm:h-7 sm:w-7" />
                    </div>
                    <h2 className="font-extrabold text-lg sm:text-xl flex-grow tracking-tight text-shadow-sm">Basic Information</h2>
                 </div>
                 <div className="p-6 sm:p-8">
                    <div className="grid grid-cols-1 gap-x-4 gap-y-3 text-sm sm:grid-cols-2 md:grid-cols-3">
                        <div><span className="font-medium text-gray-500">Name:</span> {profileData.user.name ?? 'N/A'}</div>
                        <div><span className="font-medium text-gray-500">Email:</span> {profileData.user.email ?? 'N/A'}</div>
                        <div><span className="font-medium text-gray-500">Role:</span> {profileData.user.role ?? 'N/A'}</div>
                    </div>
                 </div>
            </div>

            {/* === Dynamic CV Sections Grid === */}
            {visibleCategories.size === 0 && !isLoading && (
                <div className="rounded-lg border-2 border-dashed border-gray-300 bg-gray-100 p-8 text-center text-gray-500">
                    <p className="mb-2">No profile sections added yet.</p>
                    <p className="text-sm">Click "Add Section" above to get started.</p>
                 </div>
            )}

            <div className="grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3">
                {Array.from(visibleCategories).map(categoryKey => {
                    const categoryMeta = categoryMetadata[categoryKey];
                    const categoryData = (finalData?.[categoryKey] ?? []) as any[];
                    const CategoryIcon = categoryMeta.icon;
                    const isCategoryEditable = true;

                    return (
                        // ** CARD STYLING FROM TEMPLATE **
                        <div
                            key={categoryKey}
                            className="flex flex-col rounded-2xl bg-white shadow-lg overflow-hidden transition duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1"
                        >
                            {/* Card Header (Gradient, Icon, Title) */}
                            <div className="flex items-center gap-5 p-6 sm:p-7 bg-gradient-to-r from-blue-600 to-sky-500 text-white">
                                <div className="flex items-center justify-center w-11 h-11 sm:w-12 sm:h-12 rounded-xl bg-white/20 flex-shrink-0">
                                    <CategoryIcon className="h-6 w-6 sm:h-7 sm:w-7" aria-hidden="true" />
                                </div>
                                <h2 className="font-extrabold text-lg sm:text-xl flex-grow tracking-tight text-shadow-sm">
                                    {categoryMeta.title}
                                </h2>
                                {/* Add Button (+) */}
                                {isEditing && (
                                    <button
                                        onClick={() => handleAddItemLocally(categoryKey)}
                                        className="ml-auto flex-shrink-0 rounded-full bg-white/25 p-1.5 text-white hover:bg-white/30 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-blue-600"
                                        title={`Add ${categoryMeta.title}`}
                                        disabled={editingItemId !== null || !isCategoryEditable || isPending}
                                    >
                                        <PlusIcon className="h-4 w-4 sm:h-5 sm:w-5" />
                                    </button>
                                )}
                            </div>

                            {/* Card Body */}
                            <div className="flex-grow p-6 sm:p-8">
                                {categoryData.length === 0 ? (
                                    <p className="italic text-gray-400 text-center py-4">No items recorded.</p>
                                ) : (
                                    <ul className="space-y-6">
                                        {categoryData.map((item: EditableItem, index: number) => (
                                            <li key={item.id || index} className={`relative group ${
                                                isEditing && item.id === editingItemId ? 'bg-blue-50 p-4 rounded-md border border-dashed border-blue-300 shadow-inner -m-4'
                                                : isNewItem(item) ? 'bg-green-50 p-4 rounded-md border border-dashed border-green-300 shadow-inner -m-4'
                                                : 'pb-6 border-b border-gray-100 last:border-b-0 last:pb-0'
                                            }`}>
                                                {/* === RENDER FORM OR DISPLAY === */}
                                                {isEditing && isCategoryEditable && (isNewItem(item) || item.id === editingItemId) ? (
                                                    <>
                                                        {categoryKey === 'academicQualifications' && ( <AcademicQualificationForm item={item as TempAcademicQualification} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'professionalDevelopments' && ( <ProfessionalDevelopmentForm item={item as TempProfessionalDevelopment} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'professionalLicenses' && ( <ProfessionalLicenseForm item={item as TempProfessionalLicense} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'workExperiences' && ( <WorkExperienceForm item={item as TempWorkExperience} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'professionalAffiliations' && ( <ProfessionalAffiliationForm item={item as TempProfessionalAffiliation} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'awardsRecognitions' && ( <AwardRecognitionForm item={item as TempAwardRecognition} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'communityInvolvements' && ( <CommunityInvolvementForm item={item as TempCommunityInvolvement} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'publications' && ( <PublicationForm item={item as TempPublication} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}
                                                        {categoryKey === 'conferencePresentations' && ( <ConferencePresentationForm item={item as TempConferencePresentation} isPending={isPending} handleInputChange={handleInputChange.bind(null, categoryKey)} handleFileChange={handleFileChange.bind(null, categoryKey)} /> )}

                                                        {/* Item specific Save/Cancel Buttons */}
                                                        {!isNewItem(item) && item.id === editingItemId && (
                                                            <div className='flex justify-end gap-2 mt-3'>
                                                                <button onClick={() => handleCancelItemEdit(categoryKey, item.id)} disabled={isPending} className='inline-flex items-center gap-1 px-2 py-1 rounded text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400'> <XMarkIcon className='h-3 w-3'/> Cancel </button>
                                                                <button onClick={() => handleSaveEditedItem(item.id)} disabled={isPending} className='inline-flex items-center gap-1 px-2 py-1 rounded text-xs bg-blue-100 hover:bg-blue-200 text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400'> <CheckIcon className='h-3 w-3'/> Save Item </button>
                                                            </div>
                                                        )}
                                                        {/* Remove button for NEW items */}
                                                         {isNewItem(item) && (
                                                            <div className="text-right mt-2">
                                                                <button onClick={() => handleDeleteItemLocally(categoryKey, item.id)} className="inline-flex items-center gap-1 text-xs text-red-600 hover:text-red-800 disabled:opacity-50" disabled={isPending} title="Remove this new item"> <TrashIcon className="h-3 w-3" /> Remove </button>
                                                            </div>
                                                         )}
                                                    </>
                                                ) : (
                                                    // --- RENDER DISPLAY (Pass item) ---
                                                    <>
                                                        {categoryKey === 'academicQualifications' && ( <AcademicQualificationDisplay item={item as AcademicQualification} /> )}
                                                        {categoryKey === 'professionalDevelopments' && ( <ProfessionalDevelopmentDisplay item={item as ProfessionalDevelopment} /> )}
                                                        {categoryKey === 'professionalLicenses' && ( <ProfessionalLicenseDisplay item={item as ProfessionalLicense} /> )}
                                                        {categoryKey === 'workExperiences' && ( <WorkExperienceDisplay item={item as WorkExperience} /> )}
                                                        {categoryKey === 'professionalAffiliations' && ( <ProfessionalAffiliationDisplay item={item as ProfessionalAffiliation} /> )}
                                                        {categoryKey === 'awardsRecognitions' && ( <AwardRecognitionDisplay item={item as AwardRecognition} /> )}
                                                        {categoryKey === 'communityInvolvements' && ( <CommunityInvolvementDisplay item={item as CommunityInvolvement} /> )}
                                                        {categoryKey === 'publications' && ( <PublicationDisplay item={item as Publication} /> )}
                                                        {categoryKey === 'conferencePresentations' && ( <ConferencePresentationDisplay item={item as ConferencePresentation} /> )}
                                                    </>
                                                )}

                                                {/* Action Buttons (Edit/Delete) for EXISTING items in EDIT mode */}
                                                {isEditing && item.id !== editingItemId && !isNewItem(item) && (
                                                    <div className="absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                                        {isCategoryEditable && (
                                                            <button onClick={() => handleStartEditingItem(categoryKey, item.id)} className="p-1 rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 focus:outline-none focus:ring-1 focus:ring-blue-400 focus:ring-offset-1" title={`Edit`} disabled={isPending || editingItemId !== null} > <PencilIcon className="h-3.5 w-3.5" /> </button>
                                                        )}
                                                        <button onClick={() => handleDeleteItemLocally(categoryKey, item.id)} className="p-1 rounded-full bg-red-100 text-red-600 hover:bg-red-200 focus:outline-none focus:ring-1 focus:ring-red-400 focus:ring-offset-1" title={`Delete`} disabled={isPending || editingItemId !== null} > <TrashIcon className="h-3.5 w-3.5" /> </button>
                                                    </div>
                                                )}
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </div> {/* End Card Body */}
                        </div> // End Card Styling
                    );
                })}
            </div> {/* End Grid */}
        </div> // End Page Container
    );
}
--- END FILE: src\app\(protected)\(faculty)\profile\page.tsx ---

--- START FILE: src\app\(protected)\admin\approvals\page.tsx ---
// src/app/admin/approvals/page.tsx
'use client';

import React, { useState, useEffect, useTransition } from 'react';
import { getPendingSubmissions, approveSubmission, rejectSubmission } from '@/lib/adminActions'; // Import admin actions
import type { ItemType } from '@/types'; // Import ItemType
import { CheckCircleIcon, XCircleIcon, PaperClipIcon, UserCircleIcon, ClockIcon } from '@heroicons/react/24/outline';

// Define a more specific type for the items displayed on this page
interface PendingItem {
    id: string;
    itemType: ItemType; // Added during fetch
    createdAt: string | Date;
    user: { id: string; name: string | null; email: string | null };
    // Include fields common enough to display, or use specific checks
    title?: string; // For ProfessionalDevelopment
    degree?: string; // For AcademicQualification
    examination?: string; // For ProfessionalLicense
    position?: string; // For WorkExperience, ProfessionalAffiliation
    awardName?: string; // For AwardRecognition
    engagementTitle?: string; // For CommunityInvolvement
    researchTitle?: string; // For Publication
    paperTitle?: string; // For ConferencePresentation
    // Include relevant URL fields based on itemType
    diplomaFileUrl?: string | null;
    certificateFileUrl?: string | null;
    licenseFileUrl?: string | null;
    proofUrl?: string | null;
    membershipProofUrl?: string | null;
    certificateUrl?: string | null;
    pdfUrl?: string | null;
    // Add other potentially relevant fields
    institution?: string;
    organizer?: string;
    // ... add more as needed for display
}

// Helper to get the display title for an item
function getItemDisplayTitle(item: PendingItem): string {
    return item.title ?? item.degree ?? item.examination ?? item.awardName ?? item.engagementTitle ?? item.researchTitle ?? item.paperTitle ?? item.position ?? `Item ID: ${item.id}`;
}

// Helper to get the relevant document URL
function getItemDocumentUrl(item: PendingItem): string | null | undefined {
     // Order matters if multiple could exist (e.g., proofUrl used in multiple types)
    switch (item.itemType) {
        case 'academicQualification': return item.diplomaFileUrl;
        case 'professionalDevelopment': return item.certificateFileUrl;
        case 'professionalLicense': return item.licenseFileUrl;
        case 'awardRecognition': return item.certificateUrl;
        case 'publication': return item.pdfUrl;
        case 'workExperience':
        case 'communityInvolvement':
        case 'conferencePresentation':
        case 'professionalAffiliation': // Added affiliation proof
             return item.proofUrl ?? item.membershipProofUrl; // Use specific proofUrl if available
        default: return null;
    }
}

// Helper to format date
const formatDate = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleString(undefined, { dateStyle: 'short', timeStyle: 'short' }); }
    catch (e) { return 'Invalid Date'; }
};


export default function AdminApprovalsPage() {
    const [pendingItems, setPendingItems] = useState<PendingItem[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isPending, startTransition] = useTransition();
    const [actionError, setActionError] = useState<string | null>(null);
    const [rejectionReason, setRejectionReason] = useState<{ [itemId: string]: string }>({});
    const [showRejectReasonInput, setShowRejectReasonInput] = useState<string | null>(null); // Store ID of item being rejected

    const fetchItems = async () => {
        setIsLoading(true);
        setError(null);
        setActionError(null);
        const result = await getPendingSubmissions();
        if (result.success) {
            setPendingItems(result.pendingItems || []);
        } else {
            setError(result.error || 'Failed to load pending items.');
        }
        setIsLoading(false);
    };

    useEffect(() => {
        fetchItems();
    }, []);

    const handleApprove = (itemId: string, itemType: ItemType) => {
        setActionError(null);
        startTransition(async () => {
            const result = await approveSubmission(itemId, itemType);
            if (!result.success) {
                setActionError(`Failed to approve ${itemType} (${itemId}): ${result.error}`);
            } else {
                // Refresh list after successful action
                await fetchItems();
            }
        });
    };

    const handleReject = (itemId: string, itemType: ItemType) => {
        setActionError(null);
        const reason = rejectionReason[itemId]?.trim();
        if (!reason) {
            setActionError(`Rejection reason is required for item ${itemId}.`);
            setShowRejectReasonInput(itemId); // Ensure input is visible
            return;
        }
        startTransition(async () => {
            const result = await rejectSubmission(itemId, itemType, reason);
            if (!result.success) {
                setActionError(`Failed to reject ${itemType} (${itemId}): ${result.error}`);
            } else {
                // Clear reason and hide input on success
                setRejectionReason(prev => ({ ...prev, [itemId]: '' }));
                setShowRejectReasonInput(null);
                // Refresh list
                await fetchItems();
            }
        });
    };

    const handleReasonChange = (itemId: string, value: string) => {
        setRejectionReason(prev => ({ ...prev, [itemId]: value }));
    };

    const toggleRejectInput = (itemId: string) => {
        if (showRejectReasonInput === itemId) {
            setShowRejectReasonInput(null); // Hide if already shown
        } else {
            setShowRejectReasonInput(itemId); // Show for this item
            setActionError(null); // Clear previous errors when showing input
        }
    };


    return (
        <div className="p-6 bg-gray-50 min-h-screen">
            <h1 className="text-2xl font-semibold text-gray-800 mb-6">Pending Approvals</h1>

            {isLoading && <p className="text-gray-600">Loading pending items...</p>}
            {error && <p className="text-red-600 bg-red-50 p-3 rounded border border-red-200">{error}</p>}
            {actionError && <p className="text-red-600 bg-red-50 p-3 rounded border border-red-200 mb-4">{actionError}</p>}

            {!isLoading && !error && pendingItems.length === 0 && (
                <p className="text-gray-500 italic">No items currently pending approval.</p>
            )}

            {pendingItems.length > 0 && (
                <div className="space-y-6">
                    {pendingItems.map((item) => {
                        const docUrl = getItemDocumentUrl(item);
                        const displayTitle = getItemDisplayTitle(item);
                        const isRejectingThis = showRejectReasonInput === item.id;

                        return (
                            <div key={item.id} className="bg-white p-4 rounded-lg shadow border border-gray-200">
                                <div className="flex flex-col sm:flex-row justify-between sm:items-start gap-4">
                                    {/* Item Details */}
                                    <div className="flex-1">
                                        <p className="text-sm font-medium text-indigo-600 uppercase">{item.itemType.replace(/([A-Z])/g, ' $1').trim()}</p>
                                        <p className="text-lg font-semibold text-gray-800 mt-1">{displayTitle}</p>
                                        <div className="mt-2 text-xs text-gray-500 space-y-1">
                                            <p className="flex items-center gap-1">
                                                <UserCircleIcon className="h-4 w-4" />
                                                <span>{item.user.name ?? item.user.email ?? 'Unknown User'}</span>
                                            </p>
                                            <p className="flex items-center gap-1">
                                                <ClockIcon className="h-4 w-4" />
                                                <span>Submitted: {formatDate(item.createdAt)}</span>
                                            </p>
                                        </div>
                                        {docUrl && (
                                            <a
                                                href={docUrl}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="inline-flex items-center gap-1 text-sm text-blue-600 hover:underline mt-3"
                                            >
                                                <PaperClipIcon className="h-4 w-4" /> View Document
                                            </a>
                                        )}
                                        {!docUrl && <p className="text-xs text-gray-400 italic mt-3">No document attached.</p>}
                                    </div>

                                    {/* Action Buttons */}
                                    <div className="flex flex-col sm:flex-row sm:items-start gap-2 flex-shrink-0 mt-2 sm:mt-0">
                                        <button
                                            onClick={() => handleApprove(item.id, item.itemType)}
                                            disabled={isPending || isRejectingThis} // Disable if rejecting this item
                                            className="inline-flex items-center justify-center gap-1 rounded-md bg-green-100 px-3 py-1.5 text-sm font-medium text-green-700 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            <CheckCircleIcon className="h-4 w-4" /> Approve
                                        </button>
                                        <button
                                            onClick={() => toggleRejectInput(item.id)}
                                            disabled={isPending}
                                            className={`inline-flex items-center justify-center gap-1 rounded-md px-3 py-1.5 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed ${
                                                isRejectingThis
                                                ? 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500' // Active rejection state
                                                : 'bg-red-100 text-red-700 hover:bg-red-200 focus:ring-red-500' // Default reject button state
                                            }`}
                                        >
                                            <XCircleIcon className="h-4 w-4" /> {isRejectingThis ? 'Cancel Reject' : 'Reject'}
                                        </button>
                                    </div>
                                </div>

                                {/* Rejection Reason Input Area (Conditional) */}
                                {isRejectingThis && (
                                    <div className="mt-4 pt-4 border-t border-dashed border-gray-300">
                                        <label htmlFor={`reason-${item.id}`} className="block text-sm font-medium text-gray-700 mb-1">
                                            Reason for Rejection*
                                        </label>
                                        <textarea
                                            id={`reason-${item.id}`}
                                            rows={2}
                                            value={rejectionReason[item.id] || ''}
                                            onChange={(e) => handleReasonChange(item.id, e.target.value)}
                                            className="block w-full rounded-md border-gray-300 shadow-sm focus:border-red-500 focus:ring-red-500 sm:text-sm disabled:opacity-50"
                                            placeholder="Provide a clear reason..."
                                            disabled={isPending}
                                        />
                                        <button
                                            onClick={() => handleReject(item.id, item.itemType)}
                                            disabled={isPending || !rejectionReason[item.id]?.trim()}
                                            className="mt-2 inline-flex items-center justify-center gap-1 rounded-md bg-red-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Confirm Rejection
                                        </button>
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\approvals\page.tsx ---

--- START FILE: src\app\(protected)\admin\dashboard\page.tsx ---
// src/app/admin/dashboard/page.tsx
'use client';

import React from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import {
    UserGroupIcon,
    DocumentCheckIcon,
    TableCellsIcon,
    ChartBarIcon, // Added for stats
    ArrowRightIcon,
} from '@heroicons/react/24/outline'; // Using outline icons

// Interface for Dashboard Card props
interface DashboardCardProps {
    title: string;
    description: string;
    link: string;
    icon: React.ElementType;
    iconColorClass: string; // Added for icon background color
    statsPlaceholder?: string; // Optional placeholder for stats like counts
}

// Reusable Dashboard Card Component
const DashboardCard: React.FC<DashboardCardProps> = ({
    title,
    description,
    link,
    icon: Icon,
    statsPlaceholder,
    iconColorClass,
}) => (
    <Link href={link} legacyBehavior>
        {/* Enhanced Card Styling */}
        <a className="group block rounded-xl border border-gray-100 bg-white p-6 shadow-sm transition-all duration-300 ease-in-out hover:shadow-lg hover:border-blue-200 hover:-translate-y-1">
            <div className="flex items-start justify-between">
                {/* Icon with background */}
                <span className={`inline-block rounded-lg p-3 ${iconColorClass} bg-opacity-10`}>
                    <Icon className={`h-6 w-6 ${iconColorClass}`} />
                </span>
                {/* Arrow Icon on hover */}
                <ArrowRightIcon className="ml-4 h-5 w-5 text-gray-400 opacity-0 transition-opacity duration-300 group-hover:opacity-100" />
            </div>

            <div className="mt-4">
                <h2 className="text-lg font-semibold text-gray-800 group-hover:text-blue-700">
                    {title}
                </h2>
                <p className="mt-1 text-sm text-gray-600">{description}</p>
            </div>

            {statsPlaceholder && (
                <p className="mt-4 text-xs font-medium text-gray-500">{statsPlaceholder}</p>
            )}
            {/* Removed the explicit "Go to section" link text, the whole card is the link */}
        </a>
    </Link>
);


export default function AdminDashboardPage() {
    const { data: session, status } = useSession();
    const userRole = (session?.user as any)?.role;

    if (status === 'loading') {
        return (
            <div className="flex min-h-[calc(100vh-4rem)] items-center justify-center bg-gradient-to-br from-sky-50 via-white to-blue-50 p-6">
                <p className="text-gray-500">Loading admin dashboard...</p>
                {/* Consider adding a spinner component here */}
            </div>
        );
    }

    if (status === 'unauthenticated' || userRole !== 'ADMIN') {
        return (
            <div className="flex min-h-screen items-center justify-center bg-red-50 p-6">
                <p className="text-center text-red-700">
                    Access Denied. <br /> You do not have permission to view this page.
                </p>
            </div>
        );
    }

    return (
        // Apply gradient background and adjust padding
        <div className="min-h-[calc(100vh-4rem)] bg-gradient-to-br from-sky-50 via-white to-blue-50 p-6 md:p-8 lg:p-10">
            <header className="mb-10"> {/* Increased bottom margin */}
                <h1 className="text-3xl font-bold tracking-tight text-gray-900">
                    Administrator Dashboard
                </h1>
                <p className="mt-2 text-sm text-gray-600">
                    Welcome,{' '}
                    <span className="font-medium">
                        {session?.user?.name ?? session?.user?.email}
                    </span>
                    ! This is the central hub for managing faculty and system settings.
                </p>
            </header>

            {/* Stats Section (Placeholder) */}
            <div className="mb-10 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
                {/* Example Stat Card */}
                <div className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm">
                    <div className="flex items-center gap-3">
                        <div className="flex-shrink-0 rounded-full bg-blue-100 p-2 text-blue-600">
                            <UserGroupIcon className="h-5 w-5" />
                        </div>
                        <div>
                            <p className="text-sm font-medium text-gray-500">Total Faculty</p>
                            <p className="text-xl font-semibold text-gray-900">[Num]</p> {/* Placeholder */}
                        </div>
                    </div>
                </div>
                 <div className="rounded-lg border border-gray-100 bg-white p-4 shadow-sm">
                    <div className="flex items-center gap-3">
                        <div className="flex-shrink-0 rounded-full bg-yellow-100 p-2 text-yellow-600">
                            <DocumentCheckIcon className="h-5 w-5" />
                        </div>
                        <div>
                            <p className="text-sm font-medium text-gray-500">Pending Approvals</p>
                            <p className="text-xl font-semibold text-gray-900">[Num]</p> {/* Placeholder */}
                        </div>
                    </div>
                </div>
                {/* Add more stat cards as needed */}
            </div>

            {/* Dashboard Cards Section */}
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
                <DashboardCard
                    title="Manage Faculty"
                    description="View, add, and manage faculty profiles and details."
                    link="/admin/faculty"
                    icon={UserGroupIcon}
                    iconColorClass="text-blue-600" // Pass color class
                />
                <DashboardCard
                    title="Document Approvals"
                    description="Review and approve/reject pending document submissions."
                    link="/admin/approvals"
                    icon={DocumentCheckIcon}
                    iconColorClass="text-yellow-600" // Pass color class
                />
                <DashboardCard
                    title="Specialization Matrix"
                    description="View faculty skills, expertise, and generate reports."
                    link="/admin/matrix"
                    icon={TableCellsIcon}
                    iconColorClass="text-purple-600" // Pass color class
                />
                {/* Add more DashboardCard components here as needed for future sections */}
            </div>
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\dashboard\page.tsx ---

--- START FILE: src\app\(protected)\admin\faculty\[facultyId]\page.tsx ---
[EMPTY FILE]
--- END FILE: src\app\(protected)\admin\faculty\[facultyId]\page.tsx ---

--- START FILE: src\app\(protected)\admin\faculty\page.tsx ---
// src/app/(protected)/admin/faculty/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { getAllFaculty } from '@/lib/adminActions'; // Import the new action
import { UserGroupIcon, EnvelopeIcon, CalendarDaysIcon, ArrowRightIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

// Define the type for a faculty member in the list
interface FacultyMember {
    id: string;
    name: string | null;
    email: string | null;
    createdAt: Date;
}

// Helper to format date
const formatDate = (date: Date | string | null | undefined): string => {
    if (!date) return 'N/A';
    try { return new Date(date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' }); }
    catch (e) { return 'Invalid Date'; }
};

export default function AdminFacultyListPage() {
    const [facultyList, setFacultyList] = useState<FacultyMember[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        setIsLoading(true);
        setError(null);
        getAllFaculty()
            .then(result => {
                if (result.success) {
                    setFacultyList(result.faculty || []);
                } else {
                    setError(result.error || 'Failed to load faculty list.');
                    setFacultyList([]);
                }
            })
            .catch(err => {
                console.error("Faculty list fetch error:", err);
                setError("An unexpected error occurred while fetching faculty.");
                setFacultyList([]);
            })
            .finally(() => {
                setIsLoading(false);
            });
    }, []);

    return (
        <div className="p-6 bg-gray-50 min-h-screen">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-semibold text-gray-800 flex items-center gap-2">
                    <UserGroupIcon className="h-7 w-7 text-blue-600" />
                    Faculty Management
                </h1>
                {/* Placeholder for Add Faculty button later */}
                {/* <button className="px-4 py-2 bg-blue-600 text-white rounded shadow hover:bg-blue-700">Add Faculty</button> */}
            </div>

            {isLoading && (
                <div className="flex items-center gap-3 text-gray-500">
                    <svg className="animate-spin h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Loading faculty list...</span>
                </div>
            )}

            {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative flex items-center gap-2" role="alert">
                    <ExclamationTriangleIcon className="h-5 w-5 text-red-500" />
                    <span className="block sm:inline">{error}</span>
                </div>
            )}

            {!isLoading && !error && (
                <div className="bg-white shadow overflow-hidden rounded-lg border border-gray-200">
                    <ul role="list" className="divide-y divide-gray-200">
                        {facultyList.length === 0 ? (
                            <li className="px-6 py-4 text-center text-gray-500 italic">No faculty members found.</li>
                        ) : (
                            facultyList.map((faculty) => (
                                <li key={faculty.id}>
                                    <Link href={`/admin/faculty/${faculty.id}`} className="block hover:bg-gray-50 transition duration-150 ease-in-out">
                                        <div className="px-4 py-4 sm:px-6 flex items-center justify-between">
                                            <div className="flex-1 min-w-0">
                                                <p className="text-sm font-semibold text-indigo-600 truncate">
                                                    {faculty.name || 'Unnamed Faculty'}
                                                </p>
                                                <div className="mt-1 flex items-center text-xs text-gray-500 gap-x-3 gap-y-1 flex-wrap">
                                                    <p className="flex items-center gap-1 truncate">
                                                        <EnvelopeIcon className="h-3.5 w-3.5 text-gray-400" aria-hidden="true" />
                                                        {faculty.email || 'No Email'}
                                                    </p>
                                                    <p className="flex items-center gap-1">
                                                        <CalendarDaysIcon className="h-3.5 w-3.5 text-gray-400" aria-hidden="true" />
                                                        Joined: {formatDate(faculty.createdAt)}
                                                    </p>
                                                </div>
                                            </div>
                                            <div className="ml-4 flex-shrink-0">
                                                <ArrowRightIcon className="h-5 w-5 text-gray-400 group-hover:text-gray-600" aria-hidden="true" />
                                            </div>
                                        </div>
                                    </Link>
                                </li>
                            ))
                        )}
                    </ul>
                </div>
            )}
        </div>
    );
}
--- END FILE: src\app\(protected)\admin\faculty\page.tsx ---

--- START FILE: src\app\(protected)\admin\matrix\page.tsx ---
[EMPTY FILE]
--- END FILE: src\app\(protected)\admin\matrix\page.tsx ---

--- START FILE: src\app\(protected)\layout.tsx ---
// src/app/(protected)/layout.tsx
import React from 'react';
import Header from '@/components/ui/Header';
import Footer from '@/components/ui/Footer';

// No font or globals.css imports here

export default function ProtectedLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">
        {children}
      </main>
      <Footer />
    </div>
  );
}
--- END FILE: src\app\(protected)\layout.tsx ---

--- START FILE: src\app\api\auth\[...nextauth]\route.ts ---
// src/app/api/auth/[...nextauth]/route.ts
import NextAuth, { type NextAuthOptions } from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { PrismaAdapter } from '@next-auth/prisma-adapter';
import bcrypt from 'bcrypt';
import prisma from '@/lib/prisma'; // Import the singleton Prisma Client instance

export const authOptions: NextAuthOptions = {
    // Configure Prisma Adapter
    adapter: PrismaAdapter(prisma),

    // Configure one or more authentication providers
    providers: [
        CredentialsProvider({
            // The name to display on the sign in form (e.g. "Sign in with...")
            name: 'Credentials',
            // `credentials` is used to generate a form on the sign in page.
            credentials: {
                email: { label: "Email", type: "email", placeholder: "jsmith@example.com" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials, req) {
                // Add logic here to look up the user from the credentials supplied
                if (!credentials?.email || !credentials?.password) {
                    console.error('Credentials missing');
                    return null; // Indicate failure: credentials not provided
                }

                try {
                    // Find the user in the database using the imported prisma instance
                    const user = await prisma.user.findUnique({
                        where: { email: credentials.email }
                    });

                    if (!user) {
                        console.error('No user found with email:', credentials.email);
                        // Optionally: throw new Error("No user found."); // Can provide feedback
                        return null; // User not found
                    }

                    // Validate the password using bcrypt.compare
                    const isValidPassword = await bcrypt.compare(
                        credentials.password, // Plain password from login form
                        user.password         // Hashed password from database
                    );

                    if (!isValidPassword) {
                        console.error('Invalid password for user:', credentials.email);
                        // Optionally: throw new Error("Invalid password."); // Can provide feedback
                        return null; // Password doesn't match
                    }

                    console.log('User authorized:', user.email);
                    // Return user object if credentials are valid
                    // This object must satisfy NextAuth's User type (at least 'id')
                    // Using 'as any' here simplifies typing for now.
                    return {
                        id: user.id,
                        name: user.name,
                        email: user.email,
                        role: user.role, // Include the role
                    } as any;

                } catch (error) {
                    console.error("Error during authorization:", error);
                    return null; // Return null on any unexpected error during authorization
                }
            }
        })
        // ...add more providers here (e.g., Google, GitHub)
    ],

    // Define how session is managed
    session: {
        strategy: "jwt", // Use JSON Web Tokens for session management
    },

    // Callbacks are asynchronous functions you can use to control what happens
    callbacks: {
        // Add user id and role to the JWT payload
        async jwt({ token, user }) {
            if (user) {
                // The 'user' object here comes from the 'authorize' function or DB lookup
                token.id = user.id;
                // Need type assertion because 'role' isn't part of default JWT token type
                token.role = (user as any).role;
            }
            return token;
        },
        // Add user id and role to the session object available client-side
        async session({ session, token }) {
            if (token && session.user) {
                 // Need type assertion to add custom properties to default Session['user']
                (session.user as any).id = token.id;
                (session.user as any).role = token.role;
            }
            return session;
        },
    },

    // Specify pages for login, error handling, etc.
    pages: {
        signIn: '/login', // Redirect users to /login if they need to sign in
        // error: '/auth/error', // Optional: Custom error page
    },

    // Secret for signing tokens (required) - loaded from .env.local
    secret: process.env.NEXTAUTH_SECRET,

    // Enable debug messages in development for easier troubleshooting
    debug: process.env.NODE_ENV === 'development',
};

// Export the NextAuth handler for GET and POST requests
const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
--- END FILE: src\app\api\auth\[...nextauth]\route.ts ---

--- START FILE: src\app\api\documents\route.ts ---
[EMPTY FILE]
--- END FILE: src\app\api\documents\route.ts ---

--- START FILE: src\app\api\faculty\route.ts ---
[EMPTY FILE]
--- END FILE: src\app\api\faculty\route.ts ---

--- START FILE: src\app\image-test\page.tsx ---
'use client'; // Required for potential state/hooks later if needed

import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

// Ensure you have a valid image file named dot.png
// located directly in your project's /public directory
const IMAGE_SRC = "/dot.png";
const IMAGE_WIDTH = 100; // Example width
const IMAGE_HEIGHT = 100; // Example height

export default function ImageTestPage() {

    return (
        <div className="p-10">
            <h1 className="text-2xl font-bold mb-6">Image Loading Test Page</h1>

            <p className="mb-4">
                This page attempts to load the image located at <code>{IMAGE_SRC}</code>
                (expected to be in the <code>/public</code> folder).
            </p>

            <hr className="my-6" />

            {/* Test Case 1: Standard next/image */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 1: Standard `next/image`</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Using default optimization. Should work if the file is valid and optimization is okay.
                </p>
                <div style={{ width: `${IMAGE_WIDTH}px`, height: `${IMAGE_HEIGHT}px`, position: 'relative', border: '1px dashed blue' }}>
                    <Image
                        src={IMAGE_SRC}
                        alt="Test Dot - Standard"
                        width={IMAGE_WIDTH}
                        height={IMAGE_HEIGHT}
                        style={{ border: '1px solid red' }} // Add visible border to image itself
                        // Add onError for more feedback
                        onError={(e) => console.error(`Standard Image Error for ${IMAGE_SRC}:`, e)}
                    />
                </div>
                 <p className="text-xs mt-2">Container size: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red. Container border: blue dashed.</p>
            </div>

            {/* Test Case 2: next/image with unoptimized={true} */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 2: `next/image` with `unoptimized`</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Bypasses optimization. Should work if the file exists but optimization fails.
                </p>
                 <div style={{ width: `${IMAGE_WIDTH}px`, height: `${IMAGE_HEIGHT}px`, position: 'relative', border: '1px dashed blue' }}>
                    <Image
                        src={IMAGE_SRC}
                        alt="Test Dot - Unoptimized"
                        width={IMAGE_WIDTH}
                        height={IMAGE_HEIGHT}
                        unoptimized={true} // Bypass optimization
                        style={{ border: '1px solid red' }}
                        onError={(e) => console.error(`Unoptimized Image Error for ${IMAGE_SRC}:`, e)}
                    />
                </div>
                <p className="text-xs mt-2">Container size: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red. Container border: blue dashed.</p>
            </div>

             {/* Test Case 3: Standard HTML <img> tag */}
            <div className="mb-8 p-4 border rounded shadow">
                <h2 className="text-lg font-semibold mb-2">Test 3: Standard HTML `<img/>` tag</h2>
                <p className="text-sm text-gray-600 mb-2">
                    Loads the image directly from the public folder, no Next.js processing. Should work if the file exists and the server serves static files correctly.
                </p>
                {/* eslint-disable-next-line @next/next/no-img-element */}
                <img
                    src={IMAGE_SRC}
                    alt="Test Dot - Standard img tag"
                    width={IMAGE_WIDTH}
                    height={IMAGE_HEIGHT}
                    style={{ border: '1px solid red' }}
                    onError={(e) => console.error(`Standard <img> Error for ${IMAGE_SRC}:`, e.currentTarget.src)} // Note: error handling is slightly different
                />
                 <p className="text-xs mt-2">Explicit width/height set: {IMAGE_WIDTH}x{IMAGE_HEIGHT}. Image border: red.</p>
            </div>

            <hr className="my-6" />

            <Link href="/login" className="text-blue-600 hover:underline">
                ← Back to Login
            </Link>
        </div>
    );
}
--- END FILE: src\app\image-test\page.tsx ---

--- START FILE: src\app\globals.css ---
/* src/app/globals.css (Updated for v3) */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add minimal body styling */
/* body { */
   /* font-family: sans-serif; /* REMOVED - Tailwind will apply font-sans */ */
   /* Add other base styles if needed e.g., background color */
/* } */

/* You can leave the body selector empty or remove it if no other base body styles are needed */
body {
    /* Example: Add a default background if desired */
    /* background-color: #f8fafc; */ /* Light gray */
}
--- END FILE: src\app\globals.css ---

--- START FILE: src\app\layout.tsx ---
// src/app/layout.tsx
import "./globals.css"; // Ensure this is imported EARLY and ONLY HERE
import type { Metadata } from "next";
import NextAuthProvider from "@/components/providers/NextAuthProvider";
import { Inter } from 'next/font/google'; // Import the Inter font

// Configure the Inter font
const inter = Inter({
  subsets: ['latin'], // Specify character subsets you need
  display: 'swap', // Use 'swap' for better perceived performance
  variable: '--font-inter', // Define a CSS variable for the font
});

export const metadata: Metadata = {
  title: "SMLS-SFMS",
  description: "Skills and Faculty Management System",
};

export default function RootLayout({ children }: Readonly<{ children: React.ReactNode; }>) {
  return (
    // Apply the font variable to the html tag
    <html lang="en" className={`${inter.variable}`}>
      <body> {/* The font variable will cascade down */}
         <NextAuthProvider>
           {children}
         </NextAuthProvider>
      </body>
    </html>
  );
}
--- END FILE: src\app\layout.tsx ---

--- START FILE: src\app\page.tsx ---
// src/app/page.tsx
'use client'; // Needs to be a client component to use the hook

import React from 'react';
import { useSession, signIn, signOut } from 'next-auth/react';
import Link from 'next/link'; // Import Link

export default function HomePage() {
    // Use the useSession hook to get session data
    const { data: session, status } = useSession();

    // status can be 'loading', 'authenticated', or 'unauthenticated'

    return (
        <div className="p-6">
            <h1 className="text-2xl font-semibold mb-4 text-[#003153]">Welcome to SMLS-SFMS!</h1>

            {status === 'loading' && (
                <p className="text-gray-500">Loading session...</p>
            )}

            {status === 'authenticated' && session?.user && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <p>Signed in as: <strong>{session.user.email}</strong></p>
                    {/* We added 'role' to the session in authOptions callbacks */}
                    <p>Role: <strong>{(session.user as any).role}</strong></p>
                    <button
                        onClick={() => signOut()} // Call signOut from next-auth/react
                        className="mt-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded shadow"
                    >
                        Sign Out
                    </button>
                </div>
            )}

            {status === 'unauthenticated' && (
                 <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <p>You are not signed in.</p>
                    <Link href="/login"> {/* Use Link for client-side navigation */}
                       <button
                          className="mt-2 px-4 py-2 bg-[#003153] hover:bg-[#002742] text-white rounded shadow"
                       >
                           Sign In
                       </button>
                    </Link>
                 </div>
            )}

             <p className="mt-4">This is the homepage content.</p>
             {/* We can add links to other sections later */}

        </div>
    );
}
--- END FILE: src\app\page.tsx ---

--- START FILE: src\components\profile\AcademicQualificationDisplay.tsx ---
// src/components/profile/AcademicQualificationDisplay.tsx
import React from 'react';
import type { AcademicQualification } from '@/generated/prisma';
// Import the new StatusDisplay component
import StatusDisplay from './StatusDisplay';
// Import necessary icons (adjust as needed)
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon } from '@heroicons/react/24/outline';

interface Props {
    item: AcademicQualification;
}

export default function AcademicQualificationDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure from the template
        <div className="flex flex-col gap-2"> {/* Reduced gap slightly */}
            {/* Degree Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight"> {/* Adjusted size */}
                {item.degree || 'N/A'}
            </h3>

            {/* Institution */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold"> {/* Adjusted size/gap */}
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-blue-50 text-blue-600 flex-shrink-0"> {/* Adjusted size */}
                    {/* Use a relevant icon */}
                    <BuildingLibraryIcon className="h-4 w-4" />
                </div>
                <span>{item.institution || 'N/A'}{item.program ? ` - ${item.program}` : ''}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2"> {/* Added gap/margin */}

                {/* Completion Year */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium"> {/* Adjusted size/gap */}
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Completed: {item.yearCompleted || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.diplomaFileUrl ? (
                     <a
                        href={item.diplomaFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200" // Adjusted size/padding
                        title={item.diplomaFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" /> {/* Changed icon */}
                       <span>View Document</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No document</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0"> {/* Ensure status is right-aligned */}
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\AcademicQualificationDisplay.tsx ---

--- START FILE: src\components\profile\AcademicQualificationForm.tsx ---
// src/components/profile/AcademicQualificationForm.tsx
import React, { ChangeEvent } from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
// --- *** IMPORT FROM TYPES FILE *** ---
import type { TempAcademicQualification } from '@/types';

interface Props {
    item: TempAcademicQualification;
    isPending: boolean;
    // Use keyof directly on the imported type for better safety
    handleInputChange: (itemId: string, fieldName: keyof TempAcademicQualification, value: string | number) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function AcademicQualificationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            {/* ... rest of the form JSX remains the same ... */}
             <p className="text-xs font-semibold text-blue-700"> {isNewItem ? 'New Qualification' : 'Editing Qualification'} </p>
             {/* Degree Input */}
             <div> <label htmlFor={`degree-${item.id}`} className={labelClass}>Degree*</label> <input type="text" id={`degree-${item.id}`} name="degree" value={item.degree || ''} onChange={(e) => handleInputChange(item.id, 'degree', e.target.value)} className={inputClass} placeholder="e.g., Bachelor of Science" required disabled={isPending} /> </div>
             {/* Institution Input */}
             <div> <label htmlFor={`institution-${item.id}`} className={labelClass}>Institution*</label> <input type="text" id={`institution-${item.id}`} name="institution" value={item.institution || ''} onChange={(e) => handleInputChange(item.id, 'institution', e.target.value)} className={inputClass} placeholder="e.g., San Pedro College" required disabled={isPending} /> </div>
             {/* Program Input */}
             <div> <label htmlFor={`program-${item.id}`} className={labelClass}>Program/Major*</label> <input type="text" id={`program-${item.id}`} name="program" value={item.program || ''} onChange={(e) => handleInputChange(item.id, 'program', e.target.value)} className={inputClass} placeholder="e.g., Medical Laboratory Science" required disabled={isPending} /> </div>
             {/* Year Completed Input */}
             <div> <label htmlFor={`yearCompleted-${item.id}`} className={labelClass}>Year Completed*</label> <input type="number" id={`yearCompleted-${item.id}`} name="yearCompleted" value={item.yearCompleted || ''} onChange={(e) => handleInputChange(item.id, 'yearCompleted', parseInt(e.target.value, 10) || '')} className={inputClass} placeholder="YYYY" required min="1900" max={new Date().getFullYear() + 5} disabled={isPending} /> </div>
             {/* File Input */}
             <div> <label htmlFor={`diplomaFile-${item.id}`} className={labelClass}> Upload Diploma/Transcript {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'} </label> {!isNewItem && item.diplomaFileUrl && !item._selectedFile && ( <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current: <a href={item.diplomaFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">{item.diplomaFileUrl.split('/').pop()}</a> </div> )} <input type="file" id={`diplomaFile-${item.id}`} name="diplomaFile" onChange={(e) => handleFileChange(item.id, e.target.files?.[0])} className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70" accept=".pdf,.png,.jpg,.jpeg" disabled={isPending} /> {item._selectedFile && ( <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>×</button> </div> )} <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p> </div>
        </div>
    );
}
--- END FILE: src\components\profile\AcademicQualificationForm.tsx ---

--- START FILE: src\components\profile\AwardRecognitionDisplay.tsx ---
// src/components/profile/AwardRecognitionDisplay.tsx
import React from 'react';
import type { AwardRecognition } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, StarIcon } from '@heroicons/react/24/outline'; // Added StarIcon

interface Props {
    item: AwardRecognition;
}

export default function AwardRecognitionDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Award Name Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.awardName || 'N/A'}
            </h3>

            {/* Awarding Body */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-indigo-50 text-indigo-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <StarIcon className="h-4 w-4" />
                </div>
                <span>{item.awardingBody || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Year Received */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Received: {item.yearReceived || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.certificateUrl ? (
                     <a
                        href={item.certificateUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.certificateUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Certificate</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No certificate</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\AwardRecognitionDisplay.tsx ---

--- START FILE: src\components\profile\AwardRecognitionForm.tsx ---
// src/components/profile/AwardRecognitionForm.tsx
import React from 'react';
import type { TempAwardRecognition } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempAwardRecognition;
    isPending: boolean;
    handleInputChange: (itemId: string, fieldName: keyof TempAwardRecognition, value: string | number | null) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function AwardRecognitionForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Award/Recognition' : 'Editing Award/Recognition'}</p>

            {/* Award Name Input */}
            <div>
                <label htmlFor={`awardName-${item.id}`} className={labelClass}>Award/Recognition Name*</label>
                <input
                    type="text"
                    id={`awardName-${item.id}`}
                    name="awardName"
                    value={item.awardName || ''}
                    onChange={(e) => handleInputChange(item.id, 'awardName', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Awarding Body Input */}
            <div>
                <label htmlFor={`awardingBody-${item.id}`} className={labelClass}>Awarding Body*</label>
                <input
                    type="text"
                    id={`awardingBody-${item.id}`}
                    name="awardingBody"
                    value={item.awardingBody || ''}
                    onChange={(e) => handleInputChange(item.id, 'awardingBody', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., San Pedro College, PAMET"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Year Received Input */}
            <div>
                <label htmlFor={`yearReceived-${item.id}`} className={labelClass}>Year Received*</label>
                <input
                    type="number"
                    id={`yearReceived-${item.id}`}
                    name="yearReceived"
                    value={item.yearReceived || ''}
                    onChange={(e) => handleInputChange(item.id, 'yearReceived', parseInt(e.target.value, 10) || null)} // Parse to number or null
                    className={inputClass}
                    placeholder="YYYY"
                    required
                    min="1900"
                    max={new Date().getFullYear() + 5} // Allow a bit into the future
                    disabled={isPending}
                />
            </div>

             {/* File Input */}
             <div>
                <label htmlFor={`certificateFile-${item.id}`} className={labelClass}>Upload Certificate/Proof (Optional)</label>
                 {!isNewItem && item.certificateUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.certificateUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.certificateUrl.split('/').pop()} </a>
                    </div>
                 )}
                 <input
                    type="file"
                    id={`certificateFile-${item.id}`}
                    name="certificateFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])}
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button> </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\AwardRecognitionForm.tsx ---

--- START FILE: src\components\profile\CommunityInvolvementDisplay.tsx ---
// src/components/profile/CommunityInvolvementDisplay.tsx
import React from 'react';
import type { CommunityInvolvement } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, UserGroupIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added UserGroupIcon, MapPinIcon

interface Props {
    item: CommunityInvolvement;
}

export default function CommunityInvolvementDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Engagement Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.engagementTitle || 'N/A'}
            </h3>

            {/* Role */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-teal-50 text-teal-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <UserGroupIcon className="h-4 w-4" />
                </div>
                <span>Role: {item.role || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Location/Date */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.locationDate || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\CommunityInvolvementDisplay.tsx ---

--- START FILE: src\components\profile\CommunityInvolvementForm.tsx ---
// src/components/profile/CommunityInvolvementForm.tsx
import React from 'react';
import type { TempCommunityInvolvement } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempCommunityInvolvement;
    isPending: boolean;
    // String values are sufficient for these fields
    handleInputChange: (itemId: string, fieldName: keyof TempCommunityInvolvement, value: string | null) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function CommunityInvolvementForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Community Involvement' : 'Editing Community Involvement'}</p>

            {/* Engagement Title Input */}
            <div>
                <label htmlFor={`engagementTitle-${item.id}`} className={labelClass}>Engagement Title*</label>
                <input
                    type="text"
                    id={`engagementTitle-${item.id}`}
                    name="engagementTitle"
                    value={item.engagementTitle || ''}
                    onChange={(e) => handleInputChange(item.id, 'engagementTitle', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Medical Mission Barangay X"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Role Input */}
            <div>
                <label htmlFor={`role-${item.id}`} className={labelClass}>Role*</label>
                <input
                    type="text"
                    id={`role-${item.id}`}
                    name="role"
                    value={item.role || ''}
                    onChange={(e) => handleInputChange(item.id, 'role', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Volunteer, Organizer"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Location/Date Input */}
            <div>
                <label htmlFor={`locationDate-${item.id}`} className={labelClass}>Location & Date*</label>
                <input
                    type="text"
                    id={`locationDate-${item.id}`}
                    name="locationDate"
                    value={item.locationDate || ''}
                    onChange={(e) => handleInputChange(item.id, 'locationDate', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Barangay X / May 5, 2024"
                    required
                    disabled={isPending}
                />
            </div>

             {/* File Input */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., Certificate) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])}
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button> </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\CommunityInvolvementForm.tsx ---

--- START FILE: src\components\profile\ConferencePresentationDisplay.tsx ---
// src/components/profile/ConferencePresentationDisplay.tsx
import React from 'react';
import type { ConferencePresentation } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, PresentationChartBarIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added PresentationChartBarIcon, MapPinIcon

interface Props {
    item: ConferencePresentation;
}

export default function ConferencePresentationDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Paper Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.paperTitle || 'N/A'}
            </h3>

            {/* Event Name */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-purple-50 text-purple-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <PresentationChartBarIcon className="h-4 w-4" />
                </div>
                <span>Event: {item.eventName || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date/Location */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.dateLocation || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof/Details</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ConferencePresentationDisplay.tsx ---

--- START FILE: src\components\profile\ConferencePresentationForm.tsx ---
// src/components/profile/ConferencePresentationForm.tsx
import React from 'react';
import type { TempConferencePresentation } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempConferencePresentation;
    isPending: boolean;
    // Only string values needed for these fields
    handleInputChange: (itemId: string, fieldName: keyof TempConferencePresentation, value: string) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ConferencePresentationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Conference Presentation' : 'Editing Conference Presentation'}</p>

            {/* Paper Title Input */}
            <div>
                <label htmlFor={`paperTitle-${item.id}`} className={labelClass}>Paper/Presentation Title*</label>
                <input
                    type="text"
                    id={`paperTitle-${item.id}`}
                    name="paperTitle"
                    value={item.paperTitle || ''}
                    onChange={(e) => handleInputChange(item.id, 'paperTitle', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Event Name Input */}
            <div>
                <label htmlFor={`eventName-${item.id}`} className={labelClass}>Conference/Event Name*</label>
                <input
                    type="text"
                    id={`eventName-${item.id}`}
                    name="eventName"
                    value={item.eventName || ''}
                    onChange={(e) => handleInputChange(item.id, 'eventName', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date & Location Input */}
            <div>
                <label htmlFor={`dateLocation-${item.id}`} className={labelClass}>Date & Location*</label>
                <input
                    type="text"
                    id={`dateLocation-${item.id}`}
                    name="dateLocation"
                    value={item.dateLocation || ''}
                    onChange={(e) => handleInputChange(item.id, 'dateLocation', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., June 2024 / Manila"
                    required
                    disabled={isPending}
                />
            </div>

            {/* File Input for Proof */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., Certificate, Program) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])}
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button> </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\ConferencePresentationForm.tsx ---

--- START FILE: src\components\profile\ProfessionalAffiliationDisplay.tsx ---
// src/components/profile/ProfessionalAffiliationDisplay.tsx
import React from 'react';
import type { ProfessionalAffiliation } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, UserGroupIcon, BuildingOfficeIcon } from '@heroicons/react/24/outline'; // Added BuildingOfficeIcon

interface Props {
    item: ProfessionalAffiliation;
}

export default function ProfessionalAffiliationDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Organization Name */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.organization || 'N/A'}
            </h3>

            {/* Position (Conditional) */}
            {item.position && (
                <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                    <div className="flex items-center justify-center w-6 h-6 rounded-md bg-cyan-50 text-cyan-600 flex-shrink-0">
                        {/* Use a relevant icon */}
                        <UserGroupIcon className="h-4 w-4" />
                    </div>
                    <span>Position: {item.position}</span>
                </div>
            )}

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Inclusive Years */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Years: {item.inclusiveYears || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.membershipProofUrl ? (
                     <a
                        href={item.membershipProofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.membershipProofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalAffiliationDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalAffiliationForm.tsx ---

// src/components/profile/ProfessionalAffiliationForm.tsx
import React from 'react';
import type { TempProfessionalAffiliation } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempProfessionalAffiliation;
    isPending: boolean;
    handleInputChange: (itemId: string, fieldName: keyof TempProfessionalAffiliation, value: string | number | Date | null) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ProfessionalAffiliationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Affiliation' : 'Editing Affiliation'}</p>
            <div> <label htmlFor={`organization-${item.id}`} className={labelClass}>Organization*</label> <input type="text" id={`organization-${item.id}`} name="organization" value={item.organization || ''} onChange={(e) => handleInputChange(item.id, 'organization', e.target.value)} className={inputClass} required disabled={isPending} /> </div>
            <div> <label htmlFor={`position-${item.id}`} className={labelClass}>Position (Optional)</label> <input type="text" id={`position-${item.id}`} name="position" value={item.position || ''} onChange={(e) => handleInputChange(item.id, 'position', e.target.value)} className={inputClass} disabled={isPending} /> </div>
            <div> <label htmlFor={`inclusiveYears-${item.id}`} className={labelClass}>Inclusive Years*</label> <input type="text" id={`inclusiveYears-${item.id}`} name="inclusiveYears" value={item.inclusiveYears || ''} onChange={(e) => handleInputChange(item.id, 'inclusiveYears', e.target.value)} className={inputClass} placeholder="e.g., 2019-Present" required disabled={isPending} /> </div>
             {/* File Input */}
             <div>
                <label htmlFor={`membershipProofFile-${item.id}`} className={labelClass}>Upload Membership Proof (Optional)</label>
                 {!isNewItem && item.membershipProofUrl && !item._selectedFile && ( <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current: <a href={item.membershipProofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.membershipProofUrl.split('/').pop()} </a> </div> )}
                 <input type="file" id={`membershipProofFile-${item.id}`} name="membershipProofFile" onChange={(e) => handleFileChange(item.id, e.target.files?.[0])} className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70" accept=".pdf,.png,.jpg,.jpeg" disabled={isPending} />
                 {item._selectedFile && ( <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button> </div> )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalAffiliationForm.tsx ---

--- START FILE: src\components\profile\ProfessionalDevelopmentDisplay.tsx ---
// src/components/profile/ProfessionalDevelopmentDisplay.tsx
import React from 'react';
import type { ProfessionalDevelopment } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingLibraryIcon, SparklesIcon, MapPinIcon } from '@heroicons/react/24/outline'; // Added SparklesIcon, MapPinIcon

interface Props {
    item: ProfessionalDevelopment;
}

export default function ProfessionalDevelopmentDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Development Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.title || 'N/A'}
            </h3>

            {/* Organizer */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-yellow-50 text-yellow-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <SparklesIcon className="h-4 w-4" />
                </div>
                <span>Organizer: {item.organizer || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date/Location */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <MapPinIcon className="h-4 w-4 text-gray-400"/>
                    <span>{item.dateLocation || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.certificateFileUrl ? (
                     <a
                        href={item.certificateFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.certificateFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Certificate</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No certificate</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalDevelopmentDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalDevelopmentForm.tsx ---
// src/components/profile/ProfessionalDevelopmentForm.tsx
import React from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempProfessionalDevelopment } from '@/types'; // Import from shared types

interface Props {
    item: TempProfessionalDevelopment;
    isPending: boolean;
    handleInputChange: (itemId: string, fieldName: keyof TempProfessionalDevelopment, value: string) => void; // value is always string from input event
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}

// Input and Label classes (consistent with AcademicQualificationForm)
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function ProfessionalDevelopmentForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">
                {isNewItem ? 'New Professional Development' : 'Editing Professional Development'}
            </p>

            {/* Title Input */}
            <div>
                <label htmlFor={`title-${item.id}`} className={labelClass}>Title*</label>
                <input
                    type="text"
                    id={`title-${item.id}`}
                    name="title"
                    value={item.title || ''}
                    onChange={(e) => handleInputChange(item.id, 'title', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Seminar on Advanced Lab Techniques"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Organizer Input */}
            <div>
                <label htmlFor={`organizer-${item.id}`} className={labelClass}>Organizer*</label>
                <input
                    type="text"
                    id={`organizer-${item.id}`}
                    name="organizer"
                    value={item.organizer || ''}
                    onChange={(e) => handleInputChange(item.id, 'organizer', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., PAMET"
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date & Location Input */}
            <div>
                <label htmlFor={`dateLocation-${item.id}`} className={labelClass}>Date & Location*</label>
                <input
                    type="text"
                    id={`dateLocation-${item.id}`}
                    name="dateLocation"
                    value={item.dateLocation || ''}
                    onChange={(e) => handleInputChange(item.id, 'dateLocation', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., May 2024 / Davao City"
                    required
                    disabled={isPending}
                />
            </div>

            {/* File Input for Certificate */}
            <div>
                <label htmlFor={`certificateFile-${item.id}`} className={labelClass}>
                    Upload Certificate {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'}
                </label>
                {!isNewItem && item.certificateFileUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        Current:
                        <a href={item.certificateFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">
                            {item.certificateFileUrl.split('/').pop()}
                        </a>
                    </div>
                )}
                <input
                    type="file"
                    id={`certificateFile-${item.id}`}
                    name="certificateFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])}
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg" // Consistent file types
                    disabled={isPending}
                />
                {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        New: <span>{item._selectedFile.name}</span>
                        <button
                            type="button"
                            onClick={() => handleFileChange(item.id, null)} // Clear selection
                            className="ml-1 text-red-500 hover:text-red-700 focus:outline-none"
                            title="Remove selection"
                            disabled={isPending}
                        >
                            ✕ {/* Cross symbol */}
                        </button>
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalDevelopmentForm.tsx ---

--- START FILE: src\components\profile\ProfessionalLicenseDisplay.tsx ---
// src/components/profile/ProfessionalLicenseDisplay.tsx
import React from 'react';
import type { ProfessionalLicense } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, IdentificationIcon, ClockIcon as ExpiryIcon } from '@heroicons/react/24/outline'; // Added IdentificationIcon, aliased ClockIcon

// Helper function to format only the date part
const formatDateOnly = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return 'Invalid Date';
        return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
};

interface Props {
    item: ProfessionalLicense;
}

export default function ProfessionalLicenseDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Examination Name */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.examination || 'N/A'}
            </h3>

            {/* License Number */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-lime-50 text-lime-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <IdentificationIcon className="h-4 w-4" />
                </div>
                <span>License No: {item.licenseNumber || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Issued & Expiry */}
                <div className="flex flex-col sm:flex-row sm:items-center gap-x-3 gap-y-1 text-xs text-gray-600 font-medium">
                    <div className="flex items-center gap-1.5">
                        <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                        <span>Issued: {item.monthYear || 'N/A'}</span>
                    </div>
                     <div className="flex items-center gap-1.5">
                        <ExpiryIcon className="h-4 w-4 text-gray-400"/>
                        <span>Expires: {formatDateOnly(item.expiration)}</span>
                    </div>
                </div>

                {/* Document Link */}
                {item.licenseFileUrl ? (
                     <a
                        href={item.licenseFileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.licenseFileUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View License File</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No file</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalLicenseDisplay.tsx ---

--- START FILE: src\components\profile\ProfessionalLicenseForm.tsx ---
// src/components/profile/ProfessionalLicenseForm.tsx
import React from 'react';
import { PaperClipIcon } from '@heroicons/react/24/outline';
import type { TempProfessionalLicense } from '@/types'; // Import from shared types

interface Props {
    item: TempProfessionalLicense;
    isPending: boolean;
    handleInputChange: (itemId: string, fieldName: keyof TempProfessionalLicense, value: string | Date | number | null) => void;
    // ADDED: handleFileChange prop
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}

// Input and Label classes
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

// Helper to format date for input type="date"
const formatDateForInput = (date: Date | string | null): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return '';
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch { return ''; }
};

export default function ProfessionalLicenseForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const dateValue = e.target.value;
        try {
            const dateObject = dateValue ? new Date(dateValue) : null;
            if (dateObject && isNaN(dateObject.getTime())) {
                handleInputChange(item.id, 'expiration', null);
            } else {
                 // Ensure we pass a Date object or null, even if invalid (backend MUST validate)
                handleInputChange(item.id, 'expiration', dateObject);
            }
        } catch {
            handleInputChange(item.id, 'expiration', null);
        }
    };

    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">
                {isNewItem ? 'New Professional License' : 'Editing Professional License'}
            </p>

            {/* Examination Name Input */}
            <div>
                <label htmlFor={`examination-${item.id}`} className={labelClass}>Examination Name*</label>
                <input type="text" id={`examination-${item.id}`} name="examination" value={item.examination || ''} onChange={(e) => handleInputChange(item.id, 'examination', e.target.value)} className={inputClass} placeholder="e.g., Medical Technologist Licensure" required disabled={isPending} />
            </div>

            {/* License Number Input */}
            <div>
                <label htmlFor={`licenseNumber-${item.id}`} className={labelClass}>License Number*</label>
                <input type="text" id={`licenseNumber-${item.id}`} name="licenseNumber" value={item.licenseNumber || ''} onChange={(e) => handleInputChange(item.id, 'licenseNumber', e.target.value)} className={inputClass} placeholder="e.g., 0123456" required disabled={isPending} />
            </div>

            {/* Month/Year Issued Input */}
            <div>
                <label htmlFor={`monthYear-${item.id}`} className={labelClass}>Month/Year Issued*</label>
                <input type="text" id={`monthYear-${item.id}`} name="monthYear" value={item.monthYear || ''} onChange={(e) => handleInputChange(item.id, 'monthYear', e.target.value)} className={inputClass} placeholder="e.g., August 2023" required disabled={isPending} />
            </div>

            {/* Expiration Date Input */}
            <div>
                <label htmlFor={`expiration-${item.id}`} className={labelClass}>Expiration Date*</label>
                <input type="date" id={`expiration-${item.id}`} name="expiration" value={formatDateForInput(item.expiration)} onChange={handleDateChange} className={inputClass} required disabled={isPending} />
            </div>

            {/* ADDED: File Input for License */}
            <div>
                <label htmlFor={`licenseFile-${item.id}`} className={labelClass}>
                    Upload License File {isNewItem ? '(Optional)' : '(Replace Existing - Optional)'}
                </label>
                {!isNewItem && item.licenseFileUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        Current:
                        <a href={item.licenseFileUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]">
                            {item.licenseFileUrl.split('/').pop()}
                        </a>
                    </div>
                )}
                <input
                    type="file"
                    id={`licenseFile-${item.id}`}
                    name="licenseFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])} // Use handleFileChange
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                />
                {item._selectedFile && (
                    <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" />
                        New: <span>{item._selectedFile.name}</span>
                        <button
                            type="button"
                            onClick={() => handleFileChange(item.id, null)}
                            className="ml-1 text-red-500 hover:text-red-700 focus:outline-none"
                            title="Remove selection"
                            disabled={isPending}
                        >
                            ✕
                        </button>
                    </div>
                )}
                <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\ProfessionalLicenseForm.tsx ---

--- START FILE: src\components\profile\PublicationDisplay.tsx ---
// src/components/profile/PublicationDisplay.tsx
import React from 'react';
import type { Publication } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, LinkIcon, BookOpenIcon } from '@heroicons/react/24/outline'; // Added BookOpenIcon

// Helper function to format only the date part
const formatDateOnly = (date: string | Date | null | undefined): string => {
    if (!date) return 'N/A';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return 'Invalid Date';
        return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
    } catch (e) { return 'Invalid Date'; }
};

interface Props {
    item: Publication;
}

export default function PublicationDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Research Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.researchTitle || 'N/A'}
            </h3>

            {/* Journal */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold italic">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-rose-50 text-rose-600 flex-shrink-0 not-italic">
                    {/* Use a relevant icon */}
                    <BookOpenIcon className="h-4 w-4" />
                </div>
                <span className='not-italic'>Journal: {item.journal || 'N/A'}</span>
            </div>

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Date Published */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Published: {formatDateOnly(item.datePublished)}</span>
                </div>

                {/* Links (DOI & PDF) */}
                <div className="flex items-center gap-x-3 gap-y-1">
                    {item.doiLink && (
                        <a
                            href={item.doiLink.startsWith('http') ? item.doiLink : `https://${item.doiLink}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                            title={item.doiLink}
                        >
                        <LinkIcon className="h-4 w-4" /> DOI Link
                        </a>
                    )}
                    {item.pdfUrl && (
                        <a
                            href={item.pdfUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                             className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                            title={item.pdfUrl}>
                        <DocumentTextIcon className="h-4 w-4" /> View PDF
                        </a>
                    )}
                    {!item.doiLink && !item.pdfUrl && (
                         <span className="text-xs text-gray-400 italic">No links</span>
                    )}
                </div>


                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\PublicationDisplay.tsx ---

--- START FILE: src\components\profile\PublicationForm.tsx ---
// src/components/profile/PublicationForm.tsx
import React from 'react';
import type { TempPublication } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempPublication;
    isPending: boolean;
    handleInputChange: (itemId: string, fieldName: keyof TempPublication, value: string | Date | null) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

// Helper to format date for input type="date"
const formatDateForInput = (date: Date | string | null): string => {
    if (!date) return '';
    try {
        const d = new Date(date);
        if (isNaN(d.getTime())) return '';
        const year = d.getFullYear();
        const month = (d.getMonth() + 1).toString().padStart(2, '0');
        const day = d.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch { return ''; }
};


export default function PublicationForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;

    // Handle date change specifically
    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const dateValue = e.target.value;
        try {
            // Date is required, so only pass valid Date objects
            const dateObject = dateValue ? new Date(dateValue) : null;
            if (dateObject && !isNaN(dateObject.getTime())) {
                handleInputChange(item.id, 'datePublished', dateObject);
            } else {
                 // Handle potentially setting an invalid state or visual feedback if needed
                 // For now, we might just clear it or pass null, but backend validation is key
                 handleInputChange(item.id, 'datePublished', null); // Pass null if invalid/empty
            }
        } catch {
            handleInputChange(item.id, 'datePublished', null); // Pass null on error
        }
    };


    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Publication' : 'Editing Publication'}</p>

            {/* Research Title Input */}
            <div>
                <label htmlFor={`researchTitle-${item.id}`} className={labelClass}>Research Title*</label>
                <input
                    type="text"
                    id={`researchTitle-${item.id}`}
                    name="researchTitle"
                    value={item.researchTitle || ''}
                    onChange={(e) => handleInputChange(item.id, 'researchTitle', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Journal Input */}
            <div>
                <label htmlFor={`journal-${item.id}`} className={labelClass}>Journal Name*</label>
                <input
                    type="text"
                    id={`journal-${item.id}`}
                    name="journal"
                    value={item.journal || ''}
                    onChange={(e) => handleInputChange(item.id, 'journal', e.target.value)}
                    className={inputClass}
                    required
                    disabled={isPending}
                />
            </div>

            {/* Date Published Input */}
             <div>
                <label htmlFor={`datePublished-${item.id}`} className={labelClass}>Date Published*</label>
                <input
                    type="date"
                    id={`datePublished-${item.id}`}
                    name="datePublished"
                    value={formatDateForInput(item.datePublished)} // Format Date to YYYY-MM-DD string
                    onChange={handleDateChange}
                    className={inputClass}
                    required // Mark as required
                    disabled={isPending}
                />
            </div>

             {/* DOI Link Input */}
            <div>
                <label htmlFor={`doiLink-${item.id}`} className={labelClass}>DOI Link (Optional)</label>
                <input
                    type="text"
                    id={`doiLink-${item.id}`}
                    name="doiLink"
                    value={item.doiLink || ''}
                    onChange={(e) => handleInputChange(item.id, 'doiLink', e.target.value || null)} // Pass null if empty
                    className={inputClass}
                    placeholder="e.g., 10.1000/xyz123 or https://doi.org/..."
                    disabled={isPending}
                 />
            </div>

            {/* File Input for PDF */}
             <div>
                <label htmlFor={`pdfFile-${item.id}`} className={labelClass}>Upload PDF Copy (Optional)</label>
                 {!isNewItem && item.pdfUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.pdfUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.pdfUrl.split('/').pop()} </a>
                    </div>
                 )}
                 <input
                    type="file"
                    id={`pdfFile-${item.id}`}
                    name="pdfFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])}
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf" // Primarily expect PDFs
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button> </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF only.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\PublicationForm.tsx ---

--- START FILE: src\components\profile\StatusDisplay.tsx ---
// src/components/profile/StatusDisplay.tsx
import React from 'react';
import type { ApprovalStatus } from '@/generated/prisma';
import { ClockIcon, CheckCircleIcon, XCircleIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';

interface Props {
    status: ApprovalStatus;
    rejectionReason?: string | null;
}

export default function StatusDisplay({ status, rejectionReason }: Props) {
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-700';
    let iconColor = 'text-gray-500';
    let shadow = 'shadow-sm';
    let Icon = ClockIcon;
    let text = status;

    switch (status) {
        case 'PENDING':
            bgColor = 'bg-amber-100';
            textColor = 'text-amber-800';
            iconColor = 'text-amber-600';
            shadow = 'shadow-md shadow-amber-500/10';
            Icon = ClockIcon;
            break;
        case 'APPROVED':
            // Match template's approved style
            bgColor = 'bg-emerald-100'; // Lighter green
            textColor = 'text-emerald-800'; // Darker green text
            iconColor = 'text-emerald-600';
            shadow = 'shadow-lg shadow-emerald-500/20'; // Subtle green shadow
            Icon = CheckCircleIcon;
            break;
        case 'REJECTED':
            bgColor = 'bg-red-100';
            textColor = 'text-red-800';
            iconColor = 'text-red-600';
            shadow = 'shadow-md shadow-red-500/10';
            Icon = XCircleIcon;
            break;
    }

    return (
        <div className="flex flex-col items-end gap-1"> {/* Align status pill and reason */}
            <div
                className={`inline-flex items-center gap-1.5 rounded-full px-3 py-1 text-xs font-bold uppercase tracking-wider ${bgColor} ${textColor} ${shadow}`}
                title={status}
            >
                <Icon className={`h-4 w-4 ${iconColor}`} />
                {text}
            </div>
            {status === 'REJECTED' && rejectionReason && (
                 <div className="mt-1 flex items-start gap-1 rounded border border-red-200 bg-red-50 p-1.5 text-xs text-red-700 max-w-[200px] text-right"> {/* Added max-width */}
                    <ExclamationTriangleIcon className="h-4 w-4 flex-shrink-0 text-red-500 mt-0.5" />
                    <span><strong>Reason:</strong> {rejectionReason}</span>
                 </div>
            )}
        </div>
    );
}
--- END FILE: src\components\profile\StatusDisplay.tsx ---

--- START FILE: src\components\profile\WorkExperienceDisplay.tsx ---
// src/components/profile/WorkExperienceDisplay.tsx
import React from 'react';
import type { WorkExperience } from '@/generated/prisma';
import StatusDisplay from './StatusDisplay'; // Import the new StatusDisplay component
import { PaperClipIcon, DocumentTextIcon, CalendarDaysIcon, BuildingOfficeIcon, BriefcaseIcon } from '@heroicons/react/24/outline'; // Added BriefcaseIcon

interface Props {
    item: WorkExperience;
}

export default function WorkExperienceDisplay({ item }: Props) {
    return (
        // Mimic the 'qualification' div structure
        <div className="flex flex-col gap-2">
            {/* Position Title */}
            <h3 className="text-base font-bold text-gray-800 tracking-tight">
                {item.position || 'N/A'}
            </h3>

            {/* Institution */}
            <div className="flex items-center gap-2 text-sm text-gray-700 font-semibold">
                <div className="flex items-center justify-center w-6 h-6 rounded-md bg-orange-50 text-orange-600 flex-shrink-0">
                    {/* Use a relevant icon */}
                    <BuildingOfficeIcon className="h-4 w-4" />
                </div>
                <span>{item.institution || 'N/A'}</span>
            </div>

             {/* Nature of Work (Conditional) */}
             {item.natureOfWork && (
                <p className="text-xs text-gray-500 mt-1 pl-8"> {/* Indent slightly */}
                    <span className="font-medium">Nature:</span> {item.natureOfWork}
                 </p>
            )}

            {/* Details Row */}
            <div className="flex flex-wrap items-center justify-between gap-y-2 gap-x-4 pt-3 border-t border-gray-100 mt-2">

                {/* Inclusive Years */}
                <div className="flex items-center gap-1.5 text-xs text-gray-600 font-medium">
                    <CalendarDaysIcon className="h-4 w-4 text-gray-400"/>
                    <span>Years: {item.inclusiveYears || 'N/A'}</span>
                </div>

                {/* Document Link */}
                {item.proofUrl ? (
                     <a
                        href={item.proofUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center gap-1.5 text-xs font-semibold text-blue-600 hover:bg-blue-50 hover:text-blue-700 rounded-md px-2 py-1 transition duration-200"
                        title={item.proofUrl}
                    >
                       <DocumentTextIcon className="h-4 w-4" />
                       <span>View Proof</span>
                    </a>
                ) : (
                    <span className="text-xs text-gray-400 italic">No proof</span>
                )}

                {/* Status Display */}
                <div className="w-full sm:w-auto flex justify-end pt-1 sm:pt-0">
                    <StatusDisplay status={item.status} rejectionReason={item.rejectionReason} />
                </div>
            </div>
        </div>
    );
}
--- END FILE: src\components\profile\WorkExperienceDisplay.tsx ---

--- START FILE: src\components\profile\WorkExperienceForm.tsx ---
// src/components/profile/WorkExperienceForm.tsx
import React from 'react';
import type { TempWorkExperience } from '@/types';
import { PaperClipIcon } from '@heroicons/react/24/outline';

interface Props {
    item: TempWorkExperience;
    isPending: boolean;
    // String values are sufficient for this form's inputs
    handleInputChange: (itemId: string, fieldName: keyof TempWorkExperience, value: string | null) => void;
    handleFileChange: (itemId: string, file: File | null | undefined) => void;
}
const inputClass = "block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm disabled:opacity-70";
const labelClass = "block text-xs font-medium text-gray-600 mb-0.5";

export default function WorkExperienceForm({ item, isPending, handleInputChange, handleFileChange }: Props) {
    const isNewItem = !!item._isNew;
    return (
        <div className="space-y-3">
            <p className="text-xs font-semibold text-blue-700">{isNewItem ? 'New Work Experience' : 'Editing Work Experience'}</p>

            {/* Position Input */}
            <div>
                <label htmlFor={`position-${item.id}`} className={labelClass}>Position*</label>
                <input
                    type="text"
                    id={`position-${item.id}`}
                    name="position"
                    value={item.position || ''}
                    onChange={(e) => handleInputChange(item.id, 'position', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., Faculty, Medical Technologist"
                    required
                    disabled={isPending} />
             </div>

             {/* Institution Input */}
            <div>
                <label htmlFor={`institution-${item.id}`} className={labelClass}>Institution*</label>
                <input
                    type="text"
                    id={`institution-${item.id}`}
                    name="institution"
                    value={item.institution || ''}
                    onChange={(e) => handleInputChange(item.id, 'institution', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., San Pedro College"
                    required
                    disabled={isPending}
                 />
             </div>

             {/* Inclusive Years Input */}
            <div>
                <label htmlFor={`inclusiveYears-${item.id}`} className={labelClass}>Inclusive Years*</label>
                <input
                    type="text"
                    id={`inclusiveYears-${item.id}`}
                    name="inclusiveYears"
                    value={item.inclusiveYears || ''}
                    onChange={(e) => handleInputChange(item.id, 'inclusiveYears', e.target.value)}
                    className={inputClass}
                    placeholder="e.g., 2020-Present or 2018-2019"
                    required
                    disabled={isPending}
                 />
             </div>

             {/* Nature of Work Input */}
            <div>
                <label htmlFor={`natureOfWork-${item.id}`} className={labelClass}>Nature of Work (Optional)</label>
                <input
                    type="text"
                    id={`natureOfWork-${item.id}`}
                    name="natureOfWork"
                    value={item.natureOfWork || ''}
                    // Pass null if empty string for optional fields
                    onChange={(e) => handleInputChange(item.id, 'natureOfWork', e.target.value || null)}
                    className={inputClass}
                    disabled={isPending}
                 />
             </div>

             {/* File Input */}
             <div>
                <label htmlFor={`proofFile-${item.id}`} className={labelClass}>Upload Proof (e.g., COE) (Optional)</label>
                 {!isNewItem && item.proofUrl && !item._selectedFile && (
                    <div className="mb-1.5 flex items-center gap-1 text-xs text-gray-600">
                        <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> Current:
                        <a href={item.proofUrl} target="_blank" rel="noreferrer" className="text-blue-600 hover:underline truncate max-w-[150px]"> {item.proofUrl.split('/').pop()} </a>
                    </div>
                 )}
                 <input
                    type="file"
                    id={`proofFile-${item.id}`}
                    name="proofFile"
                    onChange={(e) => handleFileChange(item.id, e.target.files?.[0])}
                    className="block w-full text-xs text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 disabled:opacity-70"
                    accept=".pdf,.png,.jpg,.jpeg"
                    disabled={isPending}
                 />
                 {item._selectedFile && (
                     <div className="mt-1.5 flex items-center gap-1 text-xs text-gray-600"> <PaperClipIcon className="h-3 w-3 flex-shrink-0" /> New: <span>{item._selectedFile.name}</span> <button type="button" onClick={() => handleFileChange(item.id, null)} className="ml-1 text-red-500 hover:text-red-700 focus:outline-none" title="Remove selection" disabled={isPending}>✕</button> </div>
                 )}
                 <p className="text-xs text-gray-500 mt-1">Max 5MB. PDF, PNG, JPG.</p>
             </div>
        </div>
    );
}
--- END FILE: src\components\profile\WorkExperienceForm.tsx ---

--- START FILE: src\components\providers\NextAuthProvider.tsx ---
// src/components/providers/NextAuthProvider.tsx
'use client'; // This component wraps SessionProvider, so it must be a Client Component

import { SessionProvider } from 'next-auth/react';
import React from 'react';

interface Props {
    children: React.ReactNode;
    // We might pass the session from the server later for optimization,
    // but for now, SessionProvider will fetch it client-side.
}

export default function NextAuthProvider({ children }: Props) {
    return <SessionProvider>{children}</SessionProvider>;
}
--- END FILE: src\components\providers\NextAuthProvider.tsx ---

--- START FILE: src\components\ui\Footer.tsx ---
// src/components/ui/Footer.tsx
import React from 'react';
import Link from 'next/link';

export default function Footer() {
    const currentYear = new Date().getFullYear();

    return (
        // Changed background to a light sky blue, adjusted border and text colors
        <footer className="bg-sky-50 border-t border-sky-100 mt-auto backdrop-blur-sm"> {/* Added backdrop-blur for a subtle effect if needed */}
            <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-5"> {/* Slightly increased padding */}
                <div className="flex flex-col sm:flex-row justify-between items-center text-xs text-sky-700"> {/* Adjusted text color */}
                    {/* Left Side */}
                    <p>
                        © {currentYear} San Pedro College - SMLS. All rights reserved.
                    </p>

                    {/* Right Side (Optional Links) */}
                    <div className="flex space-x-4 mt-2 sm:mt-0">
                        <Link href="#" className="text-sky-600 hover:text-sky-800 hover:underline transition-colors duration-200"> {/* Adjusted link colors */}
                            Privacy Policy
                        </Link>
                        <Link href="#" className="text-sky-600 hover:text-sky-800 hover:underline transition-colors duration-200"> {/* Adjusted link colors */}
                            Terms of Service
                        </Link>
                        {/* Add more links if needed */}
                    </div>
                </div>
            </div>
        </footer>
    );
}
--- END FILE: src\components\ui\Footer.tsx ---

--- START FILE: src\components\ui\Header.tsx ---
// src/components/ui/Header.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSession, signOut } from 'next-auth/react';
import {
    ArrowLeftStartOnRectangleIcon,
    UserCircleIcon,
    HomeIcon,
    DocumentTextIcon,
    CheckBadgeIcon,
    UsersIcon,
    TableCellsIcon,
    ChevronDownIcon,
} from '@heroicons/react/24/outline';

export default function Header() {
    const { data: session, status } = useSession();
    const user = session?.user;
    const userRole = (user as any)?.role;

    const handleSignOut = async () => {
        await signOut({ callbackUrl: '/login' });
    };

    // Define links based on role
    const facultyLinks = [
        { href: '/dashboard', label: 'Dashboard', icon: HomeIcon },
        { href: '/profile', label: 'My Profile', icon: UserCircleIcon },
        { href: '/documents', label: 'My Documents', icon: DocumentTextIcon },
    ];

    const adminLinks = [
        { href: '/admin/dashboard', label: 'Dashboard', icon: HomeIcon },
        { href: '/admin/approvals', label: 'Approvals', icon: CheckBadgeIcon },
        // Add future admin links here
    ];

    const navLinks = userRole === 'ADMIN' ? adminLinks : facultyLinks;

    if (status === 'loading' || status === 'unauthenticated') {
        return null;
    }

    const userName = user?.name ?? user?.email ?? 'User';
    const userInitials = userName?.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase() || '?';

    return (
        // Applied gradient background, removed border, adjusted shadow
        <header className="bg-gradient-to-r from-[#003153] to-[#004a7c] text-white shadow-lg sticky top-0 z-50">
            <nav className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <div className="flex h-16 items-center justify-between">
                    {/* Left Side: Logo and Title */}
                    <div className="flex items-center">
                        <Link href={userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard'} className="flex-shrink-0 flex items-center gap-3">
                            {/* SMLS logo - ensure it looks okay on dark bg or add padding/bg if needed */}
                            <Image
                                src="/smls-logo.png"
                                alt="SMLS Logo"
                                width={40}
                                height={40}
                                className="h-10 w-auto" // Might need bg-white p-0.5 rounded-full if logo blends in
                            />
                            {/* Title text now white */}
                            <span className="font-semibold text-xl text-white hidden sm:inline">
                                SMLS-SFMS
                            </span>
                        </Link>
                    </div>

                    {/* Center: Navigation Links */}
                    <div className="hidden md:flex md:items-center md:space-x-2 lg:space-x-4">
                        {navLinks.map((link) => (
                            <Link
                                key={link.href}
                                href={link.href}
                                // Adjusted link styling for dark background
                                className="flex items-center gap-1.5 rounded-md px-3 py-2 text-sm font-medium text-gray-200 hover:bg-white/20 hover:text-white transition-colors duration-150"
                            >
                                {/* Icon color adjusted */}
                                <link.icon className="h-4 w-4 text-gray-300" />
                                {link.label}
                            </Link>
                        ))}
                    </div>

                    {/* Right Side: User Info & Logout */}
                    <div className="flex items-center">
                        <div className="ml-4 flex items-center md:ml-6 gap-3">

                            {/* User Info with Initials/Icon */}
                            <div className="flex items-center gap-2 cursor-default" title={userName}>
                                {/* Initials circle styling adjusted for dark bg */}
                                <span className="relative inline-flex items-center justify-center h-8 w-8 rounded-full bg-white/10 text-sky-200 text-xs font-semibold ring-1 ring-white/30">
                                    {userInitials}
                                </span>
                                {/* Name text adjusted */}
                                <span className="text-sm font-medium text-gray-100 hidden lg:inline">
                                    {userName}
                                </span>
                            </div>

                            {/* Logout Button - Styling adjusted for dark bg */}
                            <button
                                onClick={handleSignOut}
                                type="button"
                                className="relative flex-shrink-0 rounded-md p-1.5 text-gray-300 hover:bg-white/20 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-[#003153] transition-colors duration-150"
                                title="Sign Out"
                            >
                                <span className="absolute -inset-1.5" />
                                <span className="sr-only">Sign Out</span>
                                <ArrowLeftStartOnRectangleIcon className="h-5 w-5" aria-hidden="true" />
                            </button>
                        </div>
                    </div>
                </div>
            </nav>
        </header>
    );
}
--- END FILE: src\components\ui\Header.tsx ---

--- START FILE: src\lib\adminActions.ts ---
// src/lib/adminActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import type { ItemType } from '@/types'; // Import ItemType
import { Role } from '@/generated/prisma';
// --- Helper: Get Prisma Model Delegate ---
// This helps avoid large switch statements by dynamically accessing the correct model
function getPrismaModel(tx: any, itemType: ItemType) {
    const modelMap: Record<ItemType, any> = {
        academicQualification: tx.academicQualification,
        professionalLicense: tx.professionalLicense,
        workExperience: tx.workExperience,
        professionalAffiliation: tx.professionalAffiliation,
        awardRecognition: tx.awardRecognition,
        professionalDevelopment: tx.professionalDevelopment,
        communityInvolvement: tx.communityInvolvement,
        publication: tx.publication,
        conferencePresentation: tx.conferencePresentation,
    };
    const model = modelMap[itemType];
    if (!model) {
        throw new Error(`Invalid item type provided: ${itemType}`);
    }
    return model;
}

// --- Action: Get All Faculty Users ---
// NEW ACTION ADDED HERE
export async function getAllFaculty() {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized', faculty: [] };
    }

    try {
        const facultyUsers = await prisma.user.findMany({
            where: {
                role: Role.FACULTY, // Use the Role enum
            },
            select: {
                id: true,
                name: true,
                email: true,
                createdAt: true, // Include creation date for potential sorting/display
            },
            orderBy: {
                name: 'asc', // Order alphabetically by name
            },
        });

        return { success: true, faculty: facultyUsers };

    } catch (error: any) {
        console.error("Error fetching faculty list:", error);
        return { success: false, error: 'Failed to fetch faculty list.', faculty: [] };
    }
}
// --- END NEW ACTION ---


// --- Action: Get Pending Submissions ---
export async function getPendingSubmissions() {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized', pendingItems: [] };
    }

    try {
        const itemTypes: ItemType[] = [
            'academicQualification', 'professionalLicense', 'workExperience',
            'professionalAffiliation', 'awardRecognition', 'professionalDevelopment',
            'communityInvolvement', 'publication', 'conferencePresentation'
        ];

        let allPendingItems: any[] = [];

        for (const itemType of itemTypes) {
            const modelKey = itemType; // Prisma client uses camelCase keys directly
            const model = (prisma as any)[modelKey]; // Access model dynamically

            if (model && typeof model.findMany === 'function') {
                const pending = await model.findMany({
                    where: { status: 'PENDING' },
                    include: {
                        user: { // Include user details
                            select: { id: true, name: true, email: true }
                        }
                    },
                    orderBy: { createdAt: 'asc' } // Oldest first
                });

                // Add itemType to each item for identification on the frontend
                allPendingItems = allPendingItems.concat(pending.map((item: any) => ({ ...item, itemType })));
            } else {
                console.warn(`Model or findMany not found for itemType: ${itemType}`);
            }
        }

        return { success: true, pendingItems: allPendingItems };

    } catch (error: any) {
        console.error("Error fetching pending submissions:", error);
        return { success: false, error: 'Failed to fetch pending items.', pendingItems: [] };
    }
}


// --- Action: Approve Submission ---
export async function approveSubmission(itemId: string, itemType: ItemType) {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized' };
    }

    try {
        const result = await prisma.$transaction(async (tx) => {
            const model = getPrismaModel(tx, itemType);
            const updatedItem = await model.update({
                where: { id: itemId },
                data: {
                    status: 'APPROVED',
                    rejectionReason: null, // Clear rejection reason on approval
                },
                // Include userId to potentially revalidate faculty profile
                select: { userId: true }
            });
            return updatedItem;
        });

        revalidatePath('/admin/approvals');
        // Optionally revalidate specific faculty profile if needed later
        if (result?.userId) {
            revalidatePath(`/profile`); // Revalidate the general profile page for simplicity
            // Consider more specific revalidation if performance becomes an issue:
            // revalidatePath(`/admin/faculty/${result.userId}`);
        }


        console.log(`Approved ${itemType} with ID: ${itemId}`);
        return { success: true };

    } catch (error: any) {
        console.error(`Error approving ${itemType} (${itemId}):`, error);
        return { success: false, error: `Failed to approve item. ${error.message}` };
    }
}

// --- Action: Reject Submission ---
export async function rejectSubmission(itemId: string, itemType: ItemType, reason: string) {
    const session = await getServerSession(authOptions);
    const userRole = (session?.user as any)?.role;

    if (userRole !== 'ADMIN') {
        return { success: false, error: 'Unauthorized' };
    }
    if (!reason || reason.trim() === '') {
        return { success: false, error: 'Rejection reason cannot be empty.' };
    }

    try {
        const result = await prisma.$transaction(async (tx) => {
            const model = getPrismaModel(tx, itemType);
            const updatedItem = await model.update({
                where: { id: itemId },
                data: {
                    status: 'REJECTED',
                    rejectionReason: reason.trim(),
                },
                 // Include userId to potentially revalidate faculty profile
                 select: { userId: true }
            });
             return updatedItem;
        });

        revalidatePath('/admin/approvals');
        // Optionally revalidate specific faculty profile
        if (result?.userId) {
            revalidatePath(`/profile`); // Revalidate the general profile page
        }

        console.log(`Rejected ${itemType} with ID: ${itemId}`);
        return { success: true };

    } catch (error: any) {
        console.error(`Error rejecting ${itemType} (${itemId}):`, error);
        return { success: false, error: `Failed to reject item. ${error.message}` };
    }
}
--- END FILE: src\lib\adminActions.ts ---

--- START FILE: src\lib\auth.ts ---
[EMPTY FILE]
--- END FILE: src\lib\auth.ts ---

--- START FILE: src\lib\db.ts ---
[EMPTY FILE]
--- END FILE: src\lib\db.ts ---

--- START FILE: src\lib\prisma.ts ---
// src/lib/prisma.ts
import { PrismaClient } from '@/generated/prisma';

// Declare a global variable to hold the Prisma Client instance.
// We use 'globalThis' which works in different environments (Node, browser, edge).
// We add '_prisma' to avoid potential naming conflicts.
declare global {
  // eslint-disable-next-line no-var
  var _prisma: PrismaClient | undefined;
}

// Check if we already have an instance in the global scope.
// If not, create a new one. In development, due to Next.js hot reloading,
// 'global._prisma' might already exist, so we reuse it to avoid creating too many connections.
const prisma = globalThis._prisma ?? new PrismaClient();

// In non-production environments, assign the instance to the global scope.
if (process.env.NODE_ENV !== 'production') {
  globalThis._prisma = prisma;
}

// Export the single instance.
export default prisma;
--- END FILE: src\lib\prisma.ts ---

--- START FILE: src\lib\userActions.ts ---
// src/lib/userActions.ts
'use server';

import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import prisma from '@/lib/prisma';
import type {
    User, AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation,
    ApprovalStatus
 } from '@/generated/prisma';
import { revalidatePath } from 'next/cache';
import fs from 'fs/promises';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

// --- Incoming Data Types ---
type IncomingAcademicQualification = Omit<AcademicQualification, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; yearCompleted: number | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingProfessionalLicense = Omit<ProfessionalLicense, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; expiration: string | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingWorkExperience = Omit<WorkExperience, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingProfessionalAffiliation = Omit<ProfessionalAffiliation, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingAwardRecognition = Omit<AwardRecognition, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; yearReceived: number | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingProfessionalDevelopment = Omit<ProfessionalDevelopment, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingCommunityInvolvement = Omit<CommunityInvolvement, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingPublication = Omit<Publication, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; datePublished: string | null; status: ApprovalStatus; rejectionReason?: string | null; };
type IncomingConferencePresentation = Omit<ConferencePresentation, 'createdAt' | 'updatedAt' | 'userId'> & { _isNew?: boolean; id: string; status: ApprovalStatus; rejectionReason?: string | null; };


// --- Helper Functions (ensureUploadDirExists, safeDeleteFile, uploadFile) ---
async function ensureUploadDirExists(subDir: string, userId: string): Promise<string> {
    const userDirPath = path.join(process.cwd(), 'public', 'uploads', subDir, userId);
    try { await fs.mkdir(userDirPath, { recursive: true }); return userDirPath; }
    catch (error) { console.error(`Error creating upload directory (${subDir}):`, error); throw new Error(`Could not create upload directory for ${subDir}.`); }
}
async function safeDeleteFile(filePath: string | null | undefined) {
    if (!filePath || !filePath.startsWith('/uploads/')) { return; }
    try { const localFilePath = path.join(process.cwd(), 'public', filePath); await fs.unlink(localFilePath); console.log(`Successfully deleted file: ${localFilePath}`); }
    catch (error: any) { if (error.code === 'ENOENT') { console.warn(`File not found during deletion attempt: ${filePath}`); } else { console.error(`Error deleting file ${filePath}:`, error.message); } }
}
async function uploadFile(file: File, userId: string, subDir: string): Promise<string> {
    try {
        const MAX_FILE_SIZE = 5 * 1024 * 1024; const ALLOWED_TYPES = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];
        if (file.size > MAX_FILE_SIZE) { throw new Error(`File size exceeds limit (${file.name}).`); }
        if (!ALLOWED_TYPES.includes(file.type)) { throw new Error(`Invalid file type (${file.name}).`); }
        const uploadDir = await ensureUploadDirExists(subDir, userId); const fileExtension = path.extname(file.name); const uniqueFilename = `${uuidv4()}${fileExtension}`; const localFilePath = path.join(uploadDir, uniqueFilename); const fileBuffer = Buffer.from(await file.arrayBuffer()); await fs.writeFile(localFilePath, fileBuffer); const relativeUrl = `/uploads/${subDir}/${userId}/${uniqueFilename}`; console.log(`File uploaded successfully: ${relativeUrl}`); return relativeUrl;
    } catch (uploadError: any) { console.error(`Error uploading file (${file.name}):`, uploadError); throw new Error(`Failed to upload file ${file.name}: ${uploadError.message}`); }
}

// --- Get Profile Data Action ---
interface GetUserProfileDataResponse { user: { id: string; name: string | null; email: string | null; role: string | null; } | null; academicQualifications: AcademicQualification[]; professionalLicenses: ProfessionalLicense[]; workExperiences: WorkExperience[]; professionalAffiliations: ProfessionalAffiliation[]; awardsRecognitions: AwardRecognition[]; professionalDevelopments: ProfessionalDevelopment[]; communityInvolvements: CommunityInvolvement[]; publications: Publication[]; conferencePresentations: ConferencePresentation[]; error?: string; }
export async function getMyProfileData(): Promise<GetUserProfileDataResponse> {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;
    const defaultResponse: Omit<GetUserProfileDataResponse, 'user' | 'error'> = { academicQualifications: [], professionalLicenses: [], workExperiences: [], professionalAffiliations: [], awardsRecognitions: [], professionalDevelopments: [], communityInvolvements: [], publications: [], conferencePresentations: [], };
    if (!userId) { return { user: null, ...defaultResponse, error: 'Not authenticated' }; }
    try {
        const userWithProfile = await prisma.user.findUnique({
            where: { id: userId },
            include: { academicQualifications: { orderBy: { yearCompleted: 'desc' } }, professionalLicenses: { orderBy: { expiration: 'desc' } }, workExperiences: { orderBy: { createdAt: 'desc' } }, professionalAffiliations: { orderBy: { createdAt: 'desc' } }, awardsRecognitions: { orderBy: { yearReceived: 'desc' } }, professionalDevelopments: { orderBy: { createdAt: 'desc' } }, communityInvolvements: { orderBy: { createdAt: 'desc' } }, publications: { orderBy: { datePublished: 'desc' } }, conferencePresentations: { orderBy: { createdAt: 'desc' } }, },
        });
        if (!userWithProfile) { return { user: null, ...defaultResponse, error: 'User not found' }; }
        return { user: { id: userWithProfile.id, name: userWithProfile.name, email: userWithProfile.email, role: userWithProfile.role }, academicQualifications: userWithProfile.academicQualifications ?? [], professionalLicenses: userWithProfile.professionalLicenses ?? [], workExperiences: userWithProfile.workExperiences ?? [], professionalAffiliations: userWithProfile.professionalAffiliations ?? [], awardsRecognitions: userWithProfile.awardsRecognitions ?? [], professionalDevelopments: userWithProfile.professionalDevelopments ?? [], communityInvolvements: userWithProfile.communityInvolvements ?? [], publications: userWithProfile.publications ?? [], conferencePresentations: userWithProfile.conferencePresentations ?? [], };
    } catch (error) { console.error("Error fetching profile data:", error); return { user: null, ...defaultResponse, error: 'Failed to fetch profile data' }; }
}


// --- Update Profile Action ---
interface UpdateProfileResponse { success: boolean; error?: string; }

interface SelectedItem {
    id: string;
    status: ApprovalStatus;
    [key: string]: any;
}

function areDatesEqual(d1: Date | string | null | undefined, d2: Date | string | null | undefined): boolean {
    if (d1 === d2) return true;
    if (!d1 || !d2) return false;
    try {
        const date1 = new Date(d1); const date2 = new Date(d2);
        if (isNaN(date1.getTime()) || isNaN(date2.getTime())) return false;
        return date1.toISOString().split('T')[0] === date2.toISOString().split('T')[0];
    } catch (e) { return false; }
}

export async function updateMyProfile(formData: FormData): Promise<UpdateProfileResponse> {
    'use server';
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id;
    if (!userId) { return { success: false, error: 'Not authenticated' }; }
    console.log(`--- Starting updateMyProfile for user: ${userId} ---`); // Added start log

    function parseJsonData<T>(jsonString: string | null, arrayName: string): T[] {
        if (!jsonString) return [];
        try {
            const isoDateRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|([+-]\d{2}:\d{2}))$/;
            const parsedWithDates = JSON.parse(jsonString, (key, value) => {
                if (typeof value === 'string' && isoDateRegex.test(value)) {
                    const date = new Date(value);
                    if (!isNaN(date.getTime())) { return date; }
                }
                return value;
            });
            if (!Array.isArray(parsedWithDates)) throw new Error(`${arrayName} data is not an array`);
            return parsedWithDates;
        } catch (e: any) {
            console.error(`Error parsing ${arrayName} json:`, e);
            throw new Error(`Invalid ${arrayName} data format received.`);
        }
    }

    const uploadDirs: Record<string, string> = { academicQualifications: 'qualifications', professionalLicenses: 'licenses', workExperiences: 'workexp', professionalAffiliations: 'affiliations', awardsRecognitions: 'awards', professionalDevelopments: 'profdev', communityInvolvements: 'community', publications: 'publications', conferencePresentations: 'presentations' };
    const urlFieldNames: Record<string, string> = { academicQualifications: 'diplomaFileUrl', professionalLicenses: 'licenseFileUrl', workExperiences: 'proofUrl', professionalAffiliations: 'membershipProofUrl', awardsRecognitions: 'certificateUrl', professionalDevelopments: 'certificateFileUrl', communityInvolvements: 'proofUrl', publications: 'pdfUrl', conferencePresentations: 'proofUrl' };
    const requiredFieldsMap: Record<string, string[]> = { academicQualifications: ['degree', 'institution', 'program', 'yearCompleted'], professionalLicenses: ['examination', 'monthYear', 'licenseNumber', 'expiration'], workExperiences: ['institution', 'position', 'inclusiveYears'], professionalAffiliations: ['organization', 'inclusiveYears'], awardsRecognitions: ['awardName', 'awardingBody', 'yearReceived'], professionalDevelopments: ['title', 'organizer', 'dateLocation'], communityInvolvements: ['engagementTitle', 'role', 'locationDate'], publications: ['researchTitle', 'journal', 'datePublished'], conferencePresentations: ['paperTitle', 'eventName', 'dateLocation'] };
    const dateFields: Record<string, string[]> = { professionalLicenses: ['expiration'], publications: ['datePublished'], };

    let filesToDelete: (string | null | undefined)[] = [];
    let incomingData: Record<string, any[]> = {};

    try {
        console.log("Parsing incoming form data..."); // Log parsing start
        incomingData.academicQualifications = parseJsonData<IncomingAcademicQualification>(formData.get('academicQualifications_json') as string | null, 'Academic Qualifications');
        incomingData.professionalLicenses = parseJsonData<IncomingProfessionalLicense>(formData.get('professionalLicenses_json') as string | null, 'Professional Licenses');
        incomingData.workExperiences = parseJsonData<IncomingWorkExperience>(formData.get('workExperiences_json') as string | null, 'Work Experience');
        incomingData.professionalAffiliations = parseJsonData<IncomingProfessionalAffiliation>(formData.get('professionalAffiliations_json') as string | null, 'Professional Affiliations');
        incomingData.awardsRecognitions = parseJsonData<IncomingAwardRecognition>(formData.get('awardsRecognitions_json') as string | null, 'Awards/Recognitions');
        incomingData.professionalDevelopments = parseJsonData<IncomingProfessionalDevelopment>(formData.get('professionalDevelopments_json') as string | null, 'Professional Development');
        incomingData.communityInvolvements = parseJsonData<IncomingCommunityInvolvement>(formData.get('communityInvolvements_json') as string | null, 'Community Involvement');
        incomingData.publications = parseJsonData<IncomingPublication>(formData.get('publications_json') as string | null, 'Publications');
        incomingData.conferencePresentations = parseJsonData<IncomingConferencePresentation>(formData.get('conferencePresentations_json') as string | null, 'Conference Presentations');
        console.log("Finished parsing form data."); // Log parsing end
    } catch (error: any) { return { success: false, error: error.message }; }

    try {
        console.log("Starting database transaction..."); // Log transaction start
        const result = await prisma.$transaction(async (tx) => {
            async function processSection<TIncoming extends { id: string; _isNew?: boolean; status?: ApprovalStatus }, TPrisma extends { id: string; status: ApprovalStatus }>(
                sectionKey: keyof typeof uploadDirs,
                prismaModel: any
            ) {
                const data = incomingData[sectionKey] as TIncoming[];
                if (!data) { console.warn(`No data found for section ${sectionKey}. Skipping.`); return; }
                console.log(`Processing section: ${sectionKey}`);

                const urlFieldName = urlFieldNames[sectionKey];
                const subDir = uploadDirs[sectionKey];
                const requiredFields = requiredFieldsMap[sectionKey] || [];
                const sectionDateFields = dateFields[sectionKey] || [];

                const selectFields: { id: true; status: true; [key: string]: true } = { id: true, status: true };
                if (urlFieldName) { selectFields[urlFieldName] = true; }
                // Fetch ALL fields from DB for comparison
                const currentItems = await prismaModel.findMany({ where: { userId: userId } });
                const currentItemMap = new Map<string, any>(currentItems.map((item: { id: string }) => [item.id, item]));
                const incomingIds = new Set(data.map(item => item.id));
                const idsToDeleteInternal: string[] = [];

                for (const currentItem of currentItems) {
                    if (!incomingIds.has(currentItem.id)) {
                        idsToDeleteInternal.push(currentItem.id);
                        if (urlFieldName && currentItem[urlFieldName]) { filesToDelete.push(currentItem[urlFieldName]); }
                    }
                }
                if (idsToDeleteInternal.length > 0) { console.log(`Deleting ${sectionKey} records:`, idsToDeleteInternal); await prismaModel.deleteMany({ where: { id: { in: idsToDeleteInternal }, userId: userId } }); }

                for (const incomingItem of data) {
                    const fileKey = `${sectionKey}_file_${incomingItem.id}`;
                    const file = formData.get(fileKey) as File | null;
                    let uploadedFileUrl: string | null | undefined = undefined;
                    let fileChanged = false;

                    if (file) { uploadedFileUrl = await uploadFile(file, userId, subDir); fileChanged = true; }

                    const { _isNew, id, status, rejectionReason, ...dataForPrisma } = incomingItem as any;
                    Object.keys(dataForPrisma).forEach(key => {
                        if (['yearCompleted', 'yearReceived'].includes(key) && typeof dataForPrisma[key] === 'string') { const num = parseInt(dataForPrisma[key], 10); dataForPrisma[key] = isNaN(num) ? null : num; }
                        if (typeof dataForPrisma[key] === 'string' && dataForPrisma[key].trim() === '' && !requiredFields.includes(key)) { dataForPrisma[key] = null; }
                        if (sectionDateFields.includes(key)) { if (!(dataForPrisma[key] instanceof Date) && dataForPrisma[key] !== null) { try { const parsedDate = new Date(dataForPrisma[key]); dataForPrisma[key] = !isNaN(parsedDate.getTime()) ? parsedDate : null; } catch { dataForPrisma[key] = null; } } else if (dataForPrisma[key] instanceof Date && isNaN(dataForPrisma[key].getTime())) { dataForPrisma[key] = null; } }
                    });
                    dataForPrisma.userId = userId;
                    if (urlFieldName && uploadedFileUrl !== undefined) { dataForPrisma[urlFieldName] = uploadedFileUrl; }

                    if (_isNew) {
                        console.log(`Attempting create for ${sectionKey} - ID: ${id}`);
                        for (const field of requiredFields) { if (dataForPrisma[field] === null || dataForPrisma[field] === undefined || dataForPrisma[field] === '') { throw new Error(`Missing required field "${field}" for new ${sectionKey}.`); } }
                        dataForPrisma.status = 'PENDING'; dataForPrisma.rejectionReason = null;
                        await prismaModel.create({ data: dataForPrisma });
                        console.log(`Created ${sectionKey} item.`);
                    } else {
                        const currentItem = currentItemMap.get(id);
                        if (!currentItem) { console.warn(`${sectionKey} Update: ID ${id} not found. Skipping.`); continue; }

                        const updateData: Partial<any> = {};
                        let needsDbUpdate = false;
                        let significantChange = false;

                        // --- Comparison Loop with Logging ---
                        console.log(`\n--- Comparing item ${id} in section ${sectionKey} ---`); // Log item start
                        Object.keys(dataForPrisma).forEach(key => {
                            if (key !== 'userId' && key !== 'createdAt' && key !== 'updatedAt' && key !== 'status' && key !== 'rejectionReason') {
                                const incomingValue = dataForPrisma[key];
                                const currentValue = currentItem[key];
                                let fieldChanged = false;

                                if (sectionDateFields.includes(key)) {
                                    fieldChanged = !areDatesEqual(incomingValue, currentValue);
                                } else {
                                    fieldChanged = incomingValue !== currentValue;
                                }

                                // *** ADDED: Detailed Logging ***
                                if (fieldChanged) {
                                    console.log(`[${sectionKey} - ${id}] Field "${key}" CHANGED:`);
                                    console.log(`  Incoming (${typeof incomingValue}):`, incomingValue);
                                    console.log(`  Current  (${typeof currentValue}):`, currentValue);
                                    updateData[key] = incomingValue;
                                    needsDbUpdate = true;
                                    const keyFields = ['degree', 'institution', 'program', 'yearCompleted', 'examination', 'licenseNumber', 'expiration', 'title', 'organizer', 'dateLocation', 'researchTitle', 'journal', 'datePublished', 'paperTitle', 'eventName'];
                                    if (keyFields.includes(key) || (urlFieldName && key === urlFieldName)) {
                                        significantChange = true;
                                    }
                                } else {
                                     // Optional: Log fields that didn't change for debugging completeness
                                     // console.log(`[${sectionKey} - ${id}] Field "${key}" UNCHANGED.`);
                                }
                                // *** END ADDED LOGGING ***
                            }
                        });
                        console.log(`--- Finished comparing item ${id}. Needs DB update: ${needsDbUpdate}, Significant change: ${significantChange} ---`); // Log item end
                        // --- End Comparison Loop ---

                        const currentStatus = currentItem.status;
                        if (significantChange || fileChanged) {
                            if (currentStatus !== 'PENDING') {
                                updateData.status = 'PENDING'; updateData.rejectionReason = null; needsDbUpdate = true;
                                console.log(`Significant change detected for ${sectionKey} ID: ${id}. Resetting status to PENDING.`);
                            }
                        } else if (currentStatus === 'REJECTED' && needsDbUpdate) {
                            updateData.status = 'PENDING'; updateData.rejectionReason = null; needsDbUpdate = true;
                             console.log(`Minor edit on REJECTED ${sectionKey} ID: ${id}. Setting status to PENDING.`);
                        }

                        if (needsDbUpdate) {
                            console.log(`Updating ${sectionKey} ID: ${id} with data:`, updateData);
                            if (urlFieldName && updateData[urlFieldName] !== currentItem[urlFieldName] && currentItem[urlFieldName]) {
                                filesToDelete.push(currentItem[urlFieldName]);
                            }
                            await prismaModel.update({ where: { id: id, userId: userId }, data: updateData });
                        }
                    }
                }
            } // end processSection

            // Process ALL sections
            await processSection('academicQualifications', tx.academicQualification);
            await processSection('professionalLicenses', tx.professionalLicense);
            await processSection('workExperiences', tx.workExperience);
            await processSection('professionalAffiliations', tx.professionalAffiliation);
            await processSection('awardsRecognitions', tx.awardRecognition);
            await processSection('professionalDevelopments', tx.professionalDevelopment);
            await processSection('communityInvolvements', tx.communityInvolvement);
            await processSection('publications', tx.publication);
            await processSection('conferencePresentations', tx.conferencePresentation);

            return { success: true };
        }); // End transaction
        console.log("Database transaction finished."); // Log transaction end

        if (result.success && filesToDelete.length > 0) {
            const uniqueFilesToDelete = [...new Set(filesToDelete.filter(f => f))];
            console.log("Attempting file deletions post-transaction:", uniqueFilesToDelete);
            await Promise.all(uniqueFilesToDelete.map(fileUrl => safeDeleteFile(fileUrl)));
        }

        if (result.success) {
            revalidatePath('/profile'); revalidatePath('/admin/approvals');
            console.log("Profile and Admin Approvals revalidated.");
        }

        console.log(`--- Finished updateMyProfile for user: ${userId} ---`); // Added end log
        return { success: result.success };

    } catch (error: any) {
        console.error("Error in updateMyProfile transaction or file deletion:", error);
        return { success: false, error: error.message || 'Failed to update profile data' };
    }
}
--- END FILE: src\lib\userActions.ts ---

--- START FILE: src\lib\utils.ts ---
[EMPTY FILE]
--- END FILE: src\lib\utils.ts ---

--- START FILE: src\types\index.ts ---
// src/types/index.ts
import type {
    AcademicQualification, ProfessionalLicense, WorkExperience,
    ProfessionalAffiliation, AwardRecognition, ProfessionalDevelopment,
    CommunityInvolvement, Publication, ConferencePresentation,
    ApprovalStatus // <-- Import the enum
} from '@/generated/prisma';
import prisma from '@/lib/prisma';
// Common temporary properties used during editing state
export type TempCommon = {
    _isNew?: boolean; // Flag to indicate if the item was added locally
    id: string;      // Needs ID (can be temporary UUID for new items or real ID for existing)
};

// Specific temporary types for each section
// Add status and rejectionReason, keep _selectedFile
export type TempAcademicQualification = AcademicQualification & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalDevelopment = ProfessionalDevelopment & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalLicense = ProfessionalLicense & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempWorkExperience = WorkExperience & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempProfessionalAffiliation = ProfessionalAffiliation & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempAwardRecognition = AwardRecognition & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempCommunityInvolvement = CommunityInvolvement & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempPublication = Publication & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };
export type TempConferencePresentation = ConferencePresentation & TempCommon & { _selectedFile?: File | null; status: ApprovalStatus; rejectionReason?: string | null; };


// Union type representing any possible item within the editableData state arrays
export type EditableItem =
    | TempAcademicQualification
    | TempProfessionalLicense
    | TempWorkExperience
    | TempProfessionalAffiliation
    | TempAwardRecognition
    | TempProfessionalDevelopment
    | TempCommunityInvolvement
    | TempPublication
    | TempConferencePresentation;

// Type mapping for item types used in admin actions
export type ItemType =
    | 'academicQualification'
    | 'professionalLicense'
    | 'workExperience'
    | 'professionalAffiliation'
    | 'awardRecognition'
    | 'professionalDevelopment'
    | 'communityInvolvement'
    | 'publication'
    | 'conferencePresentation';

// Helper function to map Prisma model names to ItemType strings
// (Useful for admin actions if needed, but Prisma client uses camelCase keys directly)
export function getModelKeyFromItemType(itemType: ItemType): keyof typeof prisma {
    const map: Record<ItemType, keyof typeof prisma> = {
        academicQualification: 'academicQualification',
        professionalLicense: 'professionalLicense',
        workExperience: 'workExperience',
        professionalAffiliation: 'professionalAffiliation',
        awardRecognition: 'awardRecognition',
        professionalDevelopment: 'professionalDevelopment',
        communityInvolvement: 'communityInvolvement',
        publication: 'publication',
        conferencePresentation: 'conferencePresentation',
    };
    return map[itemType];
}
--- END FILE: src\types\index.ts ---

--- START FILE: src\middleware.ts ---
// src/middleware.ts
import { withAuth } from "next-auth/middleware";
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import type { JWT } from "next-auth/jwt";

// Export the default middleware function configured with withAuth
export default withAuth(
    // `withAuth` augments your `Request` with the user's token.
    // This inner function runs ONLY if the user is authenticated (token exists).
    function middleware(req) {
        const token = req.nextauth.token as JWT & { role?: string }; // Token is guaranteed here
        const { pathname } = req.nextUrl;

        // --- NEW: Redirect authenticated users from homepage ---
        // If the user is authenticated (which they are if this function runs)
        // and they are trying to access the root path ('/'), redirect them.
        if (pathname === '/') {
            const userRole = token.role; // Get role from token
            // Determine target dashboard based on role
            const targetUrl = userRole === 'ADMIN' ? '/admin/dashboard' : '/dashboard';
            console.log(`Authenticated user on '/', redirecting to ${targetUrl}`);
            // Redirect to the appropriate dashboard
            return NextResponse.redirect(new URL(targetUrl, req.url));
        }
        // --- END NEW ---

        // --- Role-Based Access Control for /admin ---
        // If user is trying to access an admin route
        if (pathname.startsWith('/admin')) {
            // Check if the user has the ADMIN role
            if (token?.role !== 'ADMIN') {
                // If not admin, redirect them to the faculty dashboard
                console.warn(`Unauthorized access attempt to ${pathname} by user role: ${token?.role}`);
                 return NextResponse.redirect(new URL('/dashboard', req.url));
            }
            // If user is ADMIN and accessing /admin, allow the request
             return NextResponse.next();
        }

        // --- General Authenticated Access ---
        // For any other authenticated route covered by the matcher (like /dashboard, /profile)
        // allow the request to proceed.
        return NextResponse.next();
    },
    {
        callbacks: {
            // This callback ensures the middleware function above runs ONLY if a valid token exists.
            authorized: ({ token }) => !!token
        },
        pages: {
            // Redirect users to /login if they need to sign in (UNCHANGED)
            signIn: "/login",
        },
    }
);

// --- Route Matching ---
// Ensure this middleware runs on the homepage ('/') for authenticated users,
// as well as the protected routes. Exclude API, static files, images, favicon, and the login page itself.
export const config = {
    matcher: [
        /*
         * Match all request paths except for the ones starting with:
         * - api (API routes including /api/auth)
         * - _next/static (static files)
         * - _next/image (image optimization files)
         * - favicon.ico (favicon file)
         * - login (the login page itself)
         * The negative lookahead `(?!...)` correctly excludes these.
         * The pattern `.*` after the lookahead WILL match the root path '/'.
         */
        '/((?!api|_next/static|_next/image|favicon.ico|login).*)',

        // Explicitly adding '/' is not strictly necessary due to the pattern above,
        // but doesn't hurt for clarity if preferred.
        // '/',

        // Keep explicit protected paths if you prefer strictness, though the pattern covers them.
        '/dashboard/:path*',
        '/profile/:path*',
        '/documents/:path*',
        '/admin/:path*',
    ],
};
--- END FILE: src\middleware.ts ---

--- START FILE: .gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# Local Uploads (Development Only!)
/public/uploads/

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

--- END FILE: .gitignore ---

--- START FILE: create_context.ps1 ---
# Define directories/files/extensions to exclude
$excludeDirs = @("node_modules", ".git", ".next", "generated") # Directories containing these names will be excluded
$excludeFiles = @(".env*", "package-lock.json", "yarn.lock", "create_context.ps1", "project_context.txt") # Specific files/patterns to exclude by name
$excludeExtensions = @(".png", ".jpg", ".jpeg", ".gif", ".webp", ".ico", ".svg", ".woff", ".woff2", ".ttf", ".eot", ".pdf", ".zip", ".exe", ".dll", ".db") # Exclude common binary/generated/database files

# Output file path
$outputFile = ".\project_context.txt"
Write-Host "--- Starting Context Script ---"
Write-Host "Output file target: $outputFile"
$currentDir = $PWD.Path
Write-Host "Running in directory: $currentDir"

# Clear output file or create if not exists
if (Test-Path $outputFile) {
    Clear-Content -Path $outputFile
    Write-Host "Cleared existing output file."
} else {
    New-Item -Path $outputFile -ItemType File -Force | Out-Null
    Write-Host "Created new output file."
}


# Get all files recursively
Write-Host "Searching for files..."
try {
    $allFiles = Get-ChildItem -Path . -Recurse -File -ErrorAction SilentlyContinue
    Write-Host "Found $($allFiles.Count) total items initially."
} catch {
     Write-Error "Failed to list files initially: $($_.Exception.Message)"
     exit 1
}


$processedCount = 0
$excludedCount = 0

# Process each file found
foreach ($item in $allFiles) {
    $filePath = $item.FullName
    # Ensure relative path calculation is robust
    if ($filePath.StartsWith($currentDir)) {
         $relativePath = $item.FullName.Substring($currentDir.Length).TrimStart('\/')
         if ($relativePath -eq "") { $relativePath = $item.Name } # Handle files in root
    } else {
         $relativePath = $item.FullName # Fallback
    }

    # --- Exclusion Checks ---
    $isExcluded = $false
    $exclusionReason = ""

    # Check if path contains any excluded directory names (Improved Check)
    foreach ($dir in $excludeDirs) {
        # Check if any part of the directory path matches the excluded dir name
        if (($item.DirectoryName -split '[\\/]') -contains $dir) {
            $isExcluded = $true
            $exclusionReason = "Directory ($dir)"
            break
        }
    }

    # Check if file name matches excluded patterns (if not already excluded)
    if (-not $isExcluded) {
        foreach ($filePattern in $excludeFiles) {
            if ($item.Name -like $filePattern) {
                $isExcluded = $true
                $exclusionReason = "File Pattern ($filePattern)"
                break
            }
        }
    }

    # Check if file extension matches excluded extensions (if not already excluded)
     if (-not $isExcluded) {
        foreach ($ext in $excludeExtensions) {
             if ($item.Extension -eq $ext) {
                 $isExcluded = $true
                 $exclusionReason = "Extension ($ext)"
                 break
             }
        }
    }

    # --- Processing or Skipping ---
    if ($isExcluded) {
        $excludedCount++
        # Write-Host "Skipping (Excluded: $exclusionReason): $relativePath"
    } else {
        # File is not excluded, try to process it
        Write-Host "Processing: $relativePath"
        $processedCount++
        $fileContentRead = $false
        $content = "[ERROR: Could not read file content]" # Default error message

        try {
            # Add file header to output first
            Add-Content -Path $outputFile -Value "--- START FILE: $relativePath ---"

            # Check if file has content before reading
            if ($item.Length -gt 0) {
                # Attempt 1: Use -LiteralPath and -Encoding UTF8 (Most robust)
                try {
                    $content = Get-Content -LiteralPath $filePath -Encoding UTF8 -ErrorAction Stop | Out-String
                    $fileContentRead = $true
                    # Write-Host "Read using -LiteralPath -Encoding UTF8" # Debugging
                } catch {
                     Write-Warning "WARNING: Failed using -LiteralPath -Encoding UTF8 for '$relativePath'. Error: $($_.Exception.Message)"
                    # Attempt 2: Use -LiteralPath without explicit Encoding
                    try {
                         $content = Get-Content -LiteralPath $filePath -ErrorAction Stop | Out-String
                         $fileContentRead = $true
                         Write-Host "Read using -LiteralPath (no encoding specified)" # Debugging
                    } catch {
                         Write-Warning "WARNING: Failed using -LiteralPath for '$relativePath'. Error: $($_.Exception.Message)"
                         # Attempt 3: Original path without -LiteralPath (fallback)
                         try {
                              $content = Get-Content -Path $filePath -Encoding UTF8 -ErrorAction Stop | Out-String
                              $fileContentRead = $true
                              Write-Host "Read using -Path -Encoding UTF8 (fallback)" # Debugging
                         } catch {
                              Write-Warning "WARNING: Failed using -Path -Encoding UTF8 for '$relativePath'. Error: $($_.Exception.Message)"
                              try {
                                   $content = Get-Content -Path $filePath -ErrorAction Stop | Out-String
                                   $fileContentRead = $true
                                   Write-Host "Read using -Path (no encoding, fallback)" # Debugging
                              } catch {
                                   # Final failure
                                    Write-Error "ERROR: All attempts failed to read file '$relativePath'. Error: $($_.Exception.Message)"
                                    # Keep default error message for $content
                              }
                         }
                    }
                }
            } else {
                # File is empty
                 $content = "[EMPTY FILE]"
                 $fileContentRead = $true # Mark as "read" since we know it's empty
            }

            # Add the content (or error message) to the output file
            Add-Content -Path $outputFile -Value $content

            # Add file footer to output
            Add-Content -Path $outputFile -Value "`n--- END FILE: $relativePath ---`n"

        } catch {
            # Catch any broader error during the Add-Content stages etc.
            $errorMessage = "ERROR processing block for file '$relativePath': $($_.Exception.Message)"
            Write-Error $errorMessage
            # Ensure footer is added even on outer error
            Add-Content -Path $outputFile -Value $errorMessage
            Add-Content -Path $outputFile -Value "`n--- END FILE: $relativePath ---`n"
        }
    }
}

Write-Host "--- Script Finished ---"
Write-Host "Processed $processedCount files."
Write-Host "Excluded $excludedCount files."
Write-Host "Output saved to: $outputFile"

# Optional: Copy to clipboard (Windows) - Uncomment if desired
# Get-Content -Path $outputFile | Set-Clipboard
# if ($?) { Write-Host "Output also copied to clipboard." }
--- END FILE: create_context.ps1 ---

--- START FILE: eslint.config.mjs ---
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

--- END FILE: eslint.config.mjs ---

--- START FILE: generate-tree.cjs ---
const fs = require('fs').promises;
const path = require('path');

// --- Configuration ---
const rootDir = '.'; // Use '.' for the current directory
const outputFile = 'project-tree.txt';
const ignoreList = [
    // Core ignores
    'node_modules',
    '.next',
    '.git',
    // Build/Cache/Output
    'dist',
    'build',
    'out',
    'coverage',
    '.swc',
    // Editor/OS specific
    '.vscode',
    '.idea',
    '.DS_Store',
    'Thumbs.db',
    // Logs & Environment files (often sensitive or noisy)
    '.env',
    '.env.local',
    '.env.development',
    '.env.production',
    '.env.test',
    'npm-debug.log*',
    'yarn-debug.log*',
    'yarn-error.log*',
    '*.log',

    // --- NEWLY ADDED / REFINED IGNORES ---
    'migrations',         // Ignore prisma migrations directory
    'dev.db',             // Ignore local dev database file
    'uploads',            // Ignore user uploads directory within public/
    'generated',          // Ignore generated code directories (like Prisma client in src/generated)
    'package-lock.json',  // Ignore lock files (add others if needed: yarn.lock, pnpm-lock.yaml)
    'yarn.lock',
    'pnpm-lock.yaml',
    'next-env.d.ts',      // Ignore Next.js auto-generated types
    'generate-tree.js',   // Ignore this script itself
    // --- End NEWLY ADDED / REFINED IGNORES ---

    outputFile // Ignore the script's own output file (already present)
];
// --- End Configuration ---

const ignoreSet = new Set(ignoreList);

async function generateTree(dir, prefix = '') {
    let output = '';
    let entries;

    try {
        // Read directory contents, getting file types directly
        entries = await fs.readdir(dir, { withFileTypes: true });
    } catch (err) {
        // Handle potential permission errors gracefully
        console.warn(`\n[Warning] Could not read directory: ${dir} (${err.code || err.message})`);
        return `${prefix}└── [Error reading directory]\n`;
    }

    // Filter out ignored entries
    const filteredEntries = entries.filter(entry => !ignoreSet.has(entry.name));

    // Sort entries: directories first, then files, alphabetically
    filteredEntries.sort((a, b) => {
        if (a.isDirectory() && !b.isDirectory()) return -1;
        if (!a.isDirectory() && b.isDirectory()) return 1;
        return a.name.localeCompare(b.name);
    });

    for (let i = 0; i < filteredEntries.length; i++) {
        const entry = filteredEntries[i];
        const connector = i === filteredEntries.length - 1 ? '└── ' : '├── ';
        const entryPath = path.join(dir, entry.name);

        output += prefix + connector + entry.name + '\n';

        if (entry.isDirectory()) {
            const newPrefix = prefix + (i === filteredEntries.length - 1 ? '    ' : '│   ');
            // Recursively call for subdirectories
            output += await generateTree(entryPath, newPrefix);
        }
        // Files are just listed, no further recursion needed
    }
    return output;
}

async function main() {
    const resolvedRootDir = path.resolve(rootDir);
    console.log(`Generating project tree for: ${resolvedRootDir}`);
    console.log(`Ignoring: ${Array.from(ignoreSet).join(', ')}`);

    // Start the tree output with the root directory name
    let treeOutput = path.basename(resolvedRootDir) + '\n';
    treeOutput += await generateTree(resolvedRootDir); // Pass resolved path

    try {
        await fs.writeFile(outputFile, treeOutput);
        console.log(`\nProject tree successfully saved to: ${outputFile}`);
    } catch (err) {
        console.error(`\n[Error] Failed to write output file: ${outputFile}`, err);
    }
}

main().catch(console.error);
--- END FILE: generate-tree.cjs ---

--- START FILE: next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

--- END FILE: next-env.d.ts ---

--- START FILE: next.config.ts ---
// next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  // The 'images' configuration block
  images: {
    // Keep your existing SVG settings if needed
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",

    // Configure allowed external image domains here
    remotePatterns: [
      // Keep existing patterns if you still need them (e.g., for ucarecdn)
      {
        protocol: 'https',
        hostname: 'ucarecdn.com', // Google logo source
        port: '',
        pathname: '/**', // Allow any path on this host
      },

      // --- THIS IS THE NEW PATTERN YOU NEED TO ADD ---
      {
        protocol: 'https',                // Protocol used by the site (usually https)
        hostname: 'www.spcdavao.edu.ph',  // The specific domain name
        port: '',                         // Leave empty for default ports (80/443)
        pathname: '/wp-content/uploads/**', // Allow images specifically from the uploads path
                                          // Using '/**' would allow any path, '/wp-content/uploads/**' is slightly more specific/secure
      },
      // --- END OF NEW PATTERN ---

      // Add any other domains you might need here in the future
    ],
  },
  // Add other Next.js configurations here if you have them (e.g., reactStrictMode)
};

// Export the configuration object
export default nextConfig;
--- END FILE: next.config.ts ---

--- START FILE: package.json ---
{
  "name": "smls-sfms",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@next-auth/prisma-adapter": "^1.0.7",
    "@prisma/client": "^6.6.0",
    "bcrypt": "^5.1.1",
    "next": "15.3.1",
    "next-auth": "^4.24.11",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "postcss": "^8.5.3",
    "prisma": "^6.6.0",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

--- END FILE: package.json ---

--- START FILE: postcss.config.mjs ---
// postcss.config.mjs (Using export default for ES Module compatibility)
const config = {
  plugins: {
    tailwindcss: {}, // For v3
    autoprefixer: {}, // For v3
  }
};
export default config; // Use export default
--- END FILE: postcss.config.mjs ---

--- START FILE: tailwind.config.ts ---
// tailwind.config.ts
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      // Add the font family extension
      fontFamily: {
        // Define 'sans' to use the Inter variable, making it the default sans-serif font
        // Tailwind will automatically apply this to the body via preflight/base styles
        sans: ['var(--font-inter)', 'sans-serif'],
      },
    },
  },
  plugins: [],
};
export default config;
--- END FILE: tailwind.config.ts ---

--- START FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--- END FILE: tsconfig.json ---

